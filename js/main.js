!function a(o,s,l){function u(e,t){if(!s[e]){if(!o[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(d)return d(e,!0);var i=new Error("Cannot find module '"+e+"'");throw i.code="MODULE_NOT_FOUND",i}var r=s[e]={exports:{}};o[e][0].call(r.exports,function(t){return u(o[e][1][t]||t)},r,r.exports,a,o,s,l)}return s[e].exports}for(var d="function"==typeof require&&require,t=0;t<l.length;t++)u(l[t]);return u}({1:[function(t,e,n){var i,r;i=this,r=function(i){"use strict";i=i&&i.hasOwnProperty("default")?i.default:i;var t,d={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},u=(function(t){var u={};for(var e in d)d.hasOwnProperty(e)&&(u[d[e]]=e);var o=t.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var n in o)if(o.hasOwnProperty(n)){if(!("channels"in o[n]))throw new Error("missing channels property: "+n);if(!("labels"in o[n]))throw new Error("missing channel labels property: "+n);if(o[n].labels.length!==o[n].channels)throw new Error("channel and label counts mismatch: "+n);var i=o[n].channels,r=o[n].labels;delete o[n].channels,delete o[n].labels,Object.defineProperty(o[n],"channels",{value:i}),Object.defineProperty(o[n],"labels",{value:r})}o.rgb.hsl=function(t){var e,n,i=t[0]/255,r=t[1]/255,a=t[2]/255,o=Math.min(i,r,a),s=Math.max(i,r,a),l=s-o;return s===o?e=0:i===s?e=(r-a)/l:r===s?e=2+(a-i)/l:a===s&&(e=4+(i-r)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s===o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]},o.rgb.hsv=function(t){function e(t){return(d-t)/6/c+.5}var n,i,r,a,o,s=t[0]/255,l=t[1]/255,u=t[2]/255,d=Math.max(s,l,u),c=d-Math.min(s,l,u);return 0==c?a=o=0:(o=c/d,n=e(s),i=e(l),r=e(u),s===d?a=r-i:l===d?a=1/3+n-r:u===d&&(a=2/3+i-n),a<0?a+=1:1<a&&--a),[360*a,100*o,100*d]},o.rgb.hwb=function(t){var e=t[0],n=t[1],i=t[2];return[o.rgb.hsl(t)[0],100*(1/255*Math.min(e,Math.min(n,i))),100*(i=1-1/255*Math.max(e,Math.max(n,i)))]},o.rgb.cmyk=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255,r=Math.min(1-e,1-n,1-i);return[100*((1-e-r)/(1-r)||0),100*((1-n-r)/(1-r)||0),100*((1-i-r)/(1-r)||0),100*r]},o.rgb.keyword=function(t){var e=u[t];if(e)return e;var n,i,r,a,o,s=1/0;for(var l in d){d.hasOwnProperty(l)&&(i=d[l],a=t,o=i,(r=Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)+Math.pow(a[2]-o[2],2))<s&&(s=r,n=l))}return n},o.keyword.rgb=function(t){return d[t]},o.rgb.xyz=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255;return[100*(.4124*(e=.04045<e?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=.04045<n?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(i=.04045<i?Math.pow((i+.055)/1.055,2.4):i/12.92)),100*(.2126*e+.7152*n+.0722*i),100*(.0193*e+.1192*n+.9505*i)]},o.rgb.lab=function(t){var e=o.rgb.xyz(t),n=e[0],i=e[1],r=e[2];return i/=100,r/=108.883,n=.008856<(n/=95.047)?Math.pow(n,1/3):7.787*n+16/116,[116*(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116)-16,500*(n-i),200*(i-(r=.008856<r?Math.pow(r,1/3):7.787*r+16/116))]},o.hsl.rgb=function(t){var e,n,i,r,a,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[a=255*l,a,a];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),r=[0,0,0];for(var u=0;u<3;u++)(i=o+1/3*-(u-1))<0&&i++,1<i&&i--,a=6*i<1?e+6*(n-e)*i:2*i<1?n:3*i<2?e+(n-e)*(2/3-i)*6:e,r[u]=255*a;return r},o.hsl.hsv=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,r=n,a=Math.max(i,.01);return n*=(i*=2)<=1?i:2-i,r*=a<=1?a:2-a,[e,100*(0===i?2*r/(a+r):2*n/(i+n)),100*((i+n)/2)]},o.hsv.rgb=function(t){var e=t[0]/60,n=t[1]/100,i=t[2]/100,r=Math.floor(e)%6,a=e-Math.floor(e),o=255*i*(1-n),s=255*i*(1-n*a),l=255*i*(1-n*(1-a));switch(i*=255,r){case 0:return[i,l,o];case 1:return[s,i,o];case 2:return[o,i,l];case 3:return[o,s,i];case 4:return[l,o,i];case 5:return[i,o,s]}},o.hsv.hsl=function(t){var e=t[0],n=t[1]/100,i=t[2]/100,r=Math.max(i,.01),a=(2-n)*i,o=(2-n)*r,s=n*r;return[e,100*(s=(s/=o<=1?o:2-o)||0),100*(a/=2)]},o.hwb.rgb=function(t){var e,n,i,r,a,o,s,l=t[0]/360,u=t[1]/100,d=t[2]/100,c=u+d;switch(1<c&&(u/=c,d/=c),i=6*l-(e=Math.floor(6*l)),0!=(1&e)&&(i=1-i),r=u+i*((n=1-d)-u),e){default:case 6:case 0:a=n,o=r,s=u;break;case 1:a=r,o=n,s=u;break;case 2:a=u,o=n,s=r;break;case 3:a=u,o=r,s=n;break;case 4:a=r,o=u,s=n;break;case 5:a=n,o=u,s=r}return[255*a,255*o,255*s]},o.cmyk.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,r=t[3]/100;return[255*(1-Math.min(1,e*(1-r)+r)),255*(1-Math.min(1,n*(1-r)+r)),255*(1-Math.min(1,i*(1-r)+r))]},o.xyz.rgb=function(t){var e=t[0]/100,n=t[1]/100,i=t[2]/100,r=3.2406*e+-1.5372*n+-.4986*i,a=-.9689*e+1.8758*n+.0415*i,o=.0557*e+-.204*n+1.057*i;return r=.0031308<r?1.055*Math.pow(r,1/2.4)-.055:12.92*r,a=.0031308<a?1.055*Math.pow(a,1/2.4)-.055:12.92*a,o=.0031308<o?1.055*Math.pow(o,1/2.4)-.055:12.92*o,[255*(r=Math.min(Math.max(0,r),1)),255*(a=Math.min(Math.max(0,a),1)),255*(o=Math.min(Math.max(0,o),1))]},o.xyz.lab=function(t){var e=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,e=.008856<(e/=95.047)?Math.pow(e,1/3):7.787*e+16/116,[116*(n=.008856<n?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(i=.008856<i?Math.pow(i,1/3):7.787*i+16/116))]},o.lab.xyz=function(t){var e=(t[0]+16)/116,n=t[1]/500+e,i=e-t[2]/200,r=Math.pow(e,3),a=Math.pow(n,3),o=Math.pow(i,3);return e=.008856<r?r:(e-16/116)/7.787,n=.008856<a?a:(n-16/116)/7.787,i=.008856<o?o:(i-16/116)/7.787,[n*=95.047,e*=100,i*=108.883]},o.lab.lch=function(t){var e=t[0],n=t[1],i=t[2],r=360*Math.atan2(i,n)/2/Math.PI;return r<0&&(r+=360),[e,Math.sqrt(n*n+i*i),r]},o.lch.lab=function(t){var e=t[0],n=t[1],i=t[2]/360*2*Math.PI;return[e,n*Math.cos(i),n*Math.sin(i)]},o.rgb.ansi16=function(t){var e=t[0],n=t[1],i=t[2],r=1 in arguments?arguments[1]:o.rgb.hsv(t)[2];if(0===(r=Math.round(r/50)))return 30;var a=30+(Math.round(i/255)<<2|Math.round(n/255)<<1|Math.round(e/255));return 2===r&&(a+=60),a},o.hsv.ansi16=function(t){return o.rgb.ansi16(o.hsv.rgb(t),t[2])},o.rgb.ansi256=function(t){var e=t[0],n=t[1],i=t[2];return e===n&&n===i?e<8?16:248<e?231:Math.round((e-8)/247*24)+232:16+36*Math.round(e/255*5)+6*Math.round(n/255*5)+Math.round(i/255*5)},o.ansi16.rgb=function(t){var e=t%10;if(0===e||7===e)return 50<t&&(e+=3.5),[e=e/10.5*255,e,e];var n=.5*(1+~~(50<t));return[(1&e)*n*255,(e>>1&1)*n*255,(e>>2&1)*n*255]},o.ansi256.rgb=function(t){if(232<=t){var e=10*(t-232)+8;return[e,e,e]}var n;return t-=16,[Math.floor(t/36)/5*255,Math.floor((n=t%36)/6)/5*255,n%6/5*255]},o.rgb.hex=function(t){var e=(((255&Math.round(t[0]))<<16)+((255&Math.round(t[1]))<<8)+(255&Math.round(t[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},o.hex.rgb=function(t){var e=t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];var n=e[0];3===e[0].length&&(n=n.split("").map(function(t){return t+t}).join(""));var i=parseInt(n,16);return[i>>16&255,i>>8&255,255&i]},o.rgb.hcg=function(t){var e=t[0]/255,n=t[1]/255,i=t[2]/255,r=Math.max(Math.max(e,n),i),a=Math.min(Math.min(e,n),i),o=r-a,s=o<1?a/(1-o):0,l=o<=0?0:r===e?(n-i)/o%6:r===n?2+(i-e)/o:4+(e-n)/o+4;return l/=6,[360*(l%=1),100*o,100*s]},o.hsl.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=1,r=0;return(i=n<.5?2*e*n:2*e*(1-n))<1&&(r=(n-.5*i)/(1-i)),[t[0],100*i,100*r]},o.hsv.hcg=function(t){var e=t[1]/100,n=t[2]/100,i=e*n,r=i<1?(n-i)/(1-i):0;return[t[0],100*i,100*r]},o.hcg.rgb=function(t){var e=t[0]/360,n=t[1]/100,i=t[2]/100;if(0==n)return[255*i,255*i,255*i];var r,a=[0,0,0],o=e%1*6,s=o%1,l=1-s;switch(Math.floor(o)){case 0:a[0]=1,a[1]=s,a[2]=0;break;case 1:a[0]=l,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=s;break;case 3:a[0]=0,a[1]=l,a[2]=1;break;case 4:a[0]=s,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=l}return r=(1-n)*i,[255*(n*a[0]+r),255*(n*a[1]+r),255*(n*a[2]+r)]},o.hcg.hsv=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e),i=0<n?e/n:0;return[t[0],100*i,100*n]},o.hcg.hsl=function(t){var e=t[1]/100,n=t[2]/100*(1-e)+.5*e,i=0;return 0<n&&n<.5?i=e/(2*n):.5<=n&&n<1&&(i=e/(2*(1-n))),[t[0],100*i,100*n]},o.hcg.hwb=function(t){var e=t[1]/100,n=e+t[2]/100*(1-e);return[t[0],100*(n-e),100*(1-n)]},o.hwb.hcg=function(t){var e=t[1]/100,n=1-t[2]/100,i=n-e,r=i<1?(n-i)/(1-i):0;return[t[0],100*i,100*r]},o.apple.rgb=function(t){return[t[0]/65535*255,t[1]/65535*255,t[2]/65535*255]},o.rgb.apple=function(t){return[t[0]/255*65535,t[1]/255*65535,t[2]/255*65535]},o.gray.rgb=function(t){return[t[0]/100*255,t[0]/100*255,t[0]/100*255]},o.gray.hsl=o.gray.hsv=function(t){return[0,0,t[0]]},o.gray.hwb=function(t){return[0,100,t[0]]},o.gray.cmyk=function(t){return[0,0,0,t[0]]},o.gray.lab=function(t){return[t[0],0,0]},o.gray.hex=function(t){var e=255&Math.round(t[0]/100*255),n=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(n.length)+n},o.rgb.gray=function(t){return[(t[0]+t[1]+t[2])/3/255*100]}}(t={exports:{}}),t.exports);u.rgb,u.hsl,u.hsv,u.hwb,u.cmyk,u.xyz,u.lab,u.lch,u.hex,u.keyword,u.ansi16,u.ansi256,u.hcg,u.apple,u.gray;function s(t){var e=function(){for(var t={},e=Object.keys(u),n=e.length,i=0;i<n;i++)t[e[i]]={distance:-1,parent:null};return t}(),n=[t];for(e[t].distance=0;n.length;)for(var i=n.pop(),r=Object.keys(u[i]),a=r.length,o=0;o<a;o++){var s=r[o],l=e[s];-1===l.distance&&(l.distance=e[i].distance+1,l.parent=i,n.unshift(s))}return e}function l(t,e){for(var n=[e[t].parent,t],i=u[e[t].parent][t],r=e[t].parent;e[r].parent;)n.unshift(e[r].parent),i=function(e,n){return function(t){return n(e(t))}}(u[e[r].parent][r],i),r=e[r].parent;return i.conversion=n,i}var r={};function a(e){function t(t){return null==t?t:(1<arguments.length&&(t=Array.prototype.slice.call(arguments)),e(t))}return"conversion"in e&&(t.conversion=e.conversion),t}function o(r){function t(t){if(null==t)return t;1<arguments.length&&(t=Array.prototype.slice.call(arguments));var e=r(t);if("object"==typeof e)for(var n=e.length,i=0;i<n;i++)e[i]=Math.round(e[i]);return e}return"conversion"in r&&(t.conversion=r.conversion),t}Object.keys(u).forEach(function(n){r[n]={},Object.defineProperty(r[n],"channels",{value:u[n].channels}),Object.defineProperty(r[n],"labels",{value:u[n].labels});var i=function(t){for(var e=s(t),n={},i=Object.keys(e),r=i.length,a=0;a<r;a++){var o=i[a];null!==e[o].parent&&(n[o]=l(o,e))}return n}(n);Object.keys(i).forEach(function(t){var e=i[t];r[n][t]=o(e),r[n][t].raw=a(e)})});var c=r,h={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},n={getRgba:f,getHsla:g,getRgb:function(t){var e=f(t);return e&&e.slice(0,3)},getHsl:function(t){var e=g(t);return e&&e.slice(0,3)},getHwb:m,getAlpha:function(t){var e=f(t);{if(e)return e[3];if(e=g(t))return e[3];if(e=m(t))return e[3]}},hexString:function(t,e){e=void 0!==e&&3===t.length?e:t[3];return"#"+_(t[0])+_(t[1])+_(t[2])+(0<=e&&e<1?_(Math.round(255*e)):"")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return p(t,e);return"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:p,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return v(t,e);var n=Math.round(t[0]/255*100),i=Math.round(t[1]/255*100),r=Math.round(t[2]/255*100);return"rgb("+n+"%, "+i+"%, "+r+"%)"},percentaString:v,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return y(t,e);return"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:y,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return e[t.slice(0,3)]}};function f(t){if(t){var e=[0,0,0],n=1,i=t.match(/^#([a-fA-F0-9]{3,4})$/i),r="";if(i){r=(i=i[1])[3];for(var a=0;a<e.length;a++)e[a]=parseInt(i[a]+i[a],16);r&&(n=Math.round(parseInt(r+r,16)/255*100)/100)}else if(i=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){r=i[2],i=i[1];for(a=0;a<e.length;a++)e[a]=parseInt(i.slice(2*a,2*a+2),16);r&&(n=Math.round(parseInt(r,16)/255*100)/100)}else if(i=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=parseInt(i[a+1]);n=parseFloat(i[4])}else if(i=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=Math.round(2.55*parseFloat(i[a+1]));n=parseFloat(i[4])}else if(i=t.match(/(\w+)/)){if("transparent"==i[1])return[0,0,0,0];if(!(e=h[i[1]]))return}for(a=0;a<e.length;a++)e[a]=b(e[a],0,255);return n=n||0==n?b(n,0,1):1,e[3]=n,e}}function g(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[b(parseInt(e[1]),0,360),b(parseFloat(e[2]),0,100),b(parseFloat(e[3]),0,100),b(isNaN(n)?1:n,0,1)]}}}function m(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[b(parseInt(e[1]),0,360),b(parseFloat(e[2]),0,100),b(parseFloat(e[3]),0,100),b(isNaN(n)?1:n,0,1)]}}}function p(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function v(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function y(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function b(t,e,n){return Math.min(Math.max(e,t),n)}function _(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var e={};for(var x in h)e[h[x]]=x;var w=function(t){return t instanceof w?t:this instanceof w?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(e=n.getRgba(t))?this.setValues("rgb",e):(e=n.getHsla(t))?this.setValues("hsl",e):(e=n.getHwb(t))&&this.setValues("hwb",e):"object"==typeof t&&(void 0!==(e=t).r||void 0!==e.red?this.setValues("rgb",e):void 0!==e.l||void 0!==e.lightness?this.setValues("hsl",e):void 0!==e.v||void 0!==e.value?this.setValues("hsv",e):void 0!==e.w||void 0!==e.whiteness?this.setValues("hwb",e):void 0===e.c&&void 0===e.cyan||this.setValues("cmyk",e)))):new w(t);var e};w.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t=t&&((t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return n.hexString(this.values.rgb)},rgbString:function(){return n.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return n.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return n.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return n.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return n.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return n.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return n.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var i=t[n]/255;e[n]=i<=.03928?i/12.92:Math.pow((.055+i)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return n<e?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return 7.1<=e?"AAA":4.5<=e?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=this,i=t,r=void 0===e?.5:e,a=2*r-1,o=n.alpha()-i.alpha(),s=(1+(a*o==-1?a:(a+o)/(1+a*o)))/2,l=1-s;return this.rgb(s*n.red()+l*i.red(),s*n.green()+l*i.green(),s*n.blue()+l*i.blue()).alpha(n.alpha()*r+i.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new w,i=this.values,r=n.values;for(var a in i)i.hasOwnProperty(a)&&(t=i[a],"[object Array]"===(e={}.toString.call(t))?r[a]=t.slice(0):"[object Number]"===e?r[a]=t:console.error("unexpected color value:",t));return n}},w.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},w.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},w.prototype.getValues=function(t){for(var e=this.values,n={},i=0;i<t.length;i++)n[t.charAt(i)]=e[t][i];return 1!==e.alpha&&(n.a=e.alpha),n},w.prototype.setValues=function(t,e){var n,i=this.values,r=this.spaces,a=this.maxes,o=1;if(this.valid=!0,"alpha"===t)o=e;else if(e.length)i[t]=e.slice(0,t.length),o=e[t.length];else if(void 0!==e[t.charAt(0)]){for(l=0;l<t.length;l++)i[t][l]=e[t.charAt(l)];o=e.a}else if(void 0!==e[r[t][0]]){for(var s=r[t],l=0;l<t.length;l++)i[t][l]=e[s[l]];o=e.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===o?i.alpha:o)),"alpha"===t)return!1;for(l=0;l<t.length;l++)n=Math.max(0,Math.min(a[t][l],i[t][l])),i[t][l]=Math.round(n);for(var u in r)u!==t&&(i[u]=c[t][u](i[t]));return!0},w.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},w.prototype.setChannel=function(t,e,n){var i=this.values[t];return void 0===n?i[e]:(n===i[e]||(i[e]=n,this.setValues(t,i)),this)},"undefined"!=typeof window&&(window.Color=w);var k=w;function M(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}var S,D={noop:function(){},uid:(S=0,function(){return S++}),isNullOrUndef:function(t){return null==t},isArray:function(t){if(Array.isArray&&Array.isArray(t))return!0;var e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},isFinite:function(t){return("number"==typeof t||t instanceof Number)&&isFinite(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return D.valueOrDefault(D.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,i){var r,a,o;if(D.isArray(t))if(a=t.length,i)for(r=a-1;0<=r;r--)e.call(n,t[r],r);else for(r=0;r<a;r++)e.call(n,t[r],r);else if(D.isObject(t))for(a=(o=Object.keys(t)).length,r=0;r<a;r++)e.call(n,t[o[r]],o[r])},arrayEquals:function(t,e){var n,i,r,a;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],a=e[n],r instanceof Array&&a instanceof Array){if(!D.arrayEquals(r,a))return!1}else if(r!==a)return!1;return!0},clone:function(t){if(D.isArray(t))return t.map(D.clone);if(D.isObject(t)){for(var e=Object.create(t),n=Object.keys(t),i=n.length,r=0;r<i;++r)e[n[r]]=D.clone(t[n[r]]);return e}return t},_merger:function(t,e,n,i){var r,a;M(t)&&(r=e[t],a=n[t],D.isObject(r)&&D.isObject(a)?D.merge(r,a,i):e[t]=D.clone(a))},_mergerIf:function(t,e,n){var i,r;M(t)&&(i=e[t],r=n[t],D.isObject(i)&&D.isObject(r)?D.mergeIf(i,r):e.hasOwnProperty(t)||(e[t]=D.clone(r)))},merge:function(t,e,n){var i,r,a,o,s,l=D.isArray(e)?e:[e],u=l.length;if(!D.isObject(t))return t;for(i=(n=n||{}).merger||D._merger,r=0;r<u;++r)if(e=l[r],D.isObject(e))for(s=0,o=(a=Object.keys(e)).length;s<o;++s)i(a[s],t,e,n);return t},mergeIf:function(t,e){return D.merge(t,e,{merger:D._mergerIf})},extend:Object.assign||function(t){return D.merge(t,[].slice.call(arguments,1),{merger:function(t,e,n){e[t]=n[t]}})},inherits:function(t){function e(){this.constructor=i}var n=this,i=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return n.apply(this,arguments)};return e.prototype=n.prototype,i.prototype=new e,i.extend=D.inherits,t&&D.extend(i.prototype,t),i.__super__=n.prototype,i},_deprecated:function(t,e,n,i){void 0!==e&&console.warn(t+': "'+n+'" is deprecated. Please use "'+i+'" instead')}},C=D;D.callCallback=D.callback,D.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},D.getValueOrDefault=D.valueOrDefault,D.getValueAtIndexOrDefault=D.valueAtIndexOrDefault;var T={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-(--t*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return--t*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return 1<=t?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1- --t*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),-(i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)))},easeOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:1===t?1:(n=n||.3,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,i=1;return 0===t?0:2==(t/=.5)?1:(n=n||.45,e=i<1?(i=1,n/4):n/(2*Math.PI)*Math.asin(1/i),t<1?i*Math.pow(2,10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*-.5:i*Math.pow(2,-10*--t)*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){return t*t*(2.70158*t-1.70158)},easeOutBack:function(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-T.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*T.easeInBounce(2*t):.5*T.easeOutBounce(2*t-1)+.5}},P={effects:T};C.easingEffects=T;var O=Math.PI,A=O/180,I=2*O,F=O/2,L=O/4,N=2*O/3,R={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,i,r,a){var o,s,l,u,d;a?(s=e+(o=Math.min(a,r/2,i/2)),l=n+o,u=e+i-o,d=n+r-o,t.moveTo(e,l),s<u&&l<d?(t.arc(s,l,o,-O,-F),t.arc(u,l,o,-F,0),t.arc(u,d,o,0,F),t.arc(s,d,o,F,O)):s<u?(t.moveTo(s,n),t.arc(u,l,o,-F,F),t.arc(s,l,o,F,O+F)):l<d?(t.arc(s,l,o,-O,0),t.arc(s,d,o,0,O)):t.arc(s,l,o,-O,O),t.closePath(),t.moveTo(e,n)):t.rect(e,n,i,r)},drawPoint:function(t,e,n,i,r,a){var o,s,l,u,d,c=(a||0)*A;if(e&&"object"==typeof e&&("[object HTMLImageElement]"===(o=e.toString())||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,r),t.rotate(c),t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),void t.restore();if(!(isNaN(n)||n<=0)){switch(t.beginPath(),e){default:t.arc(i,r,n,0,I),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(c)*n,r-Math.cos(c)*n),c+=N,t.lineTo(i+Math.sin(c)*n,r-Math.cos(c)*n),c+=N,t.lineTo(i+Math.sin(c)*n,r-Math.cos(c)*n),t.closePath();break;case"rectRounded":u=n-(d=.516*n),s=Math.cos(c+L)*u,l=Math.sin(c+L)*u,t.arc(i-s,r-l,d,c-O,c-F),t.arc(i+l,r-s,d,c-F,c),t.arc(i+s,r+l,d,c,c+F),t.arc(i-l,r+s,d,c+F,c+O),t.closePath();break;case"rect":if(!a){u=Math.SQRT1_2*n,t.rect(i-u,r-u,2*u,2*u);break}c+=L;case"rectRot":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+l,r-s),t.lineTo(i+s,r+l),t.lineTo(i-l,r+s),t.closePath();break;case"crossRot":c+=L;case"cross":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"star":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s),c+=L,s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l),t.moveTo(i+l,r-s),t.lineTo(i-l,r+s);break;case"line":s=Math.cos(c)*n,l=Math.sin(c)*n,t.moveTo(i-s,r-l),t.lineTo(i+s,r+l);break;case"dash":t.moveTo(i,r),t.lineTo(i+Math.cos(c)*n,r+Math.sin(c)*n)}t.fill(),t.stroke()}},_isPointInArea:function(t,e){return t.x>e.left-1e-6&&t.x<e.right+1e-6&&t.y>e.top-1e-6&&t.y<e.bottom+1e-6},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,i){var r,a=n.steppedLine;if(a)return"middle"===a?(r=(e.x+n.x)/2,t.lineTo(r,i?n.y:e.y),t.lineTo(r,i?e.y:n.y)):"after"===a&&!i||"after"!==a&&i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y),void t.lineTo(n.x,n.y);n.tension?t.bezierCurveTo(i?e.controlPointPreviousX:e.controlPointNextX,i?e.controlPointPreviousY:e.controlPointNextY,i?n.controlPointNextX:n.controlPointPreviousX,i?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}},Y=R;C.clear=R.clear,C.drawRoundedRectangle=function(t){t.beginPath(),R.roundedRect.apply(R,arguments)};var W={_set:function(t,e){return C.merge(this[t]||(this[t]={}),e)}};W._set("global",{defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",defaultLineHeight:1.2,showLines:!0});var E=W,z=C.valueOrDefault;var V={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,i,r;return C.isObject(t)?(e=+t.top||0,n=+t.right||0,i=+t.bottom||0,r=+t.left||0):e=n=i=r=+t||0,{top:e,right:n,bottom:i,left:r,height:e+i,width:r+n}},_parseFont:function(t){var e,n=E.global,i=z(t.fontSize,n.defaultFontSize),r={family:z(t.fontFamily,n.defaultFontFamily),lineHeight:C.options.toLineHeight(z(t.lineHeight,n.defaultLineHeight),i),size:i,style:z(t.fontStyle,n.defaultFontStyle),weight:null,string:""};return r.string=!(e=r)||C.isNullOrUndef(e.size)||C.isNullOrUndef(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family,r},resolve:function(t,e,n,i){for(var r,a=!0,o=0,s=t.length;o<s;++o)if(void 0!==(r=t[o])&&(void 0!==e&&"function"==typeof r&&(r=r(e),a=!1),void 0!==n&&C.isArray(r)&&(r=r[n],a=!1),void 0!==r))return i&&!a&&(i.cacheable=!1),r}},j={_factorize:function(t){for(var e=[],n=Math.sqrt(t),i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(function(t,e){return t-e}).pop(),e},log10:Math.log10||function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e}},H=j;C.log10=j.log10;var B=C,U=Y,q=V,G=H,Z={getRtlAdapter:function(t,e,n){return t?(i=e,r=n,{x:function(t){return i+i+r-t},setWidth:function(t){r=t},textAlign:function(t){return"center"===t?t:"right"===t?"left":"right"},xPlus:function(t,e){return t-e},leftForLtr:function(t,e){return t-e}}):{x:function(t){return t},setWidth:function(t){},textAlign:function(t){return t},xPlus:function(t,e){return t+e},leftForLtr:function(t,e){return t}};var i,r},overrideTextDirection:function(t,e){var n,i;"ltr"!==e&&"rtl"!==e||(i=[(n=t.canvas.style).getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)},restoreTextDirection:function(t){var e=t.prevTextDirection;void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}};B.easing=P,B.canvas=U,B.options=q,B.math=G,B.rtl=Z;function $(t){B.extend(this,t),this.initialize.apply(this,arguments)}B.extend($.prototype,{_type:void 0,initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=B.extend({},t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,i=e._start,r=e._view;return n&&1!==t?(r=r||(e._view={}),function(t,e,n,i){for(var r,a,o,s,l,u,d,c=Object.keys(n),h=0,f=c.length;h<f;++h)if(s=n[r=c[h]],e.hasOwnProperty(r)||(e[r]=s),(a=e[r])!==s&&"_"!==r[0]){if(t.hasOwnProperty(r)||(t[r]=a),(l=typeof s)==typeof(o=t[r]))if("string"==l){if((u=k(o)).valid&&(d=k(s)).valid){e[r]=d.mix(u,i).rgbString();continue}}else if(B.isFinite(o)&&B.isFinite(s)){e[r]=o+(s-o)*i;continue}e[r]=s}}(i=i||(e._start={}),r,n,t)):(e._view=B.extend({},n),e._start=null),e},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return B.isNumber(this._model.x)&&B.isNumber(this._model.y)}}),$.extend=B.inherits;var X=$,K=X.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),J=K;Object.defineProperty(K.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(K.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}}),E._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:B.noop,onComplete:B.noop}});var Q={animations:[],request:null,addAnimation:function(t,e,n,i){var r,a,o=this.animations;for(e.chart=t,e.startTime=Date.now(),e.duration=n,i||(t.animating=!0),r=0,a=o.length;r<a;++r)if(o[r].chart===t)return void(o[r]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=B.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=B.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){this.advance(),0<this.animations.length&&this.requestAnimationFrame()},advance:function(){for(var t,e,n,i,r=this.animations,a=0;a<r.length;)e=(t=r[a]).chart,n=t.numSteps,i=Math.floor((Date.now()-t.startTime)/t.duration*n)+1,t.currentStep=Math.min(i,n),B.callback(t.render,[e,t],e),B.callback(t.onAnimationProgress,[t],e),t.currentStep>=n?(B.callback(t.onAnimationComplete,[t],e),e.animating=!1,r.splice(a,1)):++a}},tt=B.options.resolve,et=["push","pop","shift","splice","unshift"];function nt(e,t){var n,i,r=e._chartjs;r&&(-1!==(i=(n=r.listeners).indexOf(t))&&n.splice(i,1),0<n.length||(et.forEach(function(t){delete e[t]}),delete e._chartjs))}function it(t,e){this.initialize(t,e)}B.extend(it.prototype,{datasetElementType:null,dataElementType:null,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth"],_dataElementOptions:["backgroundColor","borderColor","borderWidth","pointStyle"],initialize:function(t,e){var n=this;n.chart=t,n.index=e,n.linkScales(),n.addElements(),n._type=n.getMeta().type},updateIndex:function(t){this.index=t},linkScales:function(){var t=this.getMeta(),e=this.chart,n=e.scales,i=this.getDataset(),r=e.options.scales;null!==t.xAxisID&&t.xAxisID in n&&!i.xAxisID||(t.xAxisID=i.xAxisID||r.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in n&&!i.yAxisID||(t.yAxisID=i.yAxisID||r.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},_getValueScaleId:function(){return this.getMeta().yAxisID},_getIndexScaleId:function(){return this.getMeta().xAxisID},_getValueScale:function(){return this.getScaleForId(this._getValueScaleId())},_getIndexScale:function(){return this.getScaleForId(this._getIndexScaleId())},reset:function(){this._update(!0)},destroy:function(){this._data&&nt(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){for(var t=this.getMeta(),e=this.getDataset().data||[],n=t.data,i=0,r=e.length;i<r;++i)n[i]=n[i]||this.createMetaData(i);t.dataset=t.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var r,t,e=this,n=e.getDataset(),i=n.data||(n.data=[]);e._data!==i&&(e._data&&nt(e._data,e),i&&Object.isExtensible(i)&&(t=e,(r=i)._chartjs?r._chartjs.listeners.push(t):(Object.defineProperty(r,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),et.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),i=r[t];Object.defineProperty(r,t,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),t=i.apply(this,e);return B.each(r._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),t}})}))),e._data=i),e.resyncElements()},_configure:function(){this._config=B.merge(Object.create(null),[this.chart.options.datasets[this._type],this.getDataset()],{merger:function(t,e,n){"_meta"!==t&&"data"!==t&&B._merger(t,e,n)}})},_update:function(t){this._configure(),this._cachedDataOpts=null,this.update(t)},update:B.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],i=n.length,r=0;r<i;++r)n[r].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,i=0;for(t.dataset&&t.dataset.draw();i<n;++i)e[i].draw()},getStyle:function(t){var e,n=this.getMeta(),i=n.dataset;return this._configure(),!1!==(e=i&&void 0===t?this._resolveDatasetElementOptions(i||{}):(t=t||0,this._resolveDataElementOptions(n.data[t]||{},t))).fill&&null!==e.fill||(e.backgroundColor=e.borderColor),e},_resolveDatasetElementOptions:function(t,e){for(var n,i,r=this,a=r.chart,o=r._config,s=t.custom||{},l=a.options.elements[r.datasetElementType.prototype._type]||{},u=r._datasetElementOptions,d={},c={chart:a,dataset:r.getDataset(),datasetIndex:r.index,hover:e},h=0,f=u.length;h<f;++h)n=u[h],i=e?"hover"+n.charAt(0).toUpperCase()+n.slice(1):n,d[n]=tt([s[i],o[i],l[i]],c);return d},_resolveDataElementOptions:function(t,e){var n=this,i=t&&t.custom,r=n._cachedDataOpts;if(r&&!i)return r;var a,o,s,l,u=n.chart,d=n._config,c=u.options.elements[n.dataElementType.prototype._type]||{},h=n._dataElementOptions,f={},g={chart:u,dataIndex:e,dataset:n.getDataset(),datasetIndex:n.index},m={cacheable:!i},i=i||{};if(B.isArray(h))for(o=0,s=h.length;o<s;++o)f[l=h[o]]=tt([i[l],d[l],c[l]],g,e,m);else for(o=0,s=(a=Object.keys(h)).length;o<s;++o)f[l=a[o]]=tt([i[l],d[h[l]],d[l],c[l]],g,e,m);return m.cacheable&&(n._cachedDataOpts=Object.freeze(f)),f},removeHoverStyle:function(t){B.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,i=t.custom||{},r=t._model,a=B.getHoverColor;t.$previousStyle={backgroundColor:r.backgroundColor,borderColor:r.borderColor,borderWidth:r.borderWidth},r.backgroundColor=tt([i.hoverBackgroundColor,e.hoverBackgroundColor,a(r.backgroundColor)],void 0,n),r.borderColor=tt([i.hoverBorderColor,e.hoverBorderColor,a(r.borderColor)],void 0,n),r.borderWidth=tt([i.hoverBorderWidth,e.hoverBorderWidth,r.borderWidth],void 0,n)},_removeDatasetHoverStyle:function(){var t=this.getMeta().dataset;t&&this.removeHoverStyle(t)},_setDatasetHoverStyle:function(){var t,e,n,i,r,a,o=this.getMeta().dataset,s={};if(o){for(a=o._model,r=this._resolveDatasetElementOptions(o,!0),t=0,e=(i=Object.keys(r)).length;t<e;++t)s[n=i[t]]=a[n],a[n]=r[n];o.$previousStyle=s}},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,i=e.length;i<n?t.data.splice(i,n-i):n<i&&this.insertElements(n,i-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){var t=arguments.length;this.insertElements(this.getDataset().data.length-t,t)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),it.extend=B.inherits;var rt=it,at=2*Math.PI;function ot(t,e){var n=e.startAngle,i=e.endAngle,r=e.pixelMargin,a=r/e.outerRadius,o=e.x,s=e.y;t.beginPath(),t.arc(o,s,e.outerRadius,n-a,i+a),e.innerRadius>r?(a=r/e.innerRadius,t.arc(o,s,e.innerRadius-r,i+a,n-a,!0)):t.arc(o,s,r,i+Math.PI/2,n-Math.PI/2),t.closePath(),t.clip()}function st(t,e,n){var i="inner"===e.borderAlign;i?(t.lineWidth=2*e.borderWidth,t.lineJoin="round"):(t.lineWidth=e.borderWidth,t.lineJoin="bevel"),n.fullCircles&&function(t,e,n,i){var r,a=n.endAngle;for(i&&(n.endAngle=n.startAngle+at,ot(t,n),n.endAngle=a,n.endAngle===n.startAngle&&n.fullCircles&&(n.endAngle+=at,n.fullCircles--)),t.beginPath(),t.arc(n.x,n.y,n.innerRadius,n.startAngle+at,n.startAngle,!0),r=0;r<n.fullCircles;++r)t.stroke();for(t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.startAngle+at),r=0;r<n.fullCircles;++r)t.stroke()}(t,e,n,i),i&&ot(t,n),t.beginPath(),t.arc(n.x,n.y,e.outerRadius,n.startAngle,n.endAngle),t.arc(n.x,n.y,n.innerRadius,n.endAngle,n.startAngle,!0),t.closePath(),t.stroke()}E._set("global",{elements:{arc:{backgroundColor:E.global.defaultColor,borderColor:"#fff",borderWidth:2,borderAlign:"center"}}});var lt=X.extend({_type:"arc",inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var i=B.getAngleFromPoint(n,{x:t,y:e}),r=i.angle,a=i.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=at;for(;s<r;)r-=at;for(;r<o;)r+=at;var l=o<=r&&r<=s,u=a>=n.innerRadius&&a<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t,e=this._chart.ctx,n=this._view,i="inner"===n.borderAlign?.33:0,r={x:n.x,y:n.y,innerRadius:n.innerRadius,outerRadius:Math.max(n.outerRadius-i,0),pixelMargin:i,startAngle:n.startAngle,endAngle:n.endAngle,fullCircles:Math.floor(n.circumference/at)};if(e.save(),e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,r.fullCircles){for(r.endAngle=r.startAngle+at,e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),t=0;t<r.fullCircles;++t)e.fill();r.endAngle=r.startAngle+n.circumference%at}e.beginPath(),e.arc(r.x,r.y,r.outerRadius,r.startAngle,r.endAngle),e.arc(r.x,r.y,r.innerRadius,r.endAngle,r.startAngle,!0),e.closePath(),e.fill(),n.borderWidth&&st(e,n,r),e.restore()}}),ut=B.valueOrDefault,dt=E.global.defaultColor;E._set("global",{elements:{line:{tension:.4,backgroundColor:dt,borderWidth:3,borderColor:dt,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var ct=X.extend({_type:"line",draw:function(){var t,e,n,i=this,r=i._view,a=i._chart.ctx,o=r.spanGaps,s=i._children.slice(),l=E.global,u=l.elements.line,d=-1,c=i._loop;if(s.length){if(i._loop){for(t=0;t<s.length;++t)if(e=B.previousItem(s,t),!s[t]._view.skip&&e._view.skip){s=s.slice(t).concat(s.slice(0,t)),c=o;break}c&&s.push(s[0])}for(a.save(),a.lineCap=r.borderCapStyle||u.borderCapStyle,a.setLineDash&&a.setLineDash(r.borderDash||u.borderDash),a.lineDashOffset=ut(r.borderDashOffset,u.borderDashOffset),a.lineJoin=r.borderJoinStyle||u.borderJoinStyle,a.lineWidth=ut(r.borderWidth,u.borderWidth),a.strokeStyle=r.borderColor||l.defaultColor,a.beginPath(),(n=s[0]._view).skip||(a.moveTo(n.x,n.y),d=0),t=1;t<s.length;++t)n=s[t]._view,e=-1===d?B.previousItem(s,t):s[d],n.skip||(d!==t-1&&!o||-1===d?a.moveTo(n.x,n.y):B.canvas.lineTo(a,e._view,n),d=t);c&&a.closePath(),a.stroke(),a.restore()}}}),ht=B.valueOrDefault,ft=E.global.defaultColor;function gt(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}E._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:ft,borderColor:ft,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var mt=X.extend({_type:"point",inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:gt,inXRange:gt,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._chart.ctx,i=e.pointStyle,r=e.rotation,a=e.radius,o=e.x,s=e.y,l=E.global,u=l.defaultColor;e.skip||void 0!==t&&!B.canvas._isPointInArea(e,t)||(n.strokeStyle=e.borderColor||u,n.lineWidth=ht(e.borderWidth,l.elements.point.borderWidth),n.fillStyle=e.backgroundColor||u,B.canvas.drawPoint(n,i,a,o,s,r))}}),pt=E.global.defaultColor;function vt(t){return t&&void 0!==t.width}function yt(t){var e,n,i,r,a=vt(t)?(r=t.width/2,e=t.x-r,n=t.x+r,i=Math.min(t.y,t.base),Math.max(t.y,t.base)):(r=t.height/2,e=Math.min(t.x,t.base),n=Math.max(t.x,t.base),i=t.y-r,t.y+r);return{left:e,top:i,right:n,bottom:a}}function bt(t,e,n){return t===e?n:t===n?e:t}function _t(t,e,n){var i,r,a,o,s,l,u,d=t.borderWidth,c=(r=(i=t).borderSkipped,a={},r&&(i.horizontal?i.base>i.x&&(r=bt(r,"left","right")):i.base<i.y&&(r=bt(r,"bottom","top")),a[r]=!0),a);return B.isObject(d)?(o=+d.top||0,s=+d.right||0,l=+d.bottom||0,u=+d.left||0):o=s=l=u=+d||0,{t:c.top||o<0?0:n<o?n:o,r:c.right||s<0?0:e<s?e:s,b:c.bottom||l<0?0:n<l?n:l,l:c.left||u<0?0:e<u?e:u}}function xt(t,e,n){var i=null===e,r=null===n,a=!(!t||i&&r)&&yt(t);return a&&(i||e>=a.left&&e<=a.right)&&(r||n>=a.top&&n<=a.bottom)}E._set("global",{elements:{rectangle:{backgroundColor:pt,borderColor:pt,borderSkipped:"bottom",borderWidth:0}}});var wt=X.extend({_type:"rectangle",draw:function(){var t,e,n,i,r,a=this._chart.ctx,o=this._view,s=(e=yt(t=o),n=e.right-e.left,i=e.bottom-e.top,r=_t(t,n/2,i/2),{outer:{x:e.left,y:e.top,w:n,h:i},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b}}),l=s.outer,u=s.inner;a.fillStyle=o.backgroundColor,a.fillRect(l.x,l.y,l.w,l.h),l.w===u.w&&l.h===u.h||(a.save(),a.beginPath(),a.rect(l.x,l.y,l.w,l.h),a.clip(),a.fillStyle=o.borderColor,a.rect(u.x,u.y,u.w,u.h),a.fill("evenodd"),a.restore())},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){return xt(this._view,t,e)},inLabelRange:function(t,e){var n=this._view;return vt(n)?xt(n,t,null):xt(n,null,e)},inXRange:function(t){return xt(this._view,t,null)},inYRange:function(t){return xt(this._view,null,t)},getCenterPoint:function(){var t,e=this._view,n=vt(e)?(t=e.x,(e.y+e.base)/2):(t=(e.x+e.base)/2,e.y);return{x:t,y:n}},getArea:function(){var t=this._view;return vt(t)?t.width*Math.abs(t.y-t.base):t.height*Math.abs(t.x-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}}),kt={},Mt=ct,St=mt,Dt=wt;kt.Arc=lt,kt.Line=Mt,kt.Point=St,kt.Rectangle=Dt;var Ct=B._deprecated,Tt=B.valueOrDefault;function Pt(t,e,n){var i,r=n.barThickness,a=e.stackCount,o=e.pixels[t],s=B.isNullOrUndef(r)?function(t,e){for(var n,i,r=t._length,a=1,o=e.length;a<o;++a)r=Math.min(r,Math.abs(e[a]-e[a-1]));for(a=0,o=t.getTicks().length;a<o;++a)i=t.getPixelForTick(a),r=0<a?Math.min(r,Math.abs(i-n)):r,n=i;return r}(e.scale,e.pixels):-1,l=B.isNullOrUndef(r)?(i=s*n.categoryPercentage,n.barPercentage):(i=r*a,1);return{chunk:i/a,ratio:l,start:o-i/2}}E._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),E._set("global",{datasets:{bar:{categoryPercentage:.8,barPercentage:.9}}});var Ot=rt.extend({dataElementType:kt.Rectangle,_dataElementOptions:["backgroundColor","borderColor","borderSkipped","borderWidth","barPercentage","barThickness","categoryPercentage","maxBarThickness","minBarLength"],initialize:function(){var t,e,n=this;rt.prototype.initialize.apply(n,arguments),(t=n.getMeta()).stack=n.getDataset().stack,t.bar=!0,e=n._getIndexScale().options,Ct("bar chart",e.barPercentage,"scales.[x/y]Axes.barPercentage","dataset.barPercentage"),Ct("bar chart",e.barThickness,"scales.[x/y]Axes.barThickness","dataset.barThickness"),Ct("bar chart",e.categoryPercentage,"scales.[x/y]Axes.categoryPercentage","dataset.categoryPercentage"),Ct("bar chart",n._getValueScale().options.minBarLength,"scales.[x/y]Axes.minBarLength","dataset.minBarLength"),Ct("bar chart",e.maxBarThickness,"scales.[x/y]Axes.maxBarThickness","dataset.maxBarThickness")},update:function(t){var e,n,i=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=i.length;e<n;++e)this.updateElement(i[e],e,t)},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=i.getDataset(),o=i._resolveDataElementOptions(t,e);t._xScale=i.getScaleForId(r.xAxisID),t._yScale=i.getScaleForId(r.yAxisID),t._datasetIndex=i.index,t._index=e,t._model={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderSkipped:o.borderSkipped,borderWidth:o.borderWidth,datasetLabel:a.label,label:i.chart.data.labels[e]},B.isArray(a.data[e])&&(t._model.borderSkipped=null),i._updateElementGeometry(t,e,n,o),t.pivot()},_updateElementGeometry:function(t,e,n,i){var r=this,a=t._model,o=r._getValueScale(),s=o.getBasePixel(),l=o.isHorizontal(),u=r._ruler||r.getRuler(),d=r.calculateBarValuePixels(r.index,e,i),c=r.calculateBarIndexPixels(r.index,e,u,i);a.horizontal=l,a.base=n?s:d.base,a.x=l?n?s:d.head:c.center,a.y=l?c.center:n?s:d.head,a.height=l?c.size:void 0,a.width=l?void 0:c.size},_getStacks:function(t){for(var e,n=this._getIndexScale(),i=n._getMatchingVisibleMetas(this._type),r=n.options.stacked,a=i.length,o=[],s=0;s<a&&(e=i[s],(!1===r||-1===o.indexOf(e.stack)||void 0===r&&void 0===e.stack)&&o.push(e.stack),e.index!==t);++s);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),i=void 0!==e?n.indexOf(e):-1;return-1===i?n.length-1:i},getRuler:function(){for(var t=this._getIndexScale(),e=[],n=0,i=this.getMeta().data.length;n<i;++n)e.push(t.getPixelForValue(null,n,this.index));return{pixels:e,start:t._startPixel,end:t._endPixel,stackCount:this.getStackCount(),scale:t}},calculateBarValuePixels:function(t,e,n){var i,r,a,o,s,l,u,d=this.chart,c=this._getValueScale(),h=c.isHorizontal(),f=d.data.datasets,g=c._getMatchingVisibleMetas(this._type),m=c._parseValue(f[t].data[e]),p=n.minBarLength,v=c.options.stacked,y=this.getMeta().stack,b=void 0===m.start?0:0<=m.max&&0<=m.min?m.min:m.max,_=void 0===m.start?m.end:0<=m.max&&0<=m.min?m.max-m.min:m.min-m.max,x=g.length;if(v||void 0===v&&void 0!==y)for(i=0;i<x&&(r=g[i]).index!==t;++i)r.stack===y&&(a=void 0===(u=c._parseValue(f[r.index].data[e])).start?u.end:0<=u.min&&0<=u.max?u.max:u.min,(m.min<0&&a<0||0<=m.max&&0<a)&&(b+=a));return o=c.getPixelForValue(b),l=(s=c.getPixelForValue(b+_))-o,void 0!==p&&Math.abs(l)<p&&(l=p,s=0<=_&&!h||_<0&&h?o-p:o+p),{size:l,base:o,head:s,center:s+l/2}},calculateBarIndexPixels:function(t,e,n,i){var r,a,o,s,l,u,d,c,h,f="flex"===i.barThickness?(r=e,o=i,l=(a=n).pixels,u=l[r],d=0<r?l[r-1]:null,c=r<l.length-1?l[r+1]:null,h=o.categoryPercentage,null===d&&(d=u-(null===c?a.end-a.start:c-u)),null===c&&(c=u+u-d),s=u-(u-Math.min(d,c))/2*h,{chunk:Math.abs(c-d)/2*h/a.stackCount,ratio:o.barPercentage,start:s}):Pt(e,n,i),g=this.getStackIndex(t,this.getMeta().stack),m=f.start+f.chunk*g+f.chunk/2,p=Math.min(Tt(i.maxBarThickness,1/0),f.chunk*f.ratio);return{base:m-p/2,head:m+p/2,center:m,size:p}},draw:function(){var t=this.chart,e=this._getValueScale(),n=this.getMeta().data,i=this.getDataset(),r=n.length,a=0;for(B.canvas.clipArea(t.ctx,t.chartArea);a<r;++a){var o=e._parseValue(i.data[a]);isNaN(o.min)||isNaN(o.max)||n[a].draw()}B.canvas.unclipArea(t.ctx)},_resolveDataElementOptions:function(){var t=B.extend({},rt.prototype._resolveDataElementOptions.apply(this,arguments)),e=this._getIndexScale().options,n=this._getValueScale().options;return t.barPercentage=Tt(e.barPercentage,t.barPercentage),t.barThickness=Tt(e.barThickness,t.barThickness),t.categoryPercentage=Tt(e.categoryPercentage,t.categoryPercentage),t.maxBarThickness=Tt(e.maxBarThickness,t.maxBarThickness),t.minBarLength=Tt(n.minBarLength,t.minBarLength),t}}),At=B.valueOrDefault,It=B.options.resolve;E._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",i=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+i.r+")"}}}});var Ft=rt.extend({dataElementType:kt.Point,_dataElementOptions:["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"],update:function(n){var i=this,t=i.getMeta().data;B.each(t,function(t,e){i.updateElement(t,e,n)})},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=t.custom||{},o=i.getScaleForId(r.xAxisID),s=i.getScaleForId(r.yAxisID),l=i._resolveDataElementOptions(t,e),u=i.getDataset().data[e],d=i.index,c=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"==typeof u?u:NaN,e,d),h=n?s.getBasePixel():s.getPixelForValue(u,e,d);t._xScale=o,t._yScale=s,t._options=l,t._datasetIndex=d,t._index=e,t._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:a.skip||isNaN(c)||isNaN(h),x:c,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options,i=B.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=At(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=At(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=At(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveDataElementOptions:function(t,e){var n=this,i=n.chart,r=n.getDataset(),a=t.custom||{},o=r.data[e]||{},s=rt.prototype._resolveDataElementOptions.apply(n,arguments),l={chart:i,dataIndex:e,dataset:r,datasetIndex:n.index};return n._cachedDataOpts===s&&(s=B.extend({},s)),s.radius=It([a.radius,o.r,n._config.radius,i.options.elements.point.radius],l,e),s}}),Lt=B.valueOrDefault,Nt=Math.PI,Rt=2*Nt,Yt=Nt/2;E._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){for(var n,i=e.index,r=this.chart,a=0,o=(r.data.datasets||[]).length;a<o;++a)(n=r.getDatasetMeta(a)).data[i]&&(n.data[i].hidden=!n.data[i].hidden);r.update()}},cutoutPercentage:50,rotation:-Yt,circumference:Rt,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],i=": "+e.datasets[t.datasetIndex].data[t.index];return B.isArray(n)?(n=n.slice())[0]+=i:n+=i,n}}}});var Wt=rt.extend({dataElementType:kt.Arc,linkScales:B.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e,n,i,r,a,o,s,l,u,d,c,h,f,g,m,p,v,y=this,b=y.chart,_=b.chartArea,x=b.options,w=1,k=1,M=0,S=0,D=y.getMeta(),C=D.data,T=x.cutoutPercentage/100||0,P=x.circumference,O=y._getRingWeight(y.index);for(P<Rt&&(a=x.rotation%Rt,o=(a+=Nt<=a?-Rt:a<-Nt?Rt:0)+P,s=Math.cos(a),l=Math.sin(a),u=Math.cos(o),d=Math.sin(o),c=a<=0&&0<=o||Rt<=o,h=a<=Yt&&Yt<=o||Rt+Yt<=o,f=a<=-Yt&&-Yt<=o||Nt+Yt<=o,g=a===-Nt||Nt<=o?-1:Math.min(s,s*T,u,u*T),m=f?-1:Math.min(l,l*T,d,d*T),w=((p=c?1:Math.max(s,s*T,u,u*T))-g)/2,k=((v=h?1:Math.max(l,l*T,d,d*T))-m)/2,M=-(p+g)/2,S=-(v+m)/2),i=0,r=C.length;i<r;++i)C[i]._options=y._resolveDataElementOptions(C[i],i);for(b.borderWidth=y.getMaxBorderWidth(),e=(_.right-_.left-b.borderWidth)/w,n=(_.bottom-_.top-b.borderWidth)/k,b.outerRadius=Math.max(Math.min(e,n)/2,0),b.innerRadius=Math.max(b.outerRadius*T,0),b.radiusLength=(b.outerRadius-b.innerRadius)/(y._getVisibleDatasetWeightTotal()||1),b.offsetX=M*b.outerRadius,b.offsetY=S*b.outerRadius,D.total=y.calculateTotal(),y.outerRadius=b.outerRadius-b.radiusLength*y._getRingWeightOffset(y.index),y.innerRadius=Math.max(y.outerRadius-b.radiusLength*O,0),i=0,r=C.length;i<r;++i)y.updateElement(C[i],i,t)},updateElement:function(t,e,n){var i=this,r=i.chart,a=r.chartArea,o=r.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,d=o.rotation,c=o.rotation,h=i.getDataset(),f=n&&s.animateRotate||t.hidden?0:i.calculateCircumference(h.data[e])*(o.circumference/Rt),g=n&&s.animateScale?0:i.innerRadius,m=n&&s.animateScale?0:i.outerRadius,p=t._options||{};B.extend(t,{_datasetIndex:i.index,_index:e,_model:{backgroundColor:p.backgroundColor,borderColor:p.borderColor,borderWidth:p.borderWidth,borderAlign:p.borderAlign,x:l+r.offsetX,y:u+r.offsetY,startAngle:d,endAngle:c,circumference:f,outerRadius:m,innerRadius:g,label:B.valueAtIndexOrDefault(h.label,e,r.data.labels[e])}});var v=t._model;n&&s.animateRotate||(v.startAngle=0===e?o.rotation:i.getMeta().data[e-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),t.pivot()},calculateTotal:function(){var n,i=this.getDataset(),t=this.getMeta(),r=0;return B.each(t.data,function(t,e){n=i.data[e],isNaN(n)||t.hidden||(r+=Math.abs(n))}),r},calculateCircumference:function(t){var e=this.getMeta().total;return 0<e&&!isNaN(t)?Rt*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){var e,n,i,r,a,o,s,l,u=0,d=this.chart;if(!t)for(e=0,n=d.data.datasets.length;e<n;++e)if(d.isDatasetVisible(e)){t=(i=d.getDatasetMeta(e)).data,e!==this.index&&(a=i.controller);break}if(!t)return 0;for(e=0,n=t.length;e<n;++e)r=t[e],"inner"!==(o=a?(a._configure(),a._resolveDataElementOptions(r,e)):r._options).borderAlign&&(u=(u=u<(s=o.borderWidth)?s:u)<(l=o.hoverBorderWidth)?l:u);return u},setHoverStyle:function(t){var e=t._model,n=t._options,i=B.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=Lt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Lt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Lt(n.hoverBorderWidth,n.borderWidth)},_getRingWeightOffset:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e},_getRingWeight:function(t){return Math.max(Lt(this.chart.data.datasets[t].weight,1),0)},_getVisibleDatasetWeightTotal:function(){return this._getRingWeightOffset(this.chart.data.datasets.length)}});E._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{type:"category",position:"left",offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{mode:"index",axis:"y"}}),E._set("global",{datasets:{horizontalBar:{categoryPercentage:.8,barPercentage:.9}}});var Et=Ot.extend({_getValueScaleId:function(){return this.getMeta().xAxisID},_getIndexScaleId:function(){return this.getMeta().yAxisID}}),zt=B.valueOrDefault,Vt=B.options.resolve,jt=B.canvas._isPointInArea;function Ht(t,e){var n=t&&t.options.ticks||{},i=n.reverse,r=void 0===n.min?e:0,a=void 0===n.max?e:0;return{start:i?a:r,end:i?r:a}}E._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var Bt=rt.extend({datasetElementType:kt.Line,dataElementType:kt.Point,_datasetElementOptions:["backgroundColor","borderCapStyle","borderColor","borderDash","borderDashOffset","borderJoinStyle","borderWidth","cubicInterpolationMode","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.options,l=i._config,u=i._showLine=zt(l.showLine,s.showLines);for(i._xScale=i.getScaleForId(r.xAxisID),i._yScale=i.getScaleForId(r.yAxisID),u&&(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=i._yScale,a._datasetIndex=i.index,a._children=o,a._model=i._resolveDatasetElementOptions(a),a.pivot()),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(u&&0!==a._model.tension&&i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i=this,r=i.getMeta(),a=t.custom||{},o=i.getDataset(),s=i.index,l=o.data[e],u=i._xScale,d=i._yScale,c=r.dataset._model,h=i._resolveDataElementOptions(t,e),f=u.getPixelForValue("object"==typeof l?l:NaN,e,s),g=n?d.getBasePixel():i.calculatePointY(l,e,s);t._xScale=u,t._yScale=d,t._options=h,t._datasetIndex=s,t._index=e,t._model={x:f,y:g,skip:a.skip||isNaN(f)||isNaN(g),radius:h.radius,pointStyle:h.pointStyle,rotation:h.rotation,backgroundColor:h.backgroundColor,borderColor:h.borderColor,borderWidth:h.borderWidth,tension:zt(a.tension,c?c.tension:0),steppedLine:!!c&&c.steppedLine,hitRadius:h.hitRadius}},_resolveDatasetElementOptions:function(t){var e,n,i,r,a,o,s,l,u,d,c,h=this,f=h._config,g=t.custom||{},m=h.chart.options,p=m.elements.line,v=rt.prototype._resolveDatasetElementOptions.apply(h,arguments);return v.spanGaps=zt(f.spanGaps,m.spanGaps),v.tension=zt(f.lineTension,p.tension),v.steppedLine=Vt([g.steppedLine,f.steppedLine,p.stepped]),v.clip=(e=zt(f.clip,(o=h._xScale,s=h._yScale,l=v.borderWidth,d=Ht(o,u=l/2),{top:(c=Ht(s,u)).end,right:d.end,bottom:c.start,left:d.start})),B.isObject(e)?(n=e.top,i=e.right,r=e.bottom,a=e.left):n=i=r=a=e,{top:n,right:i,bottom:r,left:a}),v},calculatePointY:function(t,e,n){var i,r,a,o,s,l,u,d=this.chart,c=this._yScale,h=0,f=0;if(c.options.stacked){for(s=+c.getRightValue(t),u=(l=d._getSortedVisibleDatasetMetas()).length,i=0;i<u&&(a=l[i]).index!==n;++i)r=d.data.datasets[a.index],"line"===a.type&&a.yAxisID===c.id&&((o=+c.getRightValue(r.data[e]))<0?f+=o||0:h+=o||0);return s<0?c.getPixelForValue(f+s):c.getPixelForValue(h+s)}return c.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,i,r=this.chart,a=this.getMeta(),o=a.dataset._model,s=r.chartArea,l=a.data||[];function u(t,e,n){return Math.max(Math.min(t,n),e)}if(o.spanGaps&&(l=l.filter(function(t){return!t._model.skip})),"monotone"===o.cubicInterpolationMode)B.splineCurveMonotone(l);else for(t=0,e=l.length;t<e;++t)n=l[t]._model,i=B.splineCurve(B.previousItem(l,t)._model,n,B.nextItem(l,t)._model,o.tension),n.controlPointPreviousX=i.previous.x,n.controlPointPreviousY=i.previous.y,n.controlPointNextX=i.next.x,n.controlPointNextY=i.next.y;if(r.options.elements.line.capBezierPoints)for(t=0,e=l.length;t<e;++t)n=l[t]._model,jt(n,s)&&(0<t&&jt(l[t-1]._model,s)&&(n.controlPointPreviousX=u(n.controlPointPreviousX,s.left,s.right),n.controlPointPreviousY=u(n.controlPointPreviousY,s.top,s.bottom)),t<l.length-1&&jt(l[t+1]._model,s)&&(n.controlPointNextX=u(n.controlPointNextX,s.left,s.right),n.controlPointNextY=u(n.controlPointNextY,s.top,s.bottom)))},draw:function(){var t,e=this.chart,n=this.getMeta(),i=n.data||[],r=e.chartArea,a=e.canvas,o=0,s=i.length;for(this._showLine&&(t=n.dataset._model.clip,B.canvas.clipArea(e.ctx,{left:!1===t.left?0:r.left-t.left,right:!1===t.right?a.width:r.right+t.right,top:!1===t.top?0:r.top-t.top,bottom:!1===t.bottom?a.height:r.bottom+t.bottom}),n.dataset.draw(),B.canvas.unclipArea(e.ctx));o<s;++o)i[o].draw(r)},setHoverStyle:function(t){var e=t._model,n=t._options,i=B.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=zt(n.hoverBorderWidth,n.borderWidth),e.radius=zt(n.hoverRadius,n.radius)}}),Ut=B.options.resolve;E._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data,o=a.datasets,s=a.labels;if(r.setAttribute("class",t.id+"-legend"),o.length)for(n=o[e=0].data.length;e<n;++e)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=o[0].backgroundColor[e],s[e]&&i.appendChild(document.createTextNode(s[e]));return r.outerHTML},legend:{labels:{generateLabels:function(r){var a=r.data;return a.labels.length&&a.datasets.length?a.labels.map(function(t,e){var n=r.getDatasetMeta(0),i=n.controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,hidden:isNaN(a.datasets[0].data[e])||n.data[e].hidden,index:e}}):[]}},onClick:function(t,e){for(var n,i=e.index,r=this.chart,a=0,o=(r.data.datasets||[]).length;a<o;++a)(n=r.getDatasetMeta(a)).data[i].hidden=!n.data[i].hidden;r.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});var qt=rt.extend({dataElementType:kt.Arc,linkScales:B.noop,_dataElementOptions:["backgroundColor","borderColor","borderWidth","borderAlign","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth"],_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i,r=this,a=r.getDataset(),o=r.getMeta(),s=r.chart.options.startAngle||0,l=r._starts=[],u=r._angles=[],d=o.data;for(r._updateRadius(),o.count=r.countVisibleElements(),e=0,n=a.data.length;e<n;e++)l[e]=s,i=r._computeAngle(e),s+=u[e]=i;for(e=0,n=d.length;e<n;++e)d[e]._options=r._resolveDataElementOptions(d[e],e),r.updateElement(d[e],e,t)},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,i=e.options,r=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max(r/2,0),e.innerRadius=Math.max(i.cutoutPercentage?e.outerRadius/100*i.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var i=this,r=i.chart,a=i.getDataset(),o=r.options,s=o.animation,l=r.scale,u=r.data.labels,d=l.xCenter,c=l.yCenter,h=o.startAngle,f=t.hidden?0:l.getDistanceFromCenterForValue(a.data[e]),g=i._starts[e],m=g+(t.hidden?0:i._angles[e]),p=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[e]),v=t._options||{};B.extend(t,{_datasetIndex:i.index,_index:e,_scale:l,_model:{backgroundColor:v.backgroundColor,borderColor:v.borderColor,borderWidth:v.borderWidth,borderAlign:v.borderAlign,x:d,y:c,innerRadius:0,outerRadius:n?p:f,startAngle:n&&s.animateRotate?h:g,endAngle:n&&s.animateRotate?h:m,label:B.valueAtIndexOrDefault(u,e,u[e])}}),t.pivot()},countVisibleElements:function(){var n=this.getDataset(),t=this.getMeta(),i=0;return B.each(t.data,function(t,e){isNaN(n.data[e])||t.hidden||i++}),i},setHoverStyle:function(t){var e=t._model,n=t._options,i=B.getHoverColor,r=B.valueOrDefault;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth},e.backgroundColor=r(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=r(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=r(n.hoverBorderWidth,n.borderWidth)},_computeAngle:function(t){var e=this,n=this.getMeta().count,i=e.getDataset(),r=e.getMeta();if(isNaN(i.data[t])||r.data[t].hidden)return 0;var a={chart:e.chart,dataIndex:t,dataset:i,datasetIndex:e.index};return Ut([e.chart.options.elements.arc.angle,2*Math.PI/n],a,t)}});E._set("pie",B.clone(E.doughnut)),E._set("pie",{cutoutPercentage:0});var Gt=Wt,Zt=B.valueOrDefault;E._set("radar",{spanGaps:!1,scale:{type:"radialLinear"},elements:{line:{fill:"start",tension:0}}});var $t=rt.extend({datasetElementType:kt.Line,dataElementType:kt.Point,linkScales:B.noop,_datasetElementOptions:["backgroundColor","borderWidth","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","fill"],_dataElementOptions:{backgroundColor:"pointBackgroundColor",borderColor:"pointBorderColor",borderWidth:"pointBorderWidth",hitRadius:"pointHitRadius",hoverBackgroundColor:"pointHoverBackgroundColor",hoverBorderColor:"pointHoverBorderColor",hoverBorderWidth:"pointHoverBorderWidth",hoverRadius:"pointHoverRadius",pointStyle:"pointStyle",radius:"pointRadius",rotation:"pointRotation"},_getIndexScaleId:function(){return this.chart.scale.id},_getValueScaleId:function(){return this.chart.scale.id},update:function(t){var e,n,i=this,r=i.getMeta(),a=r.dataset,o=r.data||[],s=i.chart.scale,l=i._config;for(void 0!==l.tension&&void 0===l.lineTension&&(l.lineTension=l.tension),a._scale=s,a._datasetIndex=i.index,a._children=o,a._loop=!0,a._model=i._resolveDatasetElementOptions(a),a.pivot(),e=0,n=o.length;e<n;++e)i.updateElement(o[e],e,t);for(i.updateBezierControlPoints(),e=0,n=o.length;e<n;++e)o[e].pivot()},updateElement:function(t,e,n){var i=this,r=t.custom||{},a=i.getDataset(),o=i.chart.scale,s=o.getPointPositionForValue(e,a.data[e]),l=i._resolveDataElementOptions(t,e),u=i.getMeta().dataset._model,d=n?o.xCenter:s.x,c=n?o.yCenter:s.y;t._scale=o,t._options=l,t._datasetIndex=i.index,t._index=e,t._model={x:d,y:c,skip:r.skip||isNaN(d)||isNaN(c),radius:l.radius,pointStyle:l.pointStyle,rotation:l.rotation,backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,tension:Zt(r.tension,u?u.tension:0),hitRadius:l.hitRadius}},_resolveDatasetElementOptions:function(){var t=this._config,e=this.chart.options,n=rt.prototype._resolveDatasetElementOptions.apply(this,arguments);return n.spanGaps=Zt(t.spanGaps,e.spanGaps),n.tension=Zt(t.lineTension,e.elements.line.tension),n},updateBezierControlPoints:function(){var t,e,n,i,r=this.getMeta(),a=this.chart.chartArea,o=r.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}for(r.dataset._model.spanGaps&&(o=o.filter(function(t){return!t._model.skip})),t=0,e=o.length;t<e;++t)n=o[t]._model,i=B.splineCurve(B.previousItem(o,t,!0)._model,n,B.nextItem(o,t,!0)._model,n.tension),n.controlPointPreviousX=s(i.previous.x,a.left,a.right),n.controlPointPreviousY=s(i.previous.y,a.top,a.bottom),n.controlPointNextX=s(i.next.x,a.left,a.right),n.controlPointNextY=s(i.next.y,a.top,a.bottom)},setHoverStyle:function(t){var e=t._model,n=t._options,i=B.getHoverColor;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Zt(n.hoverBackgroundColor,i(n.backgroundColor)),e.borderColor=Zt(n.hoverBorderColor,i(n.borderColor)),e.borderWidth=Zt(n.hoverBorderWidth,n.borderWidth),e.radius=Zt(n.hoverRadius,n.radius)}});E._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}}),E._set("global",{datasets:{scatter:{showLine:!1}}});var Xt={bar:Ot,bubble:Ft,doughnut:Wt,horizontalBar:Et,line:Bt,polarArea:qt,pie:Gt,radar:$t,scatter:Bt};function Kt(t,e){return t.native?{x:t.x,y:t.y}:B.getRelativePosition(t,e)}function Jt(t,e){for(var n,i,r,a,o=t._getSortedVisibleDatasetMetas(),s=0,l=o.length;s<l;++s)for(i=0,r=(n=o[s].data).length;i<r;++i)(a=n[i])._view.skip||e(a)}function Qt(t,e){var n=[];return Jt(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function te(t,i,r,a){var o=Number.POSITIVE_INFINITY,s=[];return Jt(t,function(t){var e,n;r&&!t.inRange(i.x,i.y)||(e=t.getCenterPoint(),(n=a(i,e))<o?(s=[t],o=n):n===o&&s.push(t))}),s}function ee(t){var r=-1!==t.indexOf("x"),a=-1!==t.indexOf("y");return function(t,e){var n=r?Math.abs(t.x-e.x):0,i=a?Math.abs(t.y-e.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(i,2))}}function ne(t,e,n){var i=Kt(e,t);n.axis=n.axis||"x";var r=ee(n.axis),a=n.intersect?Qt(t,i):te(t,i,!1,r),o=[];return a.length?(t._getSortedVisibleDatasetMetas().forEach(function(t){var e=t.data[a[0]._index];e&&!e._view.skip&&o.push(e)}),o):[]}var ie={modes:{single:function(t,e){var n=Kt(e,t),i=[];return Jt(t,function(t){return t.inRange(n.x,n.y)&&(i.push(t),i)}),i.slice(0,1)},label:ne,index:ne,dataset:function(t,e,n){var i=Kt(e,t);n.axis=n.axis||"xy";var r=ee(n.axis),a=n.intersect?Qt(t,i):te(t,i,!1,r);return 0<a.length&&(a=t.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(t,e){return ne(t,e,{intersect:!1})},point:function(t,e){return Qt(t,Kt(e,t))},nearest:function(t,e,n){var i=Kt(e,t);n.axis=n.axis||"xy";var r=ee(n.axis);return te(t,i,n.intersect,r)},x:function(t,e,n){var i=Kt(e,t),r=[],a=!1;return Jt(t,function(t){t.inXRange(i.x)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r},y:function(t,e,n){var i=Kt(e,t),r=[],a=!1;return Jt(t,function(t){t.inYRange(i.y)&&r.push(t),t.inRange(i.x,i.y)&&(a=!0)}),n.intersect&&!a&&(r=[]),r}}},re=B.extend;function ae(t,e){return B.where(t,function(t){return t.pos===e})}function oe(t,r){return t.sort(function(t,e){var n=r?e:t,i=r?t:e;return n.weight===i.weight?n.index-i.index:n.weight-i.weight})}function se(t){var e=function(t){for(var e,n=[],i=0,r=(t||[]).length;i<r;++i)e=t[i],n.push({index:i,box:e,pos:e.position,horizontal:e.isHorizontal(),weight:e.weight});return n}(t),n=oe(ae(e,"left"),!0),i=oe(ae(e,"right")),r=oe(ae(e,"top"),!0),a=oe(ae(e,"bottom"));return{leftAndTop:n.concat(r),rightAndBottom:i.concat(a),chartArea:ae(e,"chartArea"),vertical:n.concat(i),horizontal:r.concat(a)}}function le(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function ue(t,e,n){for(var i,r,a,o,s=[],l=0,u=t.length;l<u;++l)(r=(i=t[l]).box).update(i.width||e.w,i.height||e.h,function(t,n){var i=n.maxPadding;function e(t){var e={left:0,top:0,right:0,bottom:0};return t.forEach(function(t){e[t]=Math.max(n[t],i[t])}),e}return e(t?["left","right"]:["top","bottom"])}(i.horizontal,e)),function(t,e,n){var i,r,a,o=n.box,s=t.maxPadding;if(n.size&&(t[n.pos]-=n.size),n.size=n.horizontal?o.height:o.width,t[n.pos]+=n.size,o.getPadding&&(a=o.getPadding(),s.top=Math.max(s.top,a.top),s.left=Math.max(s.left,a.left),s.bottom=Math.max(s.bottom,a.bottom),s.right=Math.max(s.right,a.right)),i=e.outerWidth-le(s,t,"left","right"),r=e.outerHeight-le(s,t,"top","bottom"),i!==t.w||r!==t.h){t.w=i,t.h=r;var l=n.horizontal?[i,t.w]:[r,t.h];return!(l[0]===l[1]||isNaN(l[0])&&isNaN(l[1]))}}(e,n,i)&&(o=!0,s.length&&(a=!0)),r.fullWidth||s.push(i);return a&&ue(s,e,n)||o}function de(t,e,n){for(var i,r,a=n.padding,o=e.x,s=e.y,l=0,u=t.length;l<u;++l)r=(i=t[l]).box,i.horizontal?(r.left=r.fullWidth?a.left:e.left,r.right=r.fullWidth?n.outerWidth-a.right:e.left+e.w,r.top=s,r.bottom=s+r.height,r.width=r.right-r.left,s=r.bottom):(r.left=o,r.right=o+r.width,r.top=e.top,r.bottom=e.top+e.h,r.height=r.bottom-r.top,o=r.right);e.x=o,e.y=s}E._set("global",{layout:{padding:{top:0,right:0,bottom:0,left:0}}});var ce,he={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw:function(){e.draw.apply(e,arguments)}}]},t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var i,r=["fullWidth","position","weight"],a=r.length,o=0;o<a;++o)i=r[o],n.hasOwnProperty(i)&&(e[i]=n[i])},update:function(n,t,e){var i,r,a,o,s,l,u,d,c,h,f;function g(t){var e=Math.max(f[t]-h[t],0);return h[t]+=e,e}n&&(i=n.options.layout||{},a=t-(r=B.options.toPadding(i.padding)).width,o=e-r.height,l=(s=se(n.boxes)).vertical,u=s.horizontal,d=Object.freeze({outerWidth:t,outerHeight:e,padding:r,availableWidth:a,vBoxMaxWidth:a/2/l.length,hBoxMaxHeight:o/2}),c=re({maxPadding:re({},r),w:a,h:o,x:r.left,y:r.top},r),function(t,e){for(var n,i=0,r=t.length;i<r;++i)(n=t[i]).width=n.horizontal?n.box.fullWidth&&e.availableWidth:e.vBoxMaxWidth,n.height=n.horizontal&&e.hBoxMaxHeight}(l.concat(u),d),ue(l,c,d),ue(u,c,d)&&ue(l,c,d),f=(h=c).maxPadding,h.y+=g("top"),h.x+=g("left"),g("right"),g("bottom"),de(s.leftAndTop,c,d),c.x+=c.w,c.y+=c.h,de(s.rightAndBottom,c,d),n.chartArea={left:c.left,top:c.top,right:c.left+c.w,bottom:c.top+c.h},B.each(s.chartArea,function(t){var e=t.box;re(e,n.chartArea),e.update(c.w,c.h)}))}},fe=(ce=Object.freeze({__proto__:null,default:"/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n"}))&&ce.default||ce,ge="$chartjs",me="chartjs-",pe=me+"size-monitor",ve=me+"render-monitor",ye=me+"render-animation",be=["animationstart","webkitAnimationStart"],_e={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function xe(t,e){var n=B.getStyle(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?Number(i[1]):void 0}var we=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function ke(t,e,n){t.addEventListener(e,n,we)}function Me(t,e,n){t.removeEventListener(e,n,we)}function Se(t,e,n,i,r){return{type:t,chart:e,native:r||null,x:void 0!==n?n:null,y:void 0!==i?i:null}}function De(t){var e=document.createElement("div");return e.className=t||"",e}function Ce(n,i,r){var t,e,a,o,s,l,u,d,c,h,f,g,m=n[ge]||(n[ge]={}),p=m.resizer=(u=!(s=function(){var t,e;m.resizer&&(e=(t=r.options.maintainAspectRatio&&n.parentNode)?t.clientWidth:0,i(Se("resize",r)),t&&t.clientWidth<e&&r.canvas&&i(Se("resize",r)))}),d=[],t=function(){d=Array.prototype.slice.call(arguments),l=l||this,u||(u=!0,B.requestAnimFrame.call(window,function(){u=!1,s.apply(l,d)}))},e=De(pe),a=De(pe+"-expand"),o=De(pe+"-shrink"),a.appendChild(De()),o.appendChild(De()),e.appendChild(a),e.appendChild(o),e._reset=function(){a.scrollLeft=1e6,a.scrollTop=1e6,o.scrollLeft=1e6,o.scrollTop=1e6},ke(a,"scroll",v.bind(a,"expand")),ke(o,"scroll",v.bind(o,"shrink")),e);function v(){e._reset(),t()}h=function(){var t;m.resizer&&((t=n.parentNode)&&t!==p.parentNode&&t.insertBefore(p,t.firstChild),p._reset())},f=(c=n)[ge]||(c[ge]={}),g=f.renderProxy=function(t){t.animationName===ye&&h()},B.each(be,function(t){ke(c,t,g)}),f.reflow=!!c.offsetParent,c.classList.add(ve)}function Te(t){var e,n,i,r=t[ge]||{},a=r.resizer;delete r.resizer,n=(e=t)[ge]||{},(i=n.renderProxy)&&(B.each(be,function(t){Me(e,t,i)}),delete n.renderProxy),e.classList.remove(ve),a&&a.parentNode&&a.parentNode.removeChild(a)}var Pe={disableCSSInjection:!1,_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,_ensureLoaded:function(t){var e,n,i,r,a,o;this.disableCSSInjection||(n=(e=t.getRootNode?t.getRootNode():document).host?e:document.head,r=fe,(o=(i=n)[ge]||(i[ge]={})).containsStyles||(o.containsStyles=!0,r="/* Chart.js */\n"+r,(a=document.createElement("style")).setAttribute("type","text/css"),a.appendChild(document.createTextNode(r)),i.appendChild(a)))},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n,i,r,a,o,s,l,u=t&&t.getContext&&t.getContext("2d");return u&&u.canvas===t?(this._ensureLoaded(t),i=e,o=(n=t).style,s=n.getAttribute("height"),l=n.getAttribute("width"),n[ge]={initial:{height:s,width:l,style:{display:o.display,height:o.height,width:o.width}}},o.display=o.display||"block",null!==l&&""!==l||void 0!==(r=xe(n,"width"))&&(n.width=r),null!==s&&""!==s||(""===n.style.height?n.height=n.width/(i.options.aspectRatio||2):(a=xe(n,"height"),void 0!==r&&(n.height=a))),u):null},releaseContext:function(t){var n,i=t.canvas;i[ge]&&(n=i[ge].initial,["height","width"].forEach(function(t){var e=n[t];B.isNullOrUndef(e)?i.removeAttribute(t):i.setAttribute(t,e)}),B.each(n.style||{},function(t,e){i.style[e]=t}),i.width=i.width,delete i[ge])},addEventListener:function(a,t,o){var e,n=a.canvas;"resize"!==t?ke(n,t,((e=o[ge]||(o[ge]={})).proxies||(e.proxies={}))[a.id+"_"+t]=function(t){var e,n,i,r;o((n=a,i=_e[(e=t).type]||e.type,r=B.getRelativePosition(e,n),Se(i,n,r.x,r.y,e)))}):Ce(n,o,a)},removeEventListener:function(t,e,n){var i,r=t.canvas;"resize"!==e?(i=((n[ge]||{}).proxies||{})[t.id+"_"+e])&&Me(r,e,i):Te(r)}};B.addEvent=ke,B.removeEvent=Me;var Oe=Pe._enabled?Pe:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Ae=B.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},Oe);E._set("global",{plugins:{}});var Ie={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var n=this._plugins;[].concat(t).forEach(function(t){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){for(var i,r,a,o,s=this.descriptors(t),l=s.length,u=0;u<l;++u)if("function"==typeof(o=(r=(i=s[u]).plugin)[e])&&((a=[t].concat(n||[])).push(i.options),!1===o.apply(r,a)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var i=[],r=[],n=t&&t.config||{},a=n.options&&n.options.plugins||{};return this._plugins.concat(n.plugins||[]).forEach(function(t){var e,n;-1===i.indexOf(t)&&(e=t.id,!1!==(n=a[e])&&(!0===n&&(n=B.clone(E.global.plugins[e])),i.push(t),r.push({plugin:t,options:n||{}})))}),e.descriptors=r,e.id=this._cacheId,r},_invalidate:function(t){delete t.$plugins}},Fe={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=B.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?B.merge(Object.create(null),[E.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=B.extend(this.defaults[t],e))},addScalesToLayout:function(e){B.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,he.addBox(e,t)})}},Le=B.valueOrDefault,Ne=B.rtl.getRtlAdapter;E._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:B.noop,title:function(t,e){var n,i="",r=e.labels,a=r?r.length:0;return 0<t.length&&((n=t[0]).label?i=n.label:n.xLabel?i=n.xLabel:0<a&&n.index<a&&(i=r[n.index])),i},afterTitle:B.noop,beforeBody:B.noop,beforeLabel:B.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),B.isNullOrUndef(t.value)?n+=t.yLabel:n+=t.value,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:B.noop,afterBody:B.noop,beforeFooter:B.noop,footer:B.noop,afterFooter:B.noop}}});var Re={average:function(t){if(!t.length)return!1;for(var e=0,n=0,i=0,r=0,a=t.length;r<a;++r){var o,s=t[r];s&&s.hasValue()&&(e+=(o=s.tooltipPosition()).x,n+=o.y,++i)}return{x:e/i,y:n/i}},nearest:function(t,e){for(var n,i,r=e.x,a=e.y,o=Number.POSITIVE_INFINITY,s=0,l=t.length;s<l;++s){var u,d,c=t[s];c&&c.hasValue()&&(u=c.getCenterPoint(),(d=B.distanceBetweenPoints(e,u))<o&&(o=d,n=c))}return n&&(r=(i=n.tooltipPosition()).x,a=i.y),{x:r,y:a}}};function Ye(t,e){return e&&(B.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function We(t){return("string"==typeof t||t instanceof String)&&-1<t.indexOf("\n")?t.split("\n"):t}function Ee(t){var e=E.global;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,rtl:t.rtl,textDirection:t.textDirection,bodyFontColor:t.bodyFontColor,_bodyFontFamily:Le(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:Le(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:Le(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:Le(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:Le(t.titleFontStyle,e.defaultFontStyle),titleFontSize:Le(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:Le(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:Le(t.footerFontStyle,e.defaultFontStyle),footerFontSize:Le(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function ze(t,e){var n=t._chart.ctx,i=2*e.yPadding,r=0,a=e.body,o=a.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,d=e.bodyFontSize,c=e.footerFontSize;i+=s*u,i+=s?(s-1)*e.titleSpacing:0,i+=s?e.titleMarginBottom:0,i+=o*d,i+=o?(o-1)*e.bodySpacing:0,i+=l?e.footerMarginTop:0,i+=l*c,i+=l?(l-1)*e.footerSpacing:0;function h(t){r=Math.max(r,n.measureText(t).width+f)}var f=0;return n.font=B.fontString(u,e._titleFontStyle,e._titleFontFamily),B.each(e.title,h),n.font=B.fontString(d,e._bodyFontStyle,e._bodyFontFamily),B.each(e.beforeBody.concat(e.afterBody),h),f=e.displayColors?d+2:0,B.each(a,function(t){B.each(t.before,h),B.each(t.lines,h),B.each(t.after,h)}),f=0,n.font=B.fontString(c,e._footerFontStyle,e._footerFontFamily),B.each(e.footer,h),{width:r+=2*e.xPadding,height:i}}function Ve(t,e){var n,i=t._model,r=t._chart,a=t._chart.chartArea,o="center",s="center";i.y<e.height?s="top":i.y>r.height-e.height&&(s="bottom");function l(t){return t+e.width+i.caretSize+i.caretPadding>r.width}function u(t){return t-e.width-i.caretSize-i.caretPadding<0}function d(t){return t<=h?"top":"bottom"}var c=(a.left+a.right)/2,h=(a.top+a.bottom)/2,f="center"===s?(n=function(t){return t<=c},function(t){return c<t}):(n=function(t){return t<=e.width/2},function(t){return t>=r.width-e.width/2});n(i.x)?(o="left",l(i.x)&&(o="center",s=d(i.y))):f(i.x)&&(o="right",u(i.x)&&(o="center",s=d(i.y)));var g=t._options;return{xAlign:g.xAlign?g.xAlign:o,yAlign:g.yAlign?g.yAlign:s}}function je(t,e){return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-t.xPadding:t.x+t.xPadding}function He(t){return Ye([],We(t))}var Be=X.extend({initialize:function(){this._model=Ee(this._options),this._lastActive=[]},getTitle:function(){var t=this._options.callbacks,e=t.beforeTitle.apply(this,arguments),n=t.title.apply(this,arguments),i=t.afterTitle.apply(this,arguments),r=Ye(r=[],We(e));return r=Ye(r,We(n)),r=Ye(r,We(i))},getBeforeBody:function(){return He(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,n){var i=this,r=i._options.callbacks,a=[];return B.each(t,function(t){var e={before:[],lines:[],after:[]};Ye(e.before,We(r.beforeLabel.call(i,t,n))),Ye(e.lines,r.label.call(i,t,n)),Ye(e.after,We(r.afterLabel.call(i,t,n))),a.push(e)}),a},getAfterBody:function(){return He(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),i=t.afterFooter.apply(this,arguments),r=Ye(r=[],We(e));return r=Ye(r,We(n)),r=Ye(r,We(i))},update:function(t){var e,n,i,r,a,o,s,l,u,d,c,h,f,g,m,p,v,y,b,_,x,w=this,k=w._options,M=w._model,S=w._model=Ee(k),D=w._active,C=w._data,T={xAlign:M.xAlign,yAlign:M.yAlign},P={x:M.x,y:M.y},O={width:M.width,height:M.height},A={x:M.caretX,y:M.caretY};if(D.length){S.opacity=1;for(var I=[],F=[],A=Re[k.position].call(w,D,w._eventPosition),L=[],N=0,R=D.length;N<R;++N)L.push((g=D[N],x=_=b=p=m=void 0,m=g._xScale,p=g._yScale||g._scale,v=g._index,y=g._datasetIndex,b=g._chart.getDatasetMeta(y).controller,_=b._getIndexScale(),x=b._getValueScale(),{xLabel:m?m.getLabelForIndex(v,y):"",yLabel:p?p.getLabelForIndex(v,y):"",label:_?""+_.getLabelForIndex(v,y):"",value:x?""+x.getLabelForIndex(v,y):"",index:v,datasetIndex:y,x:g._model.x,y:g._model.y}));k.filter&&(L=L.filter(function(t){return k.filter(t,C)})),k.itemSort&&(L=L.sort(function(t,e){return k.itemSort(t,e,C)})),B.each(L,function(t){I.push(k.callbacks.labelColor.call(w,t,w._chart)),F.push(k.callbacks.labelTextColor.call(w,t,w._chart))}),S.title=w.getTitle(L,C),S.beforeBody=w.getBeforeBody(L,C),S.body=w.getBody(L,C),S.afterBody=w.getAfterBody(L,C),S.footer=w.getFooter(L,C),S.x=A.x,S.y=A.y,S.caretPadding=k.caretPadding,S.labelColors=I,S.labelTextColors=F,S.dataPoints=L,T=Ve(this,O=ze(this,S)),e=S,n=O,i=T,r=w._chart,a=e.x,o=e.y,s=e.caretSize,l=e.caretPadding,u=e.cornerRadius,d=i.xAlign,c=i.yAlign,h=s+l,f=u+l,"right"===d?a-=n.width:"center"===d&&((a-=n.width/2)+n.width>r.width&&(a=r.width-n.width),a<0&&(a=0)),"top"===c?o+=h:o-="bottom"===c?n.height+h:n.height/2,"center"===c?"left"===d?a+=h:"right"===d&&(a-=h):"left"===d?a-=f:"right"===d&&(a+=f),P={x:a,y:o}}else S.opacity=0;return S.xAlign=T.xAlign,S.yAlign=T.yAlign,S.x=P.x,S.y=P.y,S.width=O.width,S.height=O.height,S.caretX=A.x,S.caretY=A.y,w._model=S,t&&k.custom&&k.custom.call(w,S),w},drawCaret:function(t,e){var n=this._chart.ctx,i=this._view,r=this.getCaretPosition(t,e,i);n.lineTo(r.x1,r.y1),n.lineTo(r.x2,r.y2),n.lineTo(r.x3,r.y3)},getCaretPosition:function(t,e,n){var i,r,a,o,s,l,u,d=n.caretSize,c=n.cornerRadius,h=n.xAlign,f=n.yAlign,g=t.x,m=t.y,p=e.width,v=e.height;return"center"===f?(a=m+v/2,o="left"===h?(i=(u=g)-d,l=u,r=a+d,a-d):(i=(u=g+p)+d,l=u,r=a-d,a+d)):(l=(u="left"===h?(i=g+c+d)-d:"right"===h?(i=g+p-c-d)-d:(i=n.caretX)-d,i+d),"top"===f?(a=(r=m)-d,o=r):(a=(r=m+v)+d,o=r,s=l,l=u,u=s)),{x1:u,x2:i,x3:l,y1:r,y2:a,y3:o}},drawTitle:function(t,e,n){var i,r,a,o=e.title,s=o.length;if(s){var l=Ne(e.rtl,e.x,e.width);for(t.x=je(e,e._titleAlign),n.textAlign=l.textAlign(e._titleAlign),n.textBaseline="middle",i=e.titleFontSize,r=e.titleSpacing,n.fillStyle=e.titleFontColor,n.font=B.fontString(i,e._titleFontStyle,e._titleFontFamily),a=0;a<s;++a)n.fillText(o[a],l.x(t.x),t.y+i/2),t.y+=i+r,a+1===s&&(t.y+=e.titleMarginBottom-r)}},drawBody:function(e,t,n){function i(t){n.fillText(t,_.x(e.x+y),e.y+f/2),e.y+=f+g}var r,a,o,s,l,u,d,c,h,f=t.bodyFontSize,g=t.bodySpacing,m=t._bodyAlign,p=t.body,v=t.displayColors,y=0,b=v?je(t,"left"):0,_=Ne(t.rtl,t.x,t.width),x=_.textAlign(m);for(n.textAlign=m,n.textBaseline="middle",n.font=B.fontString(f,t._bodyFontStyle,t._bodyFontFamily),e.x=je(t,x),n.fillStyle=t.bodyFontColor,B.each(t.beforeBody,i),y=v&&"right"!==x?"center"===m?f/2+1:f+2:0,l=0,d=p.length;l<d;++l){for(r=p[l],a=t.labelTextColors[l],o=t.labelColors[l],n.fillStyle=a,B.each(r.before,i),u=0,c=(s=r.lines).length;u<c;++u){v&&(h=_.x(b),n.fillStyle=t.legendColorBackground,n.fillRect(_.leftForLtr(h,f),e.y,f,f),n.lineWidth=1,n.strokeStyle=o.borderColor,n.strokeRect(_.leftForLtr(h,f),e.y,f,f),n.fillStyle=o.backgroundColor,n.fillRect(_.leftForLtr(_.xPlus(h,1),f-2),e.y+1,f-2,f-2),n.fillStyle=a),i(s[u])}B.each(r.after,i)}y=0,B.each(t.afterBody,i),e.y-=g},drawFooter:function(t,e,n){var i,r,a=e.footer,o=a.length;if(o){var s=Ne(e.rtl,e.x,e.width);for(t.x=je(e,e._footerAlign),t.y+=e.footerMarginTop,n.textAlign=s.textAlign(e._footerAlign),n.textBaseline="middle",i=e.footerFontSize,n.fillStyle=e.footerFontColor,n.font=B.fontString(i,e._footerFontStyle,e._footerFontFamily),r=0;r<o;++r)n.fillText(a[r],s.x(t.x),t.y+i/2),t.y+=i+e.footerSpacing}},drawBackground:function(t,e,n,i){n.fillStyle=e.backgroundColor,n.strokeStyle=e.borderColor,n.lineWidth=e.borderWidth;var r=e.xAlign,a=e.yAlign,o=t.x,s=t.y,l=i.width,u=i.height,d=e.cornerRadius;n.beginPath(),n.moveTo(o+d,s),"top"===a&&this.drawCaret(t,i),n.lineTo(o+l-d,s),n.quadraticCurveTo(o+l,s,o+l,s+d),"center"===a&&"right"===r&&this.drawCaret(t,i),n.lineTo(o+l,s+u-d),n.quadraticCurveTo(o+l,s+u,o+l-d,s+u),"bottom"===a&&this.drawCaret(t,i),n.lineTo(o+d,s+u),n.quadraticCurveTo(o,s+u,o,s+u-d),"center"===a&&"left"===r&&this.drawCaret(t,i),n.lineTo(o,s+d),n.quadraticCurveTo(o,s,o+d,s),n.closePath(),n.fill(),0<e.borderWidth&&n.stroke()},draw:function(){var t,e,n,i,r=this._chart.ctx,a=this._view;0!==a.opacity&&(t={width:a.width,height:a.height},e={x:a.x,y:a.y},n=Math.abs(a.opacity<.001)?0:a.opacity,i=a.title.length||a.beforeBody.length||a.body.length||a.afterBody.length||a.footer.length,this._options.enabled&&i&&(r.save(),r.globalAlpha=n,this.drawBackground(e,a,r,t),e.y+=a.yPadding,B.rtl.overrideTextDirection(r,a.textDirection),this.drawTitle(e,a,r),this.drawBody(e,a,r),this.drawFooter(e,a,r),B.rtl.restoreTextDirection(r,a.textDirection),r.restore()))},handleEvent:function(t){var e,n=this,i=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:(n._active=n._chart.getElementsAtEventForMode(t,i.mode,i),i.reverse&&n._active.reverse()),(e=!B.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(i.enabled||i.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}});Be.positioners=Re;var Ue=B.valueOrDefault;function qe(){return B.merge(Object.create(null),[].slice.call(arguments),{merger:function(t,e,n,i){if("xAxes"===t||"yAxes"===t){var r,a,o,s=n[t].length;for(e[t]||(e[t]=[]),r=0;r<s;++r)o=n[t][r],a=Ue(o.type,"xAxes"===t?"category":"linear"),r>=e[t].length&&e[t].push({}),!e[t][r].type||o.type&&o.type!==e[t][r].type?B.merge(e[t][r],[Fe.getScaleDefaults(a),o]):B.merge(e[t][r],o)}else B._merger(t,e,n,i)}})}function Ge(){return B.merge(Object.create(null),[].slice.call(arguments),{merger:function(t,e,n,i){var r=e[t]||Object.create(null),a=n[t];"scales"===t?e[t]=qe(r,a):"scale"===t?e[t]=B.merge(r,[Fe.getScaleDefaults(a.type),a]):B._merger(t,e,n,i)}})}function Ze(t,e,n){for(var i,r=function(t){return t.id===i};i=e+n++,0<=B.findIndex(t,r););return i}function $e(t){return"top"===t||"bottom"===t}function Xe(n,i){return function(t,e){return t[n]===e[n]?t[i]-e[i]:t[n]-e[n]}}E._set("global",{elements:{},events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,maintainAspectRatio:!0,responsive:!0,responsiveAnimationDuration:0});function Ke(t,e){return this.construct(t,e),this}B.extend(Ke.prototype,{construct:function(t,e){var n,i,r=this;(i=(n=(n=e)||Object.create(null)).data=n.data||{}).datasets=i.datasets||[],i.labels=i.labels||[],n.options=Ge(E.global,E[n.type],n.options||{}),e=n;var a=Ae.acquireContext(t,e),o=a&&a.canvas,s=o&&o.height,l=o&&o.width;r.id=B.uid(),r.ctx=a,r.canvas=o,r.config=e,r.width=l,r.height=s,r.aspectRatio=s?l/s:null,r.options=e.options,r._bufferedRender=!1,r._layers=[],(r.chart=r).controller=r,Ke.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(t){r.config.data=t}}),a&&o?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return Ie.notify(t,"beforeInit"),B.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.initToolTip(),Ie.notify(t,"afterInit"),t},clear:function(){return B.canvas.clear(this),this},stop:function(){return Q.cancelAnimation(this),this},resize:function(t){var e,n=this,i=n.options,r=n.canvas,a=i.maintainAspectRatio&&n.aspectRatio||null,o=Math.max(0,Math.floor(B.getMaximumWidth(r))),s=Math.max(0,Math.floor(a?o/a:B.getMaximumHeight(r)));n.width===o&&n.height===s||(r.width=n.width=o,r.height=n.height=s,r.style.width=o+"px",r.style.height=s+"px",B.retinaScale(n,i.devicePixelRatio),t||(e={width:o,height:s},Ie.notify(n,"resize",[e]),i.onResize&&i.onResize(n,e),n.stop(),n.update({duration:i.responsiveAnimationDuration})))},ensureScalesHaveIDs:function(){var t=this.options,n=t.scales||{},e=t.scale;B.each(n.xAxes,function(t,e){t.id||(t.id=Ze(n.xAxes,"x-axis-",e))}),B.each(n.yAxes,function(t,e){t.id||(t.id=Ze(n.yAxes,"y-axis-",e))}),e&&(e.id=e.id||"scale")},buildOrUpdateScales:function(){var o=this,t=o.options,s=o.scales||{},e=[],l=Object.keys(s).reduce(function(t,e){return t[e]=!1,t},{});t.scales&&(e=e.concat((t.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(t.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),t.scale&&e.push({options:t.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),B.each(e,function(t){var e=t.options,n=e.id,i=Ue(e.type,t.dtype);$e(e.position)!==$e(t.dposition)&&(e.position=t.dposition),l[n]=!0;var r=null;if(n in s&&s[n].type===i)(r=s[n]).options=e,r.ctx=o.ctx,r.chart=o;else{var a=Fe.getScaleConstructor(i);if(!a)return;r=new a({id:n,type:i,options:e,ctx:o.ctx,chart:o}),s[r.id]=r}r.mergeTicksOptions(),t.isDefault&&(o.scale=r)}),B.each(l,function(t,e){t||delete s[e]}),o.scales=s,Fe.addScalesToLayout(this)},buildOrUpdateControllers:function(){for(var t=this,e=[],n=t.data.datasets,i=0,r=n.length;i<r;i++){var a=n[i],o=t.getDatasetMeta(i),s=a.type||t.config.type;if(o.type&&o.type!==s&&(t.destroyDatasetMeta(i),o=t.getDatasetMeta(i)),o.type=s,o.order=a.order||0,o.index=i,o.controller)o.controller.updateIndex(i),o.controller.linkScales();else{var l=Xt[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(t,i),e.push(o.controller)}}return e},resetElements:function(){var n=this;B.each(n.data.datasets,function(t,e){n.getDatasetMeta(e).controller.reset()},n)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var e,n,i=this;if(t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]}),n=(e=i).options,B.each(e.scales,function(t){he.removeBox(e,t)}),n=Ge(E.global,E[e.config.type],n),e.options=e.config.options=n,e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.tooltip._options=n.tooltips,e.tooltip.initialize(),Ie._invalidate(i),!1!==Ie.notify(i,"beforeUpdate")){i.tooltip._data=i.data;for(var r=i.buildOrUpdateControllers(),a=0,o=i.data.datasets.length;a<o;a++)i.getDatasetMeta(a).controller.buildOrUpdateElements();i.updateLayout(),i.options.animation&&i.options.animation.duration&&B.each(r,function(t){t.reset()}),i.updateDatasets(),i.tooltip.initialize(),i.lastActive=[],Ie.notify(i,"afterUpdate"),i._layers.sort(Xe("z","_idx")),i._bufferedRender?i._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:i.render(t)}},updateLayout:function(){var e=this;!1!==Ie.notify(e,"beforeLayout")&&(he.update(this,this.width,this.height),e._layers=[],B.each(e.boxes,function(t){t._configure&&t._configure(),e._layers.push.apply(e._layers,t._layers())},e),e._layers.forEach(function(t,e){t._idx=e}),Ie.notify(e,"afterScaleUpdate"),Ie.notify(e,"afterLayout"))},updateDatasets:function(){if(!1!==Ie.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);Ie.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==Ie.notify(this,"beforeDatasetUpdate",[n])&&(e.controller._update(),Ie.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var n=e.options.animation,i=Ue(t.duration,n&&n.duration),r=t.lazy;if(!1!==Ie.notify(e,"beforeRender")){var a,o=function(t){Ie.notify(e,"afterRender"),B.callback(n&&n.onComplete,[t],e)};return n&&i?(a=new J({numSteps:i/16.66,easing:t.easing||n.easing,render:function(t,e){var n=B.easing.effects[e.easing],i=e.currentStep,r=i/e.numSteps;t.draw(n(r),r,i)},onAnimationProgress:n.onProgress,onAnimationComplete:o}),Q.addAnimation(e,a,i,r)):(e.draw(),o(new J({numSteps:0,chart:e}))),e}},draw:function(t){var e,n,i=this;if(i.clear(),B.isNullOrUndef(t)&&(t=1),i.transition(t),!(i.width<=0||i.height<=0)&&!1!==Ie.notify(i,"beforeDraw",[t])){for(n=i._layers,e=0;e<n.length&&n[e].z<=0;++e)n[e].draw(i.chartArea);for(i.drawDatasets(t);e<n.length;++e)n[e].draw(i.chartArea);i._drawTooltip(t),Ie.notify(i,"afterDraw",[t])}},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},_getSortedDatasetMetas:function(t){for(var e=[],n=0,i=(this.data.datasets||[]).length;n<i;++n)t&&!this.isDatasetVisible(n)||e.push(this.getDatasetMeta(n));return e.sort(Xe("order","index")),e},_getSortedVisibleDatasetMetas:function(){return this._getSortedDatasetMetas(!0)},drawDatasets:function(t){var e,n;if(!1!==Ie.notify(this,"beforeDatasetsDraw",[t])){for(n=(e=this._getSortedVisibleDatasetMetas()).length-1;0<=n;--n)this.drawDataset(e[n],t);Ie.notify(this,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n={meta:t,index:t.index,easingValue:e};!1!==Ie.notify(this,"beforeDatasetDraw",[n])&&(t.controller.draw(e),Ie.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==Ie.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),Ie.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return ie.modes.single(this,t)},getElementsAtEvent:function(t){return ie.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return ie.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var i=ie.modes[e];return"function"==typeof i?i(this,t,n):[]},getDatasetAtEvent:function(t){return ie.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];return e._meta||(e._meta={}),e._meta[this.id]||(e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e.order||0,index:t})},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],i=n._meta&&n._meta[e];i&&(i.controller.destroy(),delete n._meta[e])},destroy:function(){var t,e,n=this,i=n.canvas;for(n.stop(),t=0,e=n.data.datasets.length;t<e;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),B.canvas.clear(n),Ae.releaseContext(n.ctx),n.canvas=null,n.ctx=null),Ie.notify(n,"destroy"),delete Ke.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Be({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var e=this,n=e._listeners={},i=function(){e.eventHandler.apply(e,arguments)};B.each(e.options.events,function(t){Ae.addEventListener(e,t,i),n[t]=i}),e.options.responsive&&(i=function(){e.resize()},Ae.addEventListener(e,"resize",i),n.resize=i)},unbindEvents:function(){var n=this,t=n._listeners;t&&(delete n._listeners,B.each(t,function(t,e){Ae.removeEventListener(n,e,t)}))},updateHoverStyle:function(t,e,n){for(var i,r=n?"set":"remove",a=0,o=t.length;a<o;++a)(i=t[a])&&this.getDatasetMeta(i._datasetIndex).controller[r+"HoverStyle"](i);"dataset"===e&&this.getDatasetMeta(t[0]._datasetIndex).controller["_"+r+"DatasetHoverStyle"]()},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==Ie.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var i=e.handleEvent(t);n&&(i=n._start?n.handleEvent(t):i|n.handleEvent(t)),Ie.notify(e,"afterEvent",[t]);var r=e._bufferedRequest;return r?e.render(r):i&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,i=n.options||{},r=i.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,r.mode,r),B.callback(i.onHover||i.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||i.onClick&&i.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,r.mode,!1),n.active.length&&r.mode&&n.updateHoverStyle(n.active,r.mode,!0),e=!B.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),Ke.instances={};var Je=Ke;(Ke.Controller=Ke).types={},B.configMerge=Ge,B.scaleMerge=qe;function Qe(){throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.")}function tn(t){this.options=t||{}}B.extend(tn.prototype,{formats:Qe,parse:Qe,format:Qe,add:Qe,diff:Qe,startOf:Qe,endOf:Qe,_create:function(t){return t}}),tn.override=function(t){B.extend(tn.prototype,t)};var en={_date:tn},nn={formatters:{values:function(t){return B.isArray(t)?t:""+t},linear:function(t,e,n){var i=3<n.length?n[2]-n[1]:n[1]-n[0];1<Math.abs(i)&&t!==Math.floor(t)&&(i=t-Math.floor(t));var r,a,o,s=B.log10(Math.abs(i));return 0!==t?Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4?(r=B.log10(Math.abs(t)),a=Math.floor(r)-Math.floor(s),a=Math.max(Math.min(a,20),0),t.toExponential(a)):(o=-1*Math.floor(s),o=Math.max(Math.min(o,20),0),t.toFixed(o)):"0"},logarithmic:function(t,e,n){var i=t/Math.pow(10,Math.floor(B.log10(t)));return 0===t?"0":1==i||2==i||5==i||0===e||e===n.length-1?t.toExponential():""}}},rn=B.isArray,an=B.isNullOrUndef,on=B.valueOrDefault,sn=B.valueAtIndexOrDefault;function ln(t,e,n,i){for(var r,a,o,s,l,u,d,c,h,f,g,m,p,v,y=n.length,b=[],_=[],x=[],w=0,k=0,M=0;M<y;++M){if(o=n[M].label,s=n[M].major?e.major:e.minor,t.font=l=s.string,u=i[l]=i[l]||{data:{},gc:[]},d=s.lineHeight,c=h=0,an(o)||rn(o)){if(rn(o))for(r=0,a=o.length;r<a;++r)f=o[r],an(f)||rn(f)||(c=B.measureText(t,u.data,u.gc,c,f),h+=d)}else c=B.measureText(t,u.data,u.gc,c,o),h=d;b.push(c),_.push(h),x.push(d/2),w=Math.max(c,w),k=Math.max(h,k)}function S(t){return{width:b[t]||0,height:_[t]||0,offset:x[t]||0}}return p=i,v=y,B.each(p,function(t){var e,n=t.gc,i=n.length/2;if(v<i){for(e=0;e<i;++e)delete t.data[n[e]];n.splice(0,i)}}),g=b.indexOf(w),m=_.indexOf(k),{first:S(0),last:S(y-1),widest:S(g),highest:S(m)}}function un(t){return t.drawTicks?t.tickMarkLength:0}function dn(t){var e,n;return t.display?(e=B.options._parseFont(t),n=B.options.toPadding(t.padding),e.lineHeight+n.height):0}function cn(t,e){return B.extend(B.options._parseFont({fontFamily:on(e.fontFamily,t.fontFamily),fontSize:on(e.fontSize,t.fontSize),fontStyle:on(e.fontStyle,t.fontStyle),lineHeight:on(e.lineHeight,t.lineHeight)}),{color:B.options.resolve([e.fontColor,t.fontColor,E.global.defaultFontColor])})}function hn(t){var e=cn(t,t.minor);return{minor:e,major:t.major.enabled?cn(t,t.major):e}}function fn(t){for(var e,n=[],i=0,r=t.length;i<r;++i)void 0!==(e=t[i])._index&&n.push(e);return n}function gn(t,e,n,i){var r,a,o,s,l=function(t){var e,n,i=t.length;if(i<2)return!1;for(n=t[0],e=1;e<i;++e)if(t[e]-t[e-1]!==n)return!1;return n}(t),u=(e.length-1)/i;if(!l)return Math.max(u,1);for(o=0,s=(r=B.math._factorize(l)).length-1;o<s;o++)if(u<(a=r[o]))return a;return Math.max(u,1)}function mn(t,e,n,i){var r,a,o,s,l=on(n,0),u=Math.min(on(i,t.length),t.length),d=0;for(e=Math.ceil(e),i&&(e=(r=i-n)/Math.floor(r/e)),s=l;s<0;)d++,s=Math.round(l+d*e);for(a=Math.max(l,0);a<u;a++)o=t[a],a===s?(o._index=a,d++,s=Math.round(l+d*e)):delete o.label}E._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:nn.formatters.values,minor:{},major:{}}});var pn=X.extend({zeroLineIndex:0,getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},_getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]},mergeTicksOptions:function(){},beforeUpdate:function(){B.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var i,r,a,o,s,l=this,u=l.options.ticks,d=u.sampleSize;if(l.beforeUpdate(),l.maxWidth=t,l.maxHeight=e,l.margins=B.extend({left:0,right:0,top:0,bottom:0},n),l._ticks=null,l.ticks=null,l._labelSizes=null,l._maxLabelLines=0,l.longestLabelWidth=0,l.longestTextCache=l.longestTextCache||{},l._gridLineItems=null,l._labelItems=null,l.beforeSetDimensions(),l.setDimensions(),l.afterSetDimensions(),l.beforeDataLimits(),l.determineDataLimits(),l.afterDataLimits(),l.beforeBuildTicks(),o=l.buildTicks()||[],(!(o=l.afterBuildTicks(o)||o)||!o.length)&&l.ticks)for(o=[],i=0,r=l.ticks.length;i<r;++i)o.push({value:l.ticks[i],major:!1});return s=d<(l._ticks=o).length,a=l._convertTicksToLabels(s?function(t,e){for(var n=[],i=t.length/e,r=0,a=t.length;r<a;r+=i)n.push(t[Math.floor(r)]);return n}(o,d):o),l._configure(),l.beforeCalculateTickRotation(),l.calculateTickRotation(),l.afterCalculateTickRotation(),l.beforeFit(),l.fit(),l.afterFit(),l._ticksToDraw=u.display&&(u.autoSkip||"auto"===u.source)?l._autoSkip(o):o,s&&(a=l._convertTicksToLabels(l._ticksToDraw)),l.ticks=a,l.afterUpdate(),l.minSize},_configure:function(){var t,e,n=this,i=n.options.ticks.reverse;n.isHorizontal()?(t=n.left,e=n.right):(t=n.top,e=n.bottom,i=!i),n._startPixel=t,n._endPixel=e,n._reversePixels=i,n._length=e-t},afterUpdate:function(){B.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){B.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){B.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){B.callback(this.options.beforeDataLimits,[this])},determineDataLimits:B.noop,afterDataLimits:function(){B.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){B.callback(this.options.beforeBuildTicks,[this])},buildTicks:B.noop,afterBuildTicks:function(t){var e=this;return rn(t)&&t.length?B.callback(e.options.afterBuildTicks,[e,t]):(e.ticks=B.callback(e.options.afterBuildTicks,[e,e.ticks])||e.ticks,t)},beforeTickToLabelConversion:function(){B.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){B.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){B.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t,e,n,i,r,a,o,s=this,l=s.options,u=l.ticks,d=s.getTicks().length,c=u.minRotation||0,h=u.maxRotation,f=c;!s._isVisible()||!u.display||h<=c||d<=1||!s.isHorizontal()?s.labelRotation=c:(e=(t=s._getLabelSizes()).widest.width,n=t.highest.height-t.highest.offset,i=Math.min(s.maxWidth,s.chart.width-e),(r=l.offset?s.maxWidth/d:i/(d-1))<e+6&&(r=i/(d-(l.offset?.5:1)),a=s.maxHeight-un(l.gridLines)-u.padding-dn(l.scaleLabel),o=Math.sqrt(e*e+n*n),f=B.toDegrees(Math.min(Math.asin(Math.min((t.highest.height+6)/r,1)),Math.asin(Math.min(a/o,1))-Math.asin(n/o))),f=Math.max(c,Math.min(h,f))),s.labelRotation=f)},afterCalculateTickRotation:function(){B.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){B.callback(this.options.beforeFit,[this])},fit:function(){var t,e,n,i,r,a,o,s,l,u,d,c,h,f,g,m,p,v,y=this,b=y.minSize={width:0,height:0},_=y.chart,x=y.options,w=x.ticks,k=x.scaleLabel,M=x.gridLines,S=y._isVisible(),D="bottom"===x.position,C=y.isHorizontal();C?b.width=y.maxWidth:S&&(b.width=un(M)+dn(k)),C?S&&(b.height=un(M)+dn(k)):b.height=y.maxHeight,w.display&&S&&(t=hn(w),n=(e=y._getLabelSizes()).first,i=e.last,r=e.widest,a=e.highest,o=.4*t.minor.lineHeight,s=w.padding,C?(l=0!==y.labelRotation,u=B.toRadians(y.labelRotation),d=Math.cos(u),h=(c=Math.sin(u))*r.width+d*(a.height-(l?a.offset:0))+(l?0:o),b.height=Math.min(y.maxHeight,b.height+h+s),f=y.getPixelForTick(0)-y.left,g=y.right-y.getPixelForTick(y.getTicks().length-1),p=l?(m=D?d*n.width+c*n.offset:c*(n.height-n.offset),D?c*(i.height-i.offset):d*i.width+c*i.offset):(m=n.width/2,i.width/2),y.paddingLeft=Math.max((m-f)*y.width/(y.width-f),0)+3,y.paddingRight=Math.max((p-g)*y.width/(y.width-g),0)+3):(v=w.mirror?0:r.width+s+o,b.width=Math.min(y.maxWidth,b.width+v),y.paddingTop=n.height/2,y.paddingBottom=i.height/2)),y.handleMargins(),C?(y.width=y._length=_.width-y.margins.left-y.margins.right,y.height=b.height):(y.width=b.width,y.height=y._length=_.height-y.margins.top-y.margins.bottom)},handleMargins:function(){var t=this;t.margins&&(t.margins.left=Math.max(t.paddingLeft,t.margins.left),t.margins.top=Math.max(t.paddingTop,t.margins.top),t.margins.right=Math.max(t.paddingRight,t.margins.right),t.margins.bottom=Math.max(t.paddingBottom,t.margins.bottom))},afterFit:function(){B.callback(this.options.afterFit,[this])},isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(an(t))return NaN;if(("number"==typeof t||t instanceof Number)&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},_convertTicksToLabels:function(t){var e,n,i,r=this;for(r.ticks=t.map(function(t){return t.value}),r.beforeTickToLabelConversion(),e=r.convertTicksToLabels(t)||r.ticks,r.afterTickToLabelConversion(),n=0,i=t.length;n<i;++n)t[n].label=e[n];return e},_getLabelSizes:function(){var t=this,e=t._labelSizes;return e||(t._labelSizes=e=ln(t.ctx,hn(t.options.ticks),t.getTicks(),t.longestTextCache),t.longestLabelWidth=e.widest.width),e},_parseValue:function(t){var e,n,i,r=rn(t)?(e=+this.getRightValue(t[0]),n=+this.getRightValue(t[1]),i=Math.min(e,n),Math.max(e,n)):(e=void 0,i=n=t=+this.getRightValue(t));return{min:i,max:r,start:e,end:n}},_getScaleLabel:function(t){var e=this._parseValue(t);return void 0!==e.start?"["+e.start+", "+e.end+"]":+this.getRightValue(t)},getLabelForIndex:B.noop,getPixelForValue:B.noop,getValueForPixel:B.noop,getPixelForTick:function(t){var e=this.options.offset,n=this._ticks.length,i=1/Math.max(n-(e?0:1),1);return t<0||n-1<t?null:this.getPixelForDecimal(t*i+(e?i/2:0))},getPixelForDecimal:function(t){return this._reversePixels&&(t=1-t),this._startPixel+t*this._length},getDecimalForPixel:function(t){var e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:0<t&&0<e?t:0},_autoSkip:function(t){var e,n,i,r,a=this.options.ticks,o=this._length,s=a.maxTicksLimit||o/this._tickSize()+1,l=a.major.enabled?function(t){for(var e=[],n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(t):[],u=l.length,d=l[0],c=l[u-1];if(s<u)return function(t,e,n){var i,r,a=0,o=e[0];for(n=Math.ceil(n),i=0;i<t.length;i++)r=t[i],i===o?(r._index=i,o=e[++a*n]):delete r.label}(t,l,u/s),fn(t);if(i=gn(l,t,0,s),0<u){for(e=0,n=u-1;e<n;e++)mn(t,i,l[e],l[e+1]);return r=1<u?(c-d)/(u-1):null,mn(t,i,B.isNullOrUndef(r)?0:d-r,d),mn(t,i,c,B.isNullOrUndef(r)?t.length:c+r),fn(t)}return mn(t,i),fn(t)},_tickSize:function(){var t=this.options.ticks,e=B.toRadians(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),a=t.autoSkipPadding||0,o=r?r.widest.width+a:0,s=r?r.highest.height+a:0;return this.isHorizontal()?o*i<s*n?o/n:s/i:s*i<o*n?s/n:o/i},_isVisible:function(){var t,e,n,i=this.chart,r=this.options.display;if("auto"!==r)return!!r;for(t=0,e=i.data.datasets.length;t<e;++t)if(i.isDatasetVisible(t)&&((n=i.getDatasetMeta(t)).xAxisID===this.id||n.yAxisID===this.id))return!0;return!1},_computeGridLineItems:function(t){function e(t){return I(_,t,O)}var n,i,r,a,o,s,l,u,d,c,h,f,g,m,p,v,y,b=this,_=b.chart,x=b.options,w=x.gridLines,k=x.position,M=w.offsetGridLines,S=b.isHorizontal(),D=b._ticksToDraw,C=D.length+(M?1:0),T=un(w),P=[],O=w.drawBorder?sn(w.lineWidth,0,0):0,A=O/2,I=B._alignPixel;for("top"===k?(n=e(b.bottom),l=b.bottom-T,d=n-A,h=e(t.top)+A,g=t.bottom):"bottom"===k?(n=e(b.top),h=t.top,g=e(t.bottom)-A,l=n+A,d=b.top+T):"left"===k?(n=e(b.right),s=b.right-T,u=n-A,c=e(t.left)+A,f=t.right):(n=e(b.left),c=t.left,f=e(t.right)-A,s=n+A,u=b.left+T),i=0;i<C;++i)r=D[i]||{},an(r.label)&&i<D.length||(y=i===b.zeroLineIndex&&x.offset===M?(m=w.zeroLineWidth,p=w.zeroLineColor,v=w.zeroLineBorderDash||[],w.zeroLineBorderDashOffset||0):(m=sn(w.lineWidth,i,1),p=sn(w.color,i,"rgba(0,0,0,0.1)"),v=w.borderDash||[],w.borderDashOffset||0),void 0!==(a=function(t,e,n){var i,r=t.getTicks().length,a=Math.min(e,r-1),o=t.getPixelForTick(a),s=t._startPixel,l=t._endPixel;if(!(n&&(i=1===r?Math.max(o-s,l-o):0===e?(t.getPixelForTick(1)-o)/2:(o-t.getPixelForTick(a-1))/2,(o+=a<e?i:-i)<s-1e-6||l+1e-6<o)))return o}(b,r._index||i,M))&&(o=I(_,a,m),S?s=u=c=f=o:l=d=h=g=o,P.push({tx1:s,ty1:l,tx2:u,ty2:d,x1:c,y1:h,x2:f,y2:g,width:m,color:p,borderDash:v,borderDashOffset:y})));return P.ticksLength=C,P.borderValue=n,P},_computeLabelItems:function(){for(var t,e,n,i,r,a,o,s,l,u=this,d=u.options,c=d.ticks,h=d.position,f=c.mirror,g=u.isHorizontal(),m=u._ticksToDraw,p=hn(c),v=c.padding,y=un(d.gridLines),b=-B.toRadians(u.labelRotation),_=[],x="top"===h?(i=u.bottom-y-v,b?"left":"center"):"bottom"===h?(i=u.top+y+v,b?"right":"center"):"left"===h?(n=u.right-(f?0:y)-v,f?"left":"right"):(n=u.left+(f?0:y)+v,f?"right":"left"),w=0,k=m.length;w<k;++w)e=(t=m[w]).label,an(e)||(r=u.getPixelForTick(t._index||w)+c.labelOffset,o=(a=t.major?p.major:p.minor).lineHeight,s=rn(e)?e.length:1,l=g?(n=r,"top"===h?((b?1:.5)-s)*o:(b?0:.5)*o):(i=r,(1-s)*o/2),_.push({x:n,y:i,rotation:b,label:e,font:a,textOffset:l,textAlign:x}));return _},_drawGrid:function(t){var e=this,n=e.options.gridLines;if(n.display){for(var i,r,a,o,s,l,u,d,c,h,f=e.ctx,g=e.chart,m=B._alignPixel,p=n.drawBorder?sn(n.lineWidth,0,0):0,v=e._gridLineItems||(e._gridLineItems=e._computeGridLineItems(t)),y=0,b=v.length;y<b;++y)i=(a=v[y]).width,r=a.color,i&&r&&(f.save(),f.lineWidth=i,f.strokeStyle=r,f.setLineDash&&(f.setLineDash(a.borderDash),f.lineDashOffset=a.borderDashOffset),f.beginPath(),n.drawTicks&&(f.moveTo(a.tx1,a.ty1),f.lineTo(a.tx2,a.ty2)),n.drawOnChartArea&&(f.moveTo(a.x1,a.y1),f.lineTo(a.x2,a.y2)),f.stroke(),f.restore());p&&(o=p,s=sn(n.lineWidth,v.ticksLength-1,1),l=v.borderValue,e.isHorizontal()?(u=m(g,e.left,o)-o/2,d=m(g,e.right,s)+s/2,c=h=l):(c=m(g,e.top,o)-o/2,h=m(g,e.bottom,s)+s/2,u=d=l),f.lineWidth=p,f.strokeStyle=sn(n.color,0),f.beginPath(),f.moveTo(u,c),f.lineTo(d,h),f.stroke())}},_drawLabels:function(){var t=this;if(t.options.ticks.display)for(var e,n,i,r,a,o,s=t.ctx,l=t._labelItems||(t._labelItems=t._computeLabelItems()),u=0,d=l.length;u<d;++u){if(r=(i=l[u]).font,s.save(),s.translate(i.x,i.y),s.rotate(i.rotation),s.font=r.string,s.fillStyle=r.color,s.textBaseline="middle",s.textAlign=i.textAlign,a=i.label,o=i.textOffset,rn(a))for(e=0,n=a.length;e<n;++e)s.fillText(""+a[e],0,o),o+=r.lineHeight;else s.fillText(a,0,o);s.restore()}},_drawTitle:function(){var t,e,n,i,r,a,o,s,l,u=this,d=u.ctx,c=u.options,h=c.scaleLabel;h.display&&(t=on(h.fontColor,E.global.defaultFontColor),e=B.options._parseFont(h),n=B.options.toPadding(h.padding),i=e.lineHeight/2,r=c.position,l=0,u.isHorizontal()?(o=u.left+u.width/2,s="bottom"===r?u.bottom-i-n.bottom:u.top+i+n.top):(o=(a="left"===r)?u.left+i+n.top:u.right-i-n.top,s=u.top+u.height/2,l=a?-.5*Math.PI:.5*Math.PI),d.save(),d.translate(o,s),d.rotate(l),d.textAlign="center",d.textBaseline="middle",d.fillStyle=t,d.font=e.string,d.fillText(h.labelString,0,0),d.restore())},draw:function(t){this._isVisible()&&(this._drawGrid(t),this._drawTitle(),this._drawLabels())},_layers:function(){var t=this,e=t.options,n=e.ticks&&e.ticks.z||0,i=e.gridLines&&e.gridLines.z||0;return t._isVisible()&&n!==i&&t.draw===t._draw?[{z:i,draw:function(){t._drawGrid.apply(t,arguments),t._drawTitle.apply(t,arguments)}},{z:n,draw:function(){t._drawLabels.apply(t,arguments)}}]:[{z:n,draw:function(){t.draw.apply(t,arguments)}}]},_getMatchingVisibleMetas:function(e){var n=this,i=n.isHorizontal();return n.chart._getSortedVisibleDatasetMetas().filter(function(t){return(!e||t.type===e)&&(i?t.xAxisID===n.id:t.yAxisID===n.id)})}});pn.prototype._draw=pn.prototype.draw;var vn=pn,yn=B.isNullOrUndef,bn=vn.extend({determineDataLimits:function(){var t,e=this,n=e._getLabels(),i=e.options.ticks,r=i.min,a=i.max,o=0,s=n.length-1;void 0!==r&&0<=(t=n.indexOf(r))&&(o=t),void 0!==a&&0<=(t=n.indexOf(a))&&(s=t),e.minIndex=o,e.maxIndex=s,e.min=n[o],e.max=n[s]},buildTicks:function(){var t=this._getLabels(),e=this.minIndex,n=this.maxIndex;this.ticks=0===e&&n===t.length-1?t:t.slice(e,n+1)},getLabelForIndex:function(t,e){var n=this.chart;return n.getDatasetMeta(e).controller._getValueScaleId()===this.id?this.getRightValue(n.data.datasets[e].data[t]):this._getLabels()[t]},_configure:function(){var t=this,e=t.options.offset,n=t.ticks;vn.prototype._configure.call(t),t.isHorizontal()||(t._reversePixels=!t._reversePixels),n&&(t._startValue=t.minIndex-(e?.5:0),t._valueRange=Math.max(n.length-(e?0:1),1))},getPixelForValue:function(t,e,n){var i,r,a,o=this;return yn(e)||yn(n)||(t=o.chart.data.datasets[n].data[e]),yn(t)||(i=o.isHorizontal()?t.x:t.y),(void 0!==i||void 0!==t&&isNaN(e))&&(r=o._getLabels(),t=B.valueOrDefault(i,t),e=-1!==(a=r.indexOf(t))?a:e,isNaN(e)&&(e=t)),o.getPixelForDecimal((e-o._startValue)/o._valueRange)},getPixelForTick:function(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t],t+this.minIndex)},getValueForPixel:function(t){var e=Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange);return Math.min(Math.max(e,0),this.ticks.length-1)},getBasePixel:function(){return this.bottom}}),_n={position:"bottom"};bn._defaults=_n;var xn=B.noop,wn=B.isNullOrUndef;var kn=vn.extend({getRightValue:function(t){return"string"==typeof t?+t:vn.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t,e,n=this,i=n.options.ticks;i.beginAtZero&&(t=B.sign(n.min),e=B.sign(n.max),t<0&&e<0?n.max=0:0<t&&0<e&&(n.min=0));var r=void 0!==i.min||void 0!==i.suggestedMin,a=void 0!==i.max||void 0!==i.suggestedMax;void 0!==i.min?n.min=i.min:void 0!==i.suggestedMin&&(null===n.min?n.min=i.suggestedMin:n.min=Math.min(n.min,i.suggestedMin)),void 0!==i.max?n.max=i.max:void 0!==i.suggestedMax&&(null===n.max?n.max=i.suggestedMax:n.max=Math.max(n.max,i.suggestedMax)),r!=a&&n.min>=n.max&&(r?n.max=n.min+1:n.min=n.max-1),n.min===n.max&&(n.max++,i.beginAtZero||n.min--)},getTickLimit:function(){var t,e=this.options.ticks,n=e.stepSize,i=e.maxTicksLimit;return n?t=Math.ceil(this.max/n)-Math.floor(this.min/n)+1:(t=this._computeTickLimit(),i=i||11),i&&(t=Math.min(i,t)),t},_computeTickLimit:function(){return Number.POSITIVE_INFINITY},handleDirectionalChanges:xn,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),i={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:B.valueOrDefault(e.fixedStepSize,e.stepSize)},r=t.ticks=function(t,e){var n,i,r,a,o=[],s=t.stepSize,l=s||1,u=t.maxTicks-1,d=t.min,c=t.max,h=t.precision,f=e.min,g=e.max,m=B.niceNum((g-f)/u/l)*l;if(m<1e-14&&wn(d)&&wn(c))return[f,g];u<(a=Math.ceil(g/m)-Math.floor(f/m))&&(m=B.niceNum(a*m/u/l)*l),s||wn(h)?n=Math.pow(10,B._decimalPlaces(m)):(n=Math.pow(10,h),m=Math.ceil(m*n)/n),i=Math.floor(f/m)*m,r=Math.ceil(g/m)*m,s&&(!wn(d)&&B.almostWhole(d/m,m/1e3)&&(i=d),!wn(c)&&B.almostWhole(c/m,m/1e3)&&(r=c)),a=(r-i)/m,a=B.almostEquals(a,Math.round(a),m/1e3)?Math.round(a):Math.ceil(a),i=Math.round(i*n)/n,r=Math.round(r*n)/n,o.push(wn(d)?i:d);for(var p=1;p<a;++p)o.push(Math.round((i+p*m)*n)/n);return o.push(wn(c)?r:c),o}(i,t);t.handleDirectionalChanges(),t.max=B.max(r),t.min=B.min(r),e.reverse?(r.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),vn.prototype.convertTicksToLabels.call(t)},_configure:function(){var t,e=this,n=e.getTicks(),i=e.min,r=e.max;vn.prototype._configure.call(e),e.options.offset&&n.length&&(i-=t=(r-i)/Math.max(n.length-1,1)/2,r+=t),e._startValue=i,e._endValue=r,e._valueRange=r-i}}),Mn={position:"left",ticks:{callback:nn.formatters.linear}};var Sn=kn.extend({determineDataLimits:function(){var t,e,n,i,r=this,a=r.options,o=r.chart.data.datasets,s=r._getMatchingVisibleMetas(),l=a.stacked,u={},d=s.length;if(r.min=Number.POSITIVE_INFINITY,r.max=Number.NEGATIVE_INFINITY,void 0===l)for(t=0;!l&&t<d;++t)l=void 0!==(e=s[t]).stack;for(t=0;t<d;++t)n=o[(e=s[t]).index].data,l?function(t,e,n,i){for(var r,a,o,s,l,u=t.options,d=u.stacked,c=(r=e,a=d,s=[(o=n).type,void 0===a&&void 0===o.stack?o.index:"",o.stack].join("."),void 0===r[s]&&(r[s]={pos:[],neg:[]}),r[s]),h=c.pos,f=c.neg,g=i.length,m=0;m<g;++m)l=t._parseValue(i[m]),isNaN(l.min)||isNaN(l.max)||n.data[m].hidden||(h[m]=h[m]||0,f[m]=f[m]||0,u.relativePoints?h[m]=100:l.min<0||l.max<0?f[m]+=l.min:h[m]+=l.max)}(r,u,e,n):function(t,e,n){for(var i,r=n.length,a=0;a<r;++a)i=t._parseValue(n[a]),isNaN(i.min)||isNaN(i.max)||e.data[a].hidden||(t.min=Math.min(t.min,i.min),t.max=Math.max(t.max,i.max))}(r,e,n);B.each(u,function(t){i=t.pos.concat(t.neg),r.min=Math.min(r.min,B.min(i)),r.max=Math.max(r.max,B.max(i))}),r.min=B.isFinite(r.min)&&!isNaN(r.min)?r.min:0,r.max=B.isFinite(r.max)&&!isNaN(r.max)?r.max:1,r.handleTickRangeOptions()},_computeTickLimit:function(){var t;return this.isHorizontal()?Math.ceil(this.width/40):(t=B.options._parseFont(this.options.ticks),Math.ceil(this.height/t.lineHeight))},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){return this.getPixelForDecimal((this.getRightValue(t)-this._startValue)/this._valueRange)},getValueForPixel:function(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange},getPixelForTick:function(t){var e=this.ticksAsNumbers;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])}});Sn._defaults=Mn;var Dn=B.valueOrDefault,Cn=B.math.log10;var Tn={position:"left",ticks:{callback:nn.formatters.logarithmic}};function Pn(t,e){return B.isFinite(t)&&0<=t?t:e}var On=vn.extend({determineDataLimits:function(){var t,e,n,i,r=this,a=r.options,o=r.chart,s=o.data.datasets,l=r.isHorizontal();function u(t){return l?t.xAxisID===r.id:t.yAxisID===r.id}r.min=Number.POSITIVE_INFINITY,r.max=Number.NEGATIVE_INFINITY,r.minNotZero=Number.POSITIVE_INFINITY;var d=a.stacked;if(void 0===d)for(h=0;h<s.length;h++)if(t=o.getDatasetMeta(h),o.isDatasetVisible(h)&&u(t)&&void 0!==t.stack){d=!0;break}if(a.stacked||d){for(var c={},h=0;h<s.length;h++){var f=[(t=o.getDatasetMeta(h)).type,void 0===a.stacked&&void 0===t.stack?h:"",t.stack].join(".");if(o.isDatasetVisible(h)&&u(t))for(void 0===c[f]&&(c[f]=[]),n=0,i=(e=s[h].data).length;n<i;n++){var g=c[f],m=r._parseValue(e[n]);isNaN(m.min)||isNaN(m.max)||t.data[n].hidden||m.min<0||m.max<0||(g[n]=g[n]||0,g[n]+=m.max)}}B.each(c,function(t){var e,n;0<t.length&&(e=B.min(t),n=B.max(t),r.min=Math.min(r.min,e),r.max=Math.max(r.max,n))})}else for(h=0;h<s.length;h++)if(t=o.getDatasetMeta(h),o.isDatasetVisible(h)&&u(t))for(n=0,i=(e=s[h].data).length;n<i;n++)m=r._parseValue(e[n]),isNaN(m.min)||isNaN(m.max)||t.data[n].hidden||m.min<0||m.max<0||(r.min=Math.min(m.min,r.min),r.max=Math.max(m.max,r.max),0!==m.min&&(r.minNotZero=Math.min(m.min,r.minNotZero)));r.min=B.isFinite(r.min)?r.min:null,r.max=B.isFinite(r.max)?r.max:null,r.minNotZero=B.isFinite(r.minNotZero)?r.minNotZero:null,this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;t.min=Pn(e.min,t.min),t.max=Pn(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(Cn(t.min))-1),t.max=Math.pow(10,Math.floor(Cn(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(Cn(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(Cn(t.min))+1):10),null===t.minNotZero&&(0<t.min?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(Cn(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),i={min:Pn(e.min),max:Pn(e.max)},r=t.ticks=function(t,e){var n,i,r=[],a=Dn(t.min,Math.pow(10,Math.floor(Cn(e.min)))),o=Math.floor(Cn(e.max)),s=Math.ceil(e.max/Math.pow(10,o));0===a?(n=Math.floor(Cn(e.minNotZero)),i=Math.floor(e.minNotZero/Math.pow(10,n)),r.push(a),a=i*Math.pow(10,n)):(n=Math.floor(Cn(a)),i=Math.floor(a/Math.pow(10,n)));for(var l=n<0?Math.pow(10,Math.abs(n)):1;r.push(a),10===++i&&(i=1,l=0<=++n?1:l),a=Math.round(i*Math.pow(10,n)*l)/l,n<o||n===o&&i<s;);var u=Dn(t.max,a);return r.push(u),r}(i,t);t.max=B.max(r),t.min=B.min(r),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&r.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),vn.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return this._getScaleLabel(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){var e=this.tickValues;return t<0||t>e.length-1?null:this.getPixelForValue(e[t])},_getFirstTickValue:function(t){var e=Math.floor(Cn(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},_configure:function(){var t=this,e=t.min,n=0;vn.prototype._configure.call(t),0===e&&(e=t._getFirstTickValue(t.minNotZero),n=Dn(t.options.ticks.fontSize,E.global.defaultFontSize)/t._length),t._startValue=Cn(e),t._valueOffset=n,t._valueRange=(Cn(t.max)-Cn(e))/(1-n)},getPixelForValue:function(t){var e=this,n=0;return(t=+e.getRightValue(t))>e.min&&0<t&&(n=(Cn(t)-e._startValue)/e._valueRange+e._valueOffset),e.getPixelForDecimal(n)},getValueForPixel:function(t){var e=this,n=e.getDecimalForPixel(t);return 0===n&&0===e.min?0:Math.pow(10,e._startValue+(n-e._valueOffset)*e._valueRange)}});On._defaults=Tn;var An=B.valueOrDefault,In=B.valueAtIndexOrDefault,Fn=B.options.resolve,Ln={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0,0,0,0.1)",lineWidth:1,borderDash:[],borderDashOffset:0},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:nn.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function Nn(t){var e=t.ticks;return e.display&&t.display?An(e.fontSize,E.global.defaultFontSize)+2*e.backdropPaddingY:0}function Rn(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||r<t?{start:e-n,end:e}:{start:e,end:e+n}}function Yn(t){var e,n,i=B.options._parseFont(t.options.pointLabels),r={l:0,r:t.width,t:0,b:t.height-t.paddingTop},a={};t.ctx.font=i.string,t._pointLabelSizes=[];for(var o,s,l,u=t.chart.data.labels.length,d=0;d<u;d++){n=t.getPointPosition(d,t.drawingArea+5),o=t.ctx,s=i.lineHeight,l=t.pointLabels[d],e=B.isArray(l)?{w:B.longestText(o,o.font,l),h:l.length*s}:{w:o.measureText(l).width,h:s},t._pointLabelSizes[d]=e;var c=t.getIndexAngle(d),h=B.toDegrees(c)%360,f=Rn(h,n.x,e.w,0,180),g=Rn(h,n.y,e.h,90,270);f.start<r.l&&(r.l=f.start,a.l=c),f.end>r.r&&(r.r=f.end,a.r=c),g.start<r.t&&(r.t=g.start,a.t=c),g.end>r.b&&(r.b=g.end,a.b=c)}t.setReductions(t.drawingArea,r,a)}function Wn(t){var e=t.ctx,n=t.options,i=n.pointLabels,r=Nn(n),a=t.getDistanceFromCenterForValue(n.ticks.reverse?t.min:t.max),o=B.options._parseFont(i);e.save(),e.font=o.string,e.textBaseline="middle";for(var s,l,u,d,c=t.chart.data.labels.length-1;0<=c;c--){var h=0===c?r/2:0,f=t.getPointPosition(c,a+h+5),g=In(i.fontColor,c,E.global.defaultFontColor);e.fillStyle=g;var m=t.getIndexAngle(c),p=B.toDegrees(m);e.textAlign=0===(d=p)||180===d?"center":d<180?"left":"right",s=p,l=t._pointLabelSizes[c],u=f,90===s||270===s?u.y-=l.h/2:(270<s||s<90)&&(u.y-=l.h),function(t,e,n,i){var r,a,o=n.y+i/2;if(B.isArray(e))for(r=0,a=e.length;r<a;++r)t.fillText(e[r],n.x,o),o+=i;else t.fillText(e,n.x,o)}(e,t.pointLabels[c],f,o.lineHeight)}e.restore()}function En(t){return B.isNumber(t)?t:0}var zn=kn.extend({setDimensions:function(){var t=this;t.width=t.maxWidth,t.height=t.maxHeight,t.paddingTop=Nn(t.options)/2,t.xCenter=Math.floor(t.width/2),t.yCenter=Math.floor((t.height-t.paddingTop)/2),t.drawingArea=Math.min(t.height-t.paddingTop,t.width)/2},determineDataLimits:function(){var r=this,n=r.chart,a=Number.POSITIVE_INFINITY,o=Number.NEGATIVE_INFINITY;B.each(n.data.datasets,function(t,e){var i;n.isDatasetVisible(e)&&(i=n.getDatasetMeta(e),B.each(t.data,function(t,e){var n=+r.getRightValue(t);isNaN(n)||i.data[e].hidden||(a=Math.min(n,a),o=Math.max(n,o))}))}),r.min=a===Number.POSITIVE_INFINITY?0:a,r.max=o===Number.NEGATIVE_INFINITY?0:o,r.handleTickRangeOptions()},_computeTickLimit:function(){return Math.ceil(this.drawingArea/Nn(this.options))},convertTicksToLabels:function(){var e=this;kn.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(function(){var t=B.callback(e.options.pointLabels.callback,arguments,e);return t||0===t?t:""})},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t=this.options;t.display&&t.pointLabels.display?Yn(this):this.setCenterPoint(0,0,0,0)},setReductions:function(t,e,n){var i=this,r=e.l/Math.sin(n.l),a=Math.max(e.r-i.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),s=-Math.max(e.b-(i.height-i.paddingTop),0)/Math.cos(n.b),r=En(r),a=En(a),o=En(o),s=En(s);i.drawingArea=Math.min(Math.floor(t-(r+a)/2),Math.floor(t-(o+s)/2)),i.setCenterPoint(r,a,o,s)},setCenterPoint:function(t,e,n,i){var r=this,a=r.width-e-r.drawingArea,o=t+r.drawingArea,s=n+r.drawingArea,l=r.height-r.paddingTop-i-r.drawingArea;r.xCenter=Math.floor((o+a)/2+r.left),r.yCenter=Math.floor((s+l)/2+r.top+r.paddingTop)},getIndexAngle:function(t){var e=this.chart,n=(t*(360/e.data.labels.length)+((e.options||{}).startAngle||0))%360;return(n<0?360+n:n)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(B.isNullOrUndef(t))return NaN;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(t){var e=this.min,n=this.max;return this.getPointPositionForValue(t||0,this.beginAtZero?0:e<0&&n<0?n:0<e&&0<n?e:0)},_drawGrid:function(){var t,n,e,i=this,r=i.ctx,a=i.options,o=a.gridLines,s=a.angleLines,l=An(s.lineWidth,o.lineWidth),u=An(s.color,o.color);if(a.pointLabels.display&&Wn(i),o.display&&B.each(i.ticks,function(t,e){0!==e&&(n=i.getDistanceFromCenterForValue(i.ticksAsNumbers[e]),function(t,e,n,i){var r,a=t.ctx,o=e.circular,s=t.chart.data.labels.length,l=In(e.color,i-1),u=In(e.lineWidth,i-1);if((o||s)&&l&&u){if(a.save(),a.strokeStyle=l,a.lineWidth=u,a.setLineDash&&(a.setLineDash(e.borderDash||[]),a.lineDashOffset=e.borderDashOffset||0),a.beginPath(),o)a.arc(t.xCenter,t.yCenter,n,0,2*Math.PI);else{r=t.getPointPosition(0,n),a.moveTo(r.x,r.y);for(var d=1;d<s;d++)r=t.getPointPosition(d,n),a.lineTo(r.x,r.y)}a.closePath(),a.stroke(),a.restore()}}(i,o,n,e))}),s.display&&l&&u){for(r.save(),r.lineWidth=l,r.strokeStyle=u,r.setLineDash&&(r.setLineDash(Fn([s.borderDash,o.borderDash,[]])),r.lineDashOffset=Fn([s.borderDashOffset,o.borderDashOffset,0])),t=i.chart.data.labels.length-1;0<=t;t--)n=i.getDistanceFromCenterForValue(a.ticks.reverse?i.min:i.max),e=i.getPointPosition(t,n),r.beginPath(),r.moveTo(i.xCenter,i.yCenter),r.lineTo(e.x,e.y),r.stroke();r.restore()}},_drawLabels:function(){var t,n,i,r,a,o=this,s=o.ctx,l=o.options.ticks;l.display&&(t=o.getIndexAngle(0),n=B.options._parseFont(l),i=An(l.fontColor,E.global.defaultFontColor),s.save(),s.font=n.string,s.translate(o.xCenter,o.yCenter),s.rotate(t),s.textAlign="center",s.textBaseline="middle",B.each(o.ticks,function(t,e){0===e&&!l.reverse||(r=o.getDistanceFromCenterForValue(o.ticksAsNumbers[e]),l.showLabelBackdrop&&(a=s.measureText(t).width,s.fillStyle=l.backdropColor,s.fillRect(-a/2-l.backdropPaddingX,-r-n.size/2-l.backdropPaddingY,a+2*l.backdropPaddingX,n.size+2*l.backdropPaddingY)),s.fillStyle=i,s.fillText(t,0,-r))}),s.restore())},_drawTitle:B.noop});zn._defaults=Ln;var Vn=B._deprecated,jn=B.options.resolve,Hn=B.valueOrDefault,Bn=Number.MIN_SAFE_INTEGER||-9007199254740991,Un=Number.MAX_SAFE_INTEGER||9007199254740991,qn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Gn=Object.keys(qn);function Zn(t,e){return t-e}function $n(t){return B.valueOrDefault(t.time.min,t.ticks.min)}function Xn(t){return B.valueOrDefault(t.time.max,t.ticks.max)}function Kn(t,e,n,i){var r=function(t,e,n){for(var i,r,a,o=0,s=t.length-1;0<=o&&o<=s;){if(r=t[(i=o+s>>1)-1]||null,a=t[i],!r)return{lo:null,hi:a};if(a[e]<n)o=1+i;else{if(!(r[e]>n))return{lo:r,hi:a};s=i-1}}return{lo:a,hi:null}}(t,e,n),a=r.lo?r.hi?r.lo:t[t.length-2]:t[0],o=r.lo?r.hi?r.hi:t[t.length-1]:t[1],s=o[e]-a[e],l=s?(n-a[e])/s:0,u=(o[i]-a[i])*l;return a[i]+u}function Jn(t,e){var n=t._adapter,i=t.options.time,r=i.parser,a=r||i.format,o=e;return"function"==typeof r&&(o=r(o)),B.isFinite(o)||(o="string"==typeof a?n.parse(o,a):n.parse(o)),null!==o?+o:(r||"function"!=typeof a||(o=a(e),B.isFinite(o)||(o=n.parse(o))),o)}function Qn(t,e){if(B.isNullOrUndef(e))return null;var n=t.options.time,i=Jn(t,t.getRightValue(e));return null===i||n.round&&(i=+t._adapter.startOf(i,n.round)),i}function ti(t,e,n,i){for(var r,a,o=Gn.length,s=Gn.indexOf(t);s<o-1;++s)if(a=(r=qn[Gn[s]]).steps?r.steps:Un,r.common&&Math.ceil((n-e)/(a*r.size))<=i)return Gn[s];return Gn[o-1]}function ei(t,e,n){for(var i,r=[],a={},o=e.length,s=0;s<o;++s)a[i=e[s]]=s,r.push({value:i,major:!1});return 0!==o&&n?function(t,e,n,i){for(var r,a=t._adapter,o=+a.startOf(e[0].value,i),s=e[e.length-1].value,l=o;l<=s;l=+a.add(l,1,i))0<=(r=n[l])&&(e[r].major=!0);return e}(t,r,a,n):r}var ni=vn.extend({initialize:function(){this.mergeTicksOptions(),vn.prototype.initialize.call(this)},update:function(){var t=this.options,e=t.time||(t.time={}),n=this._adapter=new en._date(t.adapters.date);return Vn("time scale",e.format,"time.format","time.parser"),Vn("time scale",e.min,"time.min","ticks.min"),Vn("time scale",e.max,"time.max","ticks.max"),B.mergeIf(e.displayFormats,n.formats()),vn.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),vn.prototype.getRightValue.call(this,t)},determineDataLimits:function(){for(var t,e,n,i,r,a=this,o=a.chart,s=a._adapter,l=a.options,u=l.time.unit||"day",d=Un,c=Bn,h=[],f=[],g=[],m=a._getLabels(),p=0,v=m.length;p<v;++p)g.push(Qn(a,m[p]));for(p=0,v=(o.data.datasets||[]).length;p<v;++p)if(o.isDatasetVisible(p))if(n=o.data.datasets[p].data,B.isObject(n[0]))for(f[p]=[],t=0,e=n.length;t<e;++t)i=Qn(a,n[t]),h.push(i),f[p][t]=i;else f[p]=g.slice(0),r||(h=h.concat(g),r=!0);else f[p]=[];g.length&&(d=Math.min(d,g[0]),c=Math.max(c,g[g.length-1])),h.length&&(h=1<v?function(t){for(var e,n={},i=[],r=0,a=t.length;r<a;++r)n[e=t[r]]||(n[e]=!0,i.push(e));return i}(h).sort(Zn):h.sort(Zn),d=Math.min(d,h[0]),c=Math.max(c,h[h.length-1])),d=Qn(a,$n(l))||d,c=Qn(a,Xn(l))||c,d=d===Un?+s.startOf(Date.now(),u):d,c=c===Bn?+s.endOf(Date.now(),u)+1:c,a.min=Math.min(d,c),a.max=Math.max(d+1,c),a._table=[],a._timestamps={data:h,datasets:f,labels:g}},buildTicks:function(){var t,e,n,i,r,a,o,s,l,u=this,d=u.min,c=u.max,h=u.options,f=h.ticks,g=h.time,m=u._timestamps,p=[],v=u.getLabelCapacity(d),y=f.source,b=h.distribution,m="data"===y||"auto"===y&&"series"===b?m.data:"labels"===y?m.labels:function(t,e,n,i){var r,a=t._adapter,o=t.options,s=o.time,l=s.unit||ti(s.minUnit,e,n,i),u=jn([s.stepSize,s.unitStepSize,1]),d="week"===l&&s.isoWeekday,c=e,h=[];if(d&&(c=+a.startOf(c,"isoWeek",d)),c=+a.startOf(c,d?"day":l),a.diff(n,e,l)>1e5*u)throw e+" and "+n+" are too far apart with stepSize of "+u+" "+l;for(r=c;r<n;r=+a.add(r,u,l))h.push(r);return r!==n&&"ticks"!==o.bounds||h.push(r),h}(u,d,c,v);for("ticks"===h.bounds&&m.length&&(d=m[0],c=m[m.length-1]),d=Qn(u,$n(h))||d,c=Qn(u,Xn(h))||c,t=0,e=m.length;t<e;++t)d<=(n=m[t])&&n<=c&&p.push(n);return u.min=d,u.max=c,u._unit=g.unit||(f.autoSkip?ti(g.minUnit,u.min,u.max,v):function(t,e,n,i,r){for(var a,o=Gn.length-1;o>=Gn.indexOf(n);o--)if(a=Gn[o],qn[a].common&&t._adapter.diff(r,i,a)>=e-1)return a;return Gn[n?Gn.indexOf(n):0]}(u,p.length,g.minUnit,u.min,u.max)),u._majorUnit=f.major.enabled&&"year"!==u._unit?function(t){for(var e=Gn.indexOf(t)+1,n=Gn.length;e<n;++e)if(qn[Gn[e]].common)return Gn[e]}(u._unit):void 0,u._table=function(t,e,n,i){if("linear"===i||!t.length)return[{time:e,pos:0},{time:n,pos:1}];for(var r,a,o,s=[],l=[e],u=0,d=t.length;u<d;++u)e<(a=t[u])&&a<n&&l.push(a);for(l.push(n),u=0,d=l.length;u<d;++u)o=l[u+1],r=l[u-1],a=l[u],void 0!==r&&void 0!==o&&Math.round((o+r)/2)===a||s.push({time:a,pos:u/(d-1)});return s}(u._timestamps.data,d,c,b),u._offsets=(i=u._table,r=p,l=s=0,h.offset&&r.length&&(a=Kn(i,"time",r[0],"pos"),s=1===r.length?1-a:(Kn(i,"time",r[1],"pos")-a)/2,o=Kn(i,"time",r[r.length-1],"pos"),l=1===r.length?o:(o-Kn(i,"time",r[r.length-2],"pos"))/2),{start:s,end:l,factor:1/(s+1+l)}),f.reverse&&p.reverse(),ei(u,p,u._majorUnit)},getLabelForIndex:function(t,e){var n=this,i=n._adapter,r=n.chart.data,a=n.options.time,o=r.labels&&t<r.labels.length?r.labels[t]:"",s=r.datasets[e].data[t];return B.isObject(s)&&(o=n.getRightValue(s)),a.tooltipFormat?i.format(Jn(n,o),a.tooltipFormat):"string"==typeof o?o:i.format(Jn(n,o),a.displayFormats.datetime)},tickFormatFunction:function(t,e,n,i){var r=this._adapter,a=this.options,o=a.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],d=n[e],c=a.ticks,h=l&&u&&d&&d.major,f=r.format(t,i||(h?u:s)),g=h?c.major:c.minor,m=jn([g.callback,g.userCallback,c.callback,c.userCallback]);return m?m(f,e,n):f},convertTicksToLabels:function(t){for(var e=[],n=0,i=t.length;n<i;++n)e.push(this.tickFormatFunction(t[n].value,n,t));return e},getPixelForOffset:function(t){var e=this._offsets,n=Kn(this._table,"time",t,"pos");return this.getPixelForDecimal((e.start+n)*e.factor)},getPixelForValue:function(t,e,n){var i=null;if(void 0!==e&&void 0!==n&&(i=this._timestamps.datasets[n][e]),null===i&&(i=Qn(this,t)),null!==i)return this.getPixelForOffset(i)},getPixelForTick:function(t){var e=this.getTicks();return 0<=t&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end,i=Kn(this._table,"pos",n,"time");return this._adapter._create(i)},_getLabelSize:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,i=B.toRadians(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),a=Math.sin(i),o=Hn(e.fontSize,E.global.defaultFontSize);return{w:n*r+o*a,h:n*a+o*r}},getLabelWidth:function(t){return this._getLabelSize(t).w},getLabelCapacity:function(t){var e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this.tickFormatFunction(t,0,ei(this,[t],this._majorUnit),i),a=this._getLabelSize(r),o=Math.floor(this.isHorizontal()?this.width/a.w:this.height/a.h);return this.options.offset&&o--,0<o?o:1}}),ii={position:"bottom",distribution:"linear",bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}};ni._defaults=ii;var ri={category:bn,linear:Sn,logarithmic:On,radialLinear:zn,time:ni},ai={datetime:"MMM D, YYYY, h:mm:ss a",millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"};en._date.override("function"==typeof i?{_id:"moment",formats:function(){return ai},parse:function(t,e){return"string"==typeof t&&"string"==typeof e?t=i(t,e):t instanceof i||(t=i(t)),t.isValid()?t.valueOf():null},format:function(t,e){return i(t).format(e)},add:function(t,e,n){return i(t).add(e,n).valueOf()},diff:function(t,e,n){return i(t).diff(i(e),n)},startOf:function(t,e,n){return t=i(t),"isoWeek"===e?t.isoWeekday(n).valueOf():t.startOf(e).valueOf()},endOf:function(t,e){return i(t).endOf(e).valueOf()},_create:function(t){return i(t)}}:{}),E._set("global",{plugins:{filler:{propagate:!0}}});var oi={dataset:function(t){var e=t.fill,n=t.chart,i=n.getDatasetMeta(e),r=i&&n.isDatasetVisible(e)&&i.dataset._children||[],a=r.length||0;return a?function(t,e){return e<a&&r[e]._view||null}:null},boundary:function(t){var n=t.boundary,e=n?n.x:null,i=n?n.y:null;return B.isArray(n)?function(t,e){return n[e]}:function(t){return{x:null===e?t.x:e,y:null===i?t.y:i}}}};function si(t){return((t.el._scale||{}).getPointPositionForValue?function(t){var e,n,i,r,a,o=t.el._scale,s=o.options,l=o.chart.data.labels.length,u=t.fill,d=[];if(!l)return null;for(e=s.ticks.reverse?o.max:o.min,n=s.ticks.reverse?o.min:o.max,i=o.getPointPositionForValue(0,e),r=0;r<l;++r)a="start"===u||"end"===u?o.getPointPositionForValue(r,"start"===u?e:n):o.getBasePosition(r),s.gridLines.circular&&(a.cx=i.x,a.cy=i.y,a.angle=o.getIndexAngle(r)-Math.PI/2),d.push(a);return d}:function(t){var e,n=t.el._model||{},i=t.el._scale||{},r=t.fill,a=null;if(isFinite(r))return null;if("start"===r?a=void 0===n.scaleBottom?i.bottom:n.scaleBottom:"end"===r?a=void 0===n.scaleTop?i.top:n.scaleTop:void 0!==n.scaleZero?a=n.scaleZero:i.getBasePixel&&(a=i.getBasePixel()),null!=a){if(void 0!==a.x&&void 0!==a.y)return a;if(B.isFinite(a))return{x:(e=i.isHorizontal())?a:null,y:e?null:a}}return null})(t)}function li(t){return t&&!t.skip}function ui(t,e,n,i,r){var a,o,s,l;if(i&&r){for(t.moveTo(e[0].x,e[0].y),a=1;a<i;++a)B.canvas.lineTo(t,e[a-1],e[a]);if(void 0===n[0].angle)for(t.lineTo(n[r-1].x,n[r-1].y),a=r-1;0<a;--a)B.canvas.lineTo(t,n[a],n[a-1],!0);else for(o=n[0].cx,s=n[0].cy,l=Math.sqrt(Math.pow(n[0].x-o,2)+Math.pow(n[0].y-s,2)),a=r-1;0<a;--a)t.arc(o,s,l,n[a].angle,n[a-1].angle,!0)}}var di={id:"filler",afterDatasetsUpdate:function(t,e){for(var n,i,r,a,o,s,l=(t.data.datasets||[]).length,u=e.propagate,d=[],c=0;c<l;++c)r=null,(i=(n=t.getDatasetMeta(c)).dataset)&&i._model&&i instanceof kt.Line&&(r={visible:t.isDatasetVisible(c),fill:function(t,e,n){var i,r=t._model||{},a=r.fill;if(void 0===a&&(a=!!r.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(i=parseFloat(a,10),isFinite(i)&&Math.floor(i)===i)return"-"!==a[0]&&"+"!==a[0]||(i=e+i),!(i===e||i<0||n<=i)&&i;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}(i,c,l),chart:t,el:i}),n.$filler=r,d.push(r);for(c=0;c<l;++c)(r=d[c])&&(r.fill=function(t,e,n){var i,r=t[e].fill,a=[e];if(!n)return r;for(;!1!==r&&-1===a.indexOf(r);){if(!isFinite(r))return r;if(!(i=t[r]))return!1;if(i.visible)return r;a.push(r),r=i.fill}return!1}(d,c,u),r.boundary=si(r),r.mapper=(s=void 0,o=(a=r).fill,!(s="dataset")===o?null:(isFinite(o)||(s="boundary"),oi[s](a))))},beforeDatasetsDraw:function(t){for(var e,n,i,r,a,o,s=t._getSortedVisibleDatasetMetas(),l=t.ctx,u=s.length-1;0<=u;--u)(e=s[u].$filler)&&e.visible&&(i=(n=e.el)._view,r=n._children||[],a=e.mapper,o=i.backgroundColor||E.global.defaultColor,a&&o&&r.length&&(B.canvas.clipArea(l,t.chartArea),function(t,e,n,i,r,a){var o,s,l,u,d,c,h,f,g=e.length,m=i.spanGaps,p=[],v=[],y=0,b=0;for(t.beginPath(),o=0,s=g;o<s;++o)d=n(u=e[l=o%g]._view,l,i),c=li(u),h=li(d),a&&void 0===f&&c&&(s=g+(f=o+1)),c&&h?(y=p.push(u),b=v.push(d)):y&&b&&(m?(c&&p.push(u),h&&v.push(d)):(ui(t,p,v,y,b),y=b=0,p=[],v=[]));ui(t,p,v,y,b),t.closePath(),t.fillStyle=r,t.fill()}(l,r,a,i,o,n._loop),B.canvas.unclipArea(l)))}},ci=B.rtl.getRtlAdapter,hi=B.noop,fi=B.valueOrDefault;function gi(t,e){return t.usePointStyle&&t.boxWidth>e?e:t.boxWidth}E._set("global",{legend:{display:!0,position:"top",align:"center",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,i=this.chart,r=i.getDatasetMeta(n);r.hidden=null===r.hidden?!i.data.datasets[n].hidden:null,i.update()},onHover:null,onLeave:null,labels:{boxWidth:40,padding:10,generateLabels:function(n){var i=n.data.datasets,t=n.options.legend||{},r=t.labels&&t.labels.usePointStyle;return n._getSortedDatasetMetas().map(function(t){var e=t.controller.getStyle(r?0:void 0);return{text:i[t.index].label,fillStyle:e.backgroundColor,hidden:!n.isDatasetVisible(t.index),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,rotation:e.rotation,datasetIndex:t.index}},this)}}},legendCallback:function(t){var e,n,i,r=document.createElement("ul"),a=t.data.datasets;for(r.setAttribute("class",t.id+"-legend"),e=0,n=a.length;e<n;e++)(i=r.appendChild(document.createElement("li"))).appendChild(document.createElement("span")).style.backgroundColor=a[e].backgroundColor,a[e].label&&i.appendChild(document.createTextNode(a[e].label));return r.outerHTML}});var mi=X.extend({initialize:function(t){B.extend(this,t),this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1},beforeUpdate:hi,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:hi,beforeSetDimensions:hi,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:hi,beforeBuildLabels:hi,buildLabels:function(){var e=this,n=e.options.labels||{},t=B.callback(n.generateLabels,[e.chart],e)||[];n.filter&&(t=t.filter(function(t){return n.filter(t,e.chart.data)})),e.options.reverse&&t.reverse(),e.legendItems=t},afterBuildLabels:hi,beforeFit:hi,fit:function(){var i,r,a,o,s,l,u,d,t=this,e=t.options,c=e.labels,n=e.display,h=t.ctx,f=B.options._parseFont(c),g=f.size,m=t.legendHitBoxes=[],p=t.minSize,v=t.isHorizontal();v?(p.width=t.maxWidth,p.height=n?10:0):(p.width=n?10:0,p.height=t.maxHeight),n?(h.font=f.string,v?(i=t.lineWidths=[0],r=0,h.textAlign="left",h.textBaseline="middle",B.each(t.legendItems,function(t,e){var n=gi(c,g)+g/2+h.measureText(t.text).width;(0===e||i[i.length-1]+n+2*c.padding>p.width)&&(r+=g+c.padding,i[i.length-(0<e?0:1)]=0),m[e]={left:0,top:0,width:n,height:g},i[i.length-1]+=n+c.padding}),p.height+=r):(a=c.padding,o=t.columnWidths=[],s=t.columnHeights=[],l=c.padding,d=u=0,B.each(t.legendItems,function(t,e){var n=gi(c,g)+g/2+h.measureText(t.text).width;0<e&&d+g+2*a>p.height&&(l+=u+c.padding,o.push(u),s.push(d),d=u=0),u=Math.max(u,n),d+=g+a,m[e]={left:0,top:0,width:n,height:g}}),l+=u,o.push(u),s.push(d),p.width+=l),t.width=p.width,t.height=p.height):t.width=p.width=t.height=p.height=0},afterFit:hi,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var x,w,t,e,k,M,S,D,C,T,P,O=this,n=O.options,A=n.labels,i=E.global,I=i.defaultColor,F=i.elements.line,L=O.height,N=O.columnHeights,R=O.width,Y=O.lineWidths;n.display&&(x=ci(n.rtl,O.left,O.minSize.width),w=O.ctx,t=fi(A.fontColor,i.defaultFontColor),e=B.options._parseFont(A),k=e.size,w.textAlign=x.textAlign("left"),w.textBaseline="middle",w.lineWidth=.5,w.strokeStyle=t,w.fillStyle=t,w.font=e.string,M=gi(A,k),S=O.legendHitBoxes,D=function(t,e){switch(n.align){case"start":return A.padding;case"end":return t-e;default:return(t-e+A.padding)/2}},C=O.isHorizontal(),T=C?{x:O.left+D(R,Y[0]),y:O.top+A.padding,line:0}:{x:O.left+A.padding,y:O.top+D(L,N[0]),line:0},B.rtl.overrideTextDirection(O.ctx,n.textDirection),P=k+A.padding,B.each(O.legendItems,function(t,e){var n=w.measureText(t.text).width,i=M+k/2+n,r=T.x,a=T.y;x.setWidth(O.minSize.width),C?0<e&&r+i+A.padding>O.left+O.minSize.width&&(a=T.y+=P,T.line++,r=T.x=O.left+D(R,Y[T.line])):0<e&&a+P>O.top+O.minSize.height&&(r=T.x=r+O.columnWidths[T.line]+A.padding,T.line++,a=T.y=O.top+D(L,N[T.line]));var o,s,l,u,d,c,h,f,g,m,p,v,y,b,_=x.x(r);o=_,s=a,l=t,isNaN(M)||M<=0||(w.save(),u=fi(l.lineWidth,F.borderWidth),w.fillStyle=fi(l.fillStyle,I),w.lineCap=fi(l.lineCap,F.borderCapStyle),w.lineDashOffset=fi(l.lineDashOffset,F.borderDashOffset),w.lineJoin=fi(l.lineJoin,F.borderJoinStyle),w.lineWidth=u,w.strokeStyle=fi(l.strokeStyle,I),w.setLineDash&&w.setLineDash(fi(l.lineDash,F.borderDash)),A&&A.usePointStyle?(d=M*Math.SQRT2/2,c=x.xPlus(o,M/2),h=s+k/2,B.canvas.drawPoint(w,l.pointStyle,d,c,h,l.rotation)):(w.fillRect(x.leftForLtr(o,M),s,M,k),0!==u&&w.strokeRect(x.leftForLtr(o,M),s,M,k)),w.restore()),S[e].left=x.leftForLtr(_,S[e].width),S[e].top=a,f=_,g=a,m=t,p=n,v=k/2,y=x.xPlus(f,M+v),b=g+v,w.fillText(m.text,y,b),m.hidden&&(w.beginPath(),w.lineWidth=2,w.moveTo(y,b),w.lineTo(x.xPlus(y,p),b),w.stroke()),C?T.x+=i+A.padding:T.y+=P}),B.rtl.restoreTextDirection(O.ctx,n.textDirection))},_getLegendItemAt:function(t,e){var n,i,r;if(t>=this.left&&t<=this.right&&e>=this.top&&e<=this.bottom)for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(t>=(i=r[n]).left&&t<=i.left+i.width&&e>=i.top&&e<=i.top+i.height)return this.legendItems[n];return null},handleEvent:function(t){var e,n=this.options,i="mouseup"===t.type?"click":t.type;if("mousemove"===i){if(!n.onHover&&!n.onLeave)return}else{if("click"!==i)return;if(!n.onClick)return}e=this._getLegendItemAt(t.x,t.y),"click"===i?e&&n.onClick&&n.onClick.call(this,t.native,e):(n.onLeave&&e!==this._hoveredItem&&(this._hoveredItem&&n.onLeave.call(this,t.native,this._hoveredItem),this._hoveredItem=e),n.onHover&&e&&n.onHover.call(this,t.native,e))}});function pi(t,e){var n=new mi({ctx:t.ctx,options:e,chart:t});he.configure(t,n,e),he.addBox(t,n),t.legend=n}var vi={id:"legend",_element:mi,beforeInit:function(t){var e=t.options.legend;e&&pi(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(B.mergeIf(e,E.global.legend),n?(he.configure(t,n,e),n.options=e):pi(t,e)):n&&(he.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},yi=B.noop;E._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,padding:10,position:"top",text:"",weight:2e3}});var bi=X.extend({initialize:function(t){B.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:yi,update:function(t,e,n){var i=this;return i.beforeUpdate(),i.maxWidth=t,i.maxHeight=e,i.margins=n,i.beforeSetDimensions(),i.setDimensions(),i.afterSetDimensions(),i.beforeBuildLabels(),i.buildLabels(),i.afterBuildLabels(),i.beforeFit(),i.fit(),i.afterFit(),i.afterUpdate(),i.minSize},afterUpdate:yi,beforeSetDimensions:yi,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:yi,beforeBuildLabels:yi,buildLabels:yi,afterBuildLabels:yi,beforeFit:yi,fit:function(){var t,e=this.options,n=this.minSize={},i=this.isHorizontal();e.display?(t=(B.isArray(e.text)?e.text.length:1)*B.options._parseFont(e).lineHeight+2*e.padding,this.width=n.width=i?this.maxWidth:t,this.height=n.height=i?t:this.maxHeight):this.width=n.width=this.height=n.height=0},afterFit:yi,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this.ctx,e=this.options;if(e.display){var n,i,r,a=B.options._parseFont(e),o=a.lineHeight,s=o/2+e.padding,l=0,u=this.top,d=this.left,c=this.bottom,h=this.right;t.fillStyle=B.valueOrDefault(e.fontColor,E.global.defaultFontColor),t.font=a.string,this.isHorizontal()?(i=d+(h-d)/2,r=u+s,n=h-d):(i="left"===e.position?d+s:h-s,r=u+(c-u)/2,n=c-u,l=Math.PI*("left"===e.position?-.5:.5)),t.save(),t.translate(i,r),t.rotate(l),t.textAlign="center",t.textBaseline="middle";var f=e.text;if(B.isArray(f))for(var g=0,m=0;m<f.length;++m)t.fillText(f[m],0,g,n),g+=o;else t.fillText(f,0,0,n);t.restore()}}});function _i(t,e){var n=new bi({ctx:t.ctx,options:e,chart:t});he.configure(t,n,e),he.addBox(t,n),t.titleBlock=n}var xi={},wi=di,ki=vi,Mi={id:"title",_element:bi,beforeInit:function(t){var e=t.options.title;e&&_i(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(B.mergeIf(e,E.global.title),n?(he.configure(t,n,e),n.options=e):_i(t,e)):n&&(he.removeBox(t,n),delete t.titleBlock)}};function Si(t,e,n){var i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}function Di(t){return null!=t&&"none"!==t}function Ci(t,e,n){var i=document.defaultView,r=B._getParentNode(t),a=i.getComputedStyle(t)[e],o=i.getComputedStyle(r)[e],s=Di(a),l=Di(o),u=Number.POSITIVE_INFINITY;return s||l?Math.min(s?Si(a,t,n):u,l?Si(o,r,n):u):"none"}for(var Ti in xi.filler=wi,xi.legend=ki,xi.title=Mi,(Je.helpers=B).where=function(t,e){if(B.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return B.each(t,function(t){e(t)&&n.push(t)}),n},B.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var i=0,r=t.length;i<r;++i)if(e.call(n,t[i],i,t))return i;return-1},B.findNextWhere=function(t,e,n){B.isNullOrUndef(n)&&(n=-1);for(var i=n+1;i<t.length;i++){var r=t[i];if(e(r))return r}},B.findPreviousWhere=function(t,e,n){B.isNullOrUndef(n)&&(n=t.length);for(var i=n-1;0<=i;i--){var r=t[i];if(e(r))return r}},B.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},B.almostEquals=function(t,e,n){return Math.abs(t-e)<n},B.almostWhole=function(t,e){var n=Math.round(t);return n-e<=t&&t<=n+e},B.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},B.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},B.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0===(t=+t)||isNaN(t)?t:0<t?1:-1},B.toRadians=function(t){return t*(Math.PI/180)},B.toDegrees=function(t){return t*(180/Math.PI)},B._decimalPlaces=function(t){if(B.isFinite(t)){for(var e=1,n=0;Math.round(t*e)/e!==t;)e*=10,n++;return n}},B.getAngleFromPoint=function(t,e){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i),a=Math.atan2(i,n);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:r}},B.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},B.aliasPixel=function(t){return t%2==0?0:.5},B._alignPixel=function(t,e,n){var i=t.currentDevicePixelRatio,r=n/2;return Math.round((e-r)*i)/i+r},B.splineCurve=function(t,e,n,i){var r=t.skip?e:t,a=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(a.x-r.x,2)+Math.pow(a.y-r.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),d=l/(s+l),c=i*(u=isNaN(u)?0:u),h=i*(d=isNaN(d)?0:d);return{previous:{x:a.x-c*(o.x-r.x),y:a.y-c*(o.y-r.y)},next:{x:a.x+h*(o.x-r.x),y:a.y+h*(o.y-r.y)}}},B.EPSILON=Number.EPSILON||1e-14,B.splineCurveMonotone=function(t){for(var e,n,i,r,a,o,s,l,u,d=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),c=d.length,h=0;h<c;++h){(e=d[h]).model.skip||(i=0<h?d[h-1]:null,(r=h<c-1?d[h+1]:null)&&!r.model.skip&&(n=r.model.x-e.model.x,e.deltaK=0!=n?(r.model.y-e.model.y)/n:0),!i||i.model.skip?e.mK=e.deltaK:!r||r.model.skip?e.mK=i.deltaK:this.sign(i.deltaK)!==this.sign(e.deltaK)?e.mK=0:e.mK=(i.deltaK+e.deltaK)/2)}for(h=0;h<c-1;++h)e=d[h],r=d[h+1],e.model.skip||r.model.skip||(B.almostEquals(e.deltaK,0,this.EPSILON)?e.mK=r.mK=0:(a=e.mK/e.deltaK,o=r.mK/e.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),e.mK=a*s*e.deltaK,r.mK=o*s*e.deltaK)));for(h=0;h<c;++h)(e=d[h]).model.skip||(i=0<h?d[h-1]:null,r=h<c-1?d[h+1]:null,i&&!i.model.skip&&(u=(e.model.x-i.model.x)/3,e.model.controlPointPreviousX=e.model.x-u,e.model.controlPointPreviousY=e.model.y-u*e.mK),r&&!r.model.skip&&(u=(r.model.x-e.model.x)/3,e.model.controlPointNextX=e.model.x+u,e.model.controlPointNextY=e.model.y+u*e.mK))},B.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},B.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},B.niceNum=function(t,e){var n=Math.floor(B.log10(t)),i=t/Math.pow(10,n),r=e?i<1.5?1:i<3?2:i<7?5:10:i<=1?1:i<=2?2:i<=5?5:10;return r*Math.pow(10,n)},B.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},B.getRelativePosition=function(t,e){var n=t.originalEvent||t,i=t.target||t.srcElement,r=i.getBoundingClientRect(),a=n.touches,o=a&&0<a.length?(f=a[0].clientX,a[0].clientY):(f=n.clientX,n.clientY),s=parseFloat(B.getStyle(i,"padding-left")),l=parseFloat(B.getStyle(i,"padding-top")),u=parseFloat(B.getStyle(i,"padding-right")),d=parseFloat(B.getStyle(i,"padding-bottom")),c=r.right-r.left-s-u,h=r.bottom-r.top-l-d,f=Math.round((f-r.left-s)/c*i.width/e.currentDevicePixelRatio);return{x:f,y:o=Math.round((o-r.top-l)/h*i.height/e.currentDevicePixelRatio)}},B.getConstraintWidth=function(t){return Ci(t,"max-width","clientWidth")},B.getConstraintHeight=function(t){return Ci(t,"max-height","clientHeight")},B._calculatePadding=function(t,e,n){return-1<(e=B.getStyle(t,e)).indexOf("%")?n*parseInt(e,10)/100:parseInt(e,10)},B._getParentNode=function(t){var e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e},B.getMaximumWidth=function(t){var e=B._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,i=n-B._calculatePadding(e,"padding-left",n)-B._calculatePadding(e,"padding-right",n),r=B.getConstraintWidth(t);return isNaN(r)?i:Math.min(i,r)},B.getMaximumHeight=function(t){var e=B._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,i=n-B._calculatePadding(e,"padding-top",n)-B._calculatePadding(e,"padding-bottom",n),r=B.getConstraintHeight(t);return isNaN(r)?i:Math.min(i,r)},B.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},B.retinaScale=function(t,e){var n,i,r,a=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;1!==a&&(n=t.canvas,i=t.height,r=t.width,n.height=i*a,n.width=r*a,t.ctx.scale(a,a),n.style.height||n.style.width||(n.style.height=i+"px",n.style.width=r+"px"))},B.fontString=function(t,e,n){return e+" "+t+"px "+n},B.longestText=function(t,e,n,i){var r=(i=i||{}).data=i.data||{},a=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},a=i.garbageCollect=[],i.font=e),t.font=e;for(var o,s,l,u,d=0,c=n.length,h=0;h<c;h++)if(null!=(l=n[h])&&!0!==B.isArray(l))d=B.measureText(t,r,a,d,l);else if(B.isArray(l))for(o=0,s=l.length;o<s;o++)null==(u=l[o])||B.isArray(u)||(d=B.measureText(t,r,a,d,u));var f=a.length/2;if(f>n.length){for(h=0;h<f;h++)delete r[a[h]];a.splice(0,f)}return d},B.measureText=function(t,e,n,i,r){var a=e[r];return a||(a=e[r]=t.measureText(r).width,n.push(r)),i<a&&(i=a),i},B.numberOfLabelLines=function(t){var e=1;return B.each(t,function(t){B.isArray(t)&&t.length>e&&(e=t.length)}),e},B.color=k?function(t){return t instanceof CanvasGradient&&(t=E.global.defaultColor),k(t)}:function(t){return console.error("Color.js not found!"),t},B.getHoverColor=function(t){return t instanceof CanvasPattern||t instanceof CanvasGradient?t:B.color(t).saturate(.5).darken(.1).rgbString()},Je._adapters=en,Je.Animation=J,Je.animationService=Q,Je.controllers=Xt,Je.DatasetController=rt,Je.defaults=E,Je.Element=X,Je.elements=kt,Je.Interaction=ie,Je.layouts=he,Je.platform=Ae,Je.plugins=Ie,Je.Scale=vn,Je.scaleService=Fe,Je.Ticks=nn,Je.Tooltip=Be,Je.helpers.each(ri,function(t,e){Je.scaleService.registerScaleType(e,t,t._defaults)}),xi)xi.hasOwnProperty(Ti)&&Je.plugins.register(xi[Ti]);Je.platform.initialize();var Pi=Je;return"undefined"!=typeof window&&(window.Chart=Je),(Je.Chart=Je).Legend=xi.legend._element,Je.Title=xi.title._element,Je.pluginService=Je.plugins,Je.PluginBase=Je.Element.extend({}),Je.canvasHelpers=Je.helpers.canvas,Je.layoutService=Je.layouts,Je.LinearScaleBase=kn,Je.helpers.each(["Bar","Bubble","Doughnut","Line","PolarArea","Radar","Scatter"],function(n){Je[n]=function(t,e){return new Je(t,Je.helpers.merge(e||{},{type:n.charAt(0).toLowerCase()+n.slice(1)}))}}),Pi},"object"==typeof n&&void 0!==e?e.exports=r(function(){try{return t("moment")}catch(t){}}()):"function"==typeof define&&define.amd?define(["require"],function(t){return r(function(){try{return t("moment")}catch(t){}}())}):(i=i||self).Chart=r(i.moment)},{moment:2}],2:[function(ei,ni,t){var e,n;e=this,n=function(){"use strict";var t,r;function f(){return t.apply(null,arguments)}function s(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function l(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function g(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function u(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(g(t,e))return;return 1}function a(t){return void 0===t}function d(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function o(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function c(t,e){for(var n=[],i=0;i<t.length;++i)n.push(e(t[i],i));return n}function h(t,e){for(var n in e)g(e,n)&&(t[n]=e[n]);return g(e,"toString")&&(t.toString=e.toString),g(e,"valueOf")&&(t.valueOf=e.valueOf),t}function m(t,e,n,i){return Te(t,e,n,i,!0).utc()}function p(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}function v(t){if(null==t._isValid){var e=p(t),n=r.call(e.parsedDateParts,function(t){return null!=t}),i=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidEra&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n);if(t._strict&&(i=i&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return i;t._isValid=i}return t._isValid}function y(t){var e=m(NaN);return null!=t?h(p(e),t):p(e).userInvalidated=!0,e}r=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,i=0;i<n;i++)if(i in e&&t.call(this,e[i],i,e))return!0;return!1};var b=f.momentProperties=[],e=!1;function _(t,e){var n,i,r;if(a(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),a(e._i)||(t._i=e._i),a(e._f)||(t._f=e._f),a(e._l)||(t._l=e._l),a(e._strict)||(t._strict=e._strict),a(e._tzm)||(t._tzm=e._tzm),a(e._isUTC)||(t._isUTC=e._isUTC),a(e._offset)||(t._offset=e._offset),a(e._pf)||(t._pf=p(e)),a(e._locale)||(t._locale=e._locale),0<b.length)for(n=0;n<b.length;n++)a(r=e[i=b[n]])||(t[i]=r);return t}function x(t){_(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===e&&(e=!0,f.updateOffset(this),e=!1)}function w(t){return t instanceof x||null!=t&&null!=t._isAMomentObject}function k(t){!1===f.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function n(r,a){var o=!0;return h(function(){if(null!=f.deprecationHandler&&f.deprecationHandler(null,r),o){for(var t,e,n=[],i=0;i<arguments.length;i++){if(t="","object"==typeof arguments[i]){for(e in t+="\n["+i+"] ",arguments[0])g(arguments[0],e)&&(t+=e+": "+arguments[0][e]+", ");t=t.slice(0,-2)}else t=arguments[i];n.push(t)}k(r+"\nArguments: "+Array.prototype.slice.call(n).join("")+"\n"+(new Error).stack),o=!1}return a.apply(this,arguments)},a)}var i,M={};function S(t,e){null!=f.deprecationHandler&&f.deprecationHandler(t,e),M[t]||(k(e),M[t]=!0)}function D(t){return"undefined"!=typeof Function&&t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function C(t,e){var n,i=h({},t);for(n in e)g(e,n)&&(l(t[n])&&l(e[n])?(i[n]={},h(i[n],t[n]),h(i[n],e[n])):null!=e[n]?i[n]=e[n]:delete i[n]);for(n in t)g(t,n)&&!g(e,n)&&l(t[n])&&(i[n]=h({},i[n]));return i}function T(t){null!=t&&this.set(t)}f.suppressDeprecationWarnings=!1,f.deprecationHandler=null,i=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)g(t,e)&&n.push(e);return n};function P(t,e,n){var i=""+Math.abs(t),r=e-i.length;return(0<=t?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}var O=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,A=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,I={},F={};function L(t,e,n,i){var r="string"==typeof i?function(){return this[i]()}:i;t&&(F[t]=r),e&&(F[e[0]]=function(){return P(r.apply(this,arguments),e[1],e[2])}),n&&(F[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),t)})}function N(t,e){return t.isValid()?(e=R(e,t.localeData()),I[e]=I[e]||function(i){for(var t,r=i.match(O),e=0,a=r.length;e<a;e++)F[r[e]]?r[e]=F[r[e]]:r[e]=(t=r[e]).match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"");return function(t){for(var e="",n=0;n<a;n++)e+=D(r[n])?r[n].call(t,i):r[n];return e}}(e),I[e](t)):t.localeData().invalidDate()}function R(t,e){var n=5;function i(t){return e.longDateFormat(t)||t}for(A.lastIndex=0;0<=n&&A.test(t);)t=t.replace(A,i),A.lastIndex=0,--n;return t}var Y={};function W(t,e){var n=t.toLowerCase();Y[n]=Y[n+"s"]=Y[e]=t}function E(t){return"string"==typeof t?Y[t]||Y[t.toLowerCase()]:void 0}function z(t){var e,n,i={};for(n in t)g(t,n)&&(e=E(n))&&(i[e]=t[n]);return i}var V={};function j(t,e){V[t]=e}function H(t){return t%4==0&&t%100!=0||t%400==0}function B(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function U(t){var e=+t,n=0;return 0!=e&&isFinite(e)&&(n=B(e)),n}function q(e,n){return function(t){return null!=t?(Z(this,e,t),f.updateOffset(this,n),this):G(this,e)}}function G(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function Z(t,e,n){t.isValid()&&!isNaN(n)&&("FullYear"===e&&H(t.year())&&1===t.month()&&29===t.date()?(n=U(n),t._d["set"+(t._isUTC?"UTC":"")+e](n,t.month(),Tt(n,t.month()))):t._d["set"+(t._isUTC?"UTC":"")+e](n))}var $,X=/\d/,K=/\d\d/,J=/\d{3}/,Q=/\d{4}/,tt=/[+-]?\d{6}/,et=/\d\d?/,nt=/\d\d\d\d?/,it=/\d\d\d\d\d\d?/,rt=/\d{1,3}/,at=/\d{1,4}/,ot=/[+-]?\d{1,6}/,st=/\d+/,lt=/[+-]?\d+/,ut=/Z|[+-]\d\d:?\d\d/gi,dt=/Z|[+-]\d\d(?::?\d\d)?/gi,ct=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function ht(t,n,i){$[t]=D(n)?n:function(t,e){return t&&i?i:n}}function ft(t,e){return g($,t)?$[t](e._strict,e._locale):new RegExp(gt(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,r){return e||n||i||r})))}function gt(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}$={};var mt={};function pt(t,n){var e,i=n;for("string"==typeof t&&(t=[t]),d(n)&&(i=function(t,e){e[n]=U(t)}),e=0;e<t.length;e++)mt[t[e]]=i}function vt(t,r){pt(t,function(t,e,n,i){n._w=n._w||{},r(t,n._w,n,i)})}var yt,bt=0,_t=1,xt=2,wt=3,kt=4,Mt=5,St=6,Dt=7,Ct=8;function Tt(t,e){if(isNaN(t)||isNaN(e))return NaN;var n,i=(e%(n=12)+n)%n;return t+=(e-i)/12,1==i?H(t)?29:28:31-i%7%2}yt=Array.prototype.indexOf?Array.prototype.indexOf:function(t){for(var e=0;e<this.length;++e)if(this[e]===t)return e;return-1},L("M",["MM",2],"Mo",function(){return this.month()+1}),L("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),L("MMMM",0,0,function(t){return this.localeData().months(this,t)}),W("month","M"),j("month",8),ht("M",et),ht("MM",et,K),ht("MMM",function(t,e){return e.monthsShortRegex(t)}),ht("MMMM",function(t,e){return e.monthsRegex(t)}),pt(["M","MM"],function(t,e){e[_t]=U(t)-1}),pt(["MMM","MMMM"],function(t,e,n,i){var r=n._locale.monthsParse(t,i,n._strict);null!=r?e[_t]=r:p(n).invalidMonth=t});var Pt="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ot="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),At=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,It=ct,Ft=ct;function Lt(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=U(e);else if(!d(e=t.localeData().monthsParse(e)))return t;return n=Math.min(t.date(),Tt(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function Nt(t){return null!=t?(Lt(this,t),f.updateOffset(this,!0),this):G(this,"Month")}function Rt(){function t(t,e){return e.length-t.length}for(var e,n=[],i=[],r=[],a=0;a<12;a++)e=m([2e3,a]),n.push(this.monthsShort(e,"")),i.push(this.months(e,"")),r.push(this.months(e,"")),r.push(this.monthsShort(e,""));for(n.sort(t),i.sort(t),r.sort(t),a=0;a<12;a++)n[a]=gt(n[a]),i[a]=gt(i[a]);for(a=0;a<24;a++)r[a]=gt(r[a]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Yt(t){return H(t)?366:365}L("Y",0,0,function(){var t=this.year();return t<=9999?P(t,4):"+"+t}),L(0,["YY",2],0,function(){return this.year()%100}),L(0,["YYYY",4],0,"year"),L(0,["YYYYY",5],0,"year"),L(0,["YYYYYY",6,!0],0,"year"),W("year","y"),j("year",1),ht("Y",lt),ht("YY",et,K),ht("YYYY",at,Q),ht("YYYYY",ot,tt),ht("YYYYYY",ot,tt),pt(["YYYYY","YYYYYY"],bt),pt("YYYY",function(t,e){e[bt]=2===t.length?f.parseTwoDigitYear(t):U(t)}),pt("YY",function(t,e){e[bt]=f.parseTwoDigitYear(t)}),pt("Y",function(t,e){e[bt]=parseInt(t,10)}),f.parseTwoDigitYear=function(t){return U(t)+(68<U(t)?1900:2e3)};var Wt=q("FullYear",!0);function Et(t){var e,n;return t<100&&0<=t?((n=Array.prototype.slice.call(arguments))[0]=t+400,e=new Date(Date.UTC.apply(null,n)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)):e=new Date(Date.UTC.apply(null,arguments)),e}function zt(t,e,n){var i=7+e-n;return i-(7+Et(t,0,i).getUTCDay()-e)%7-1}function Vt(t,e,n,i,r){var a,o=1+7*(e-1)+(7+n-i)%7+zt(t,i,r),s=o<=0?Yt(a=t-1)+o:o>Yt(t)?(a=t+1,o-Yt(t)):(a=t,o);return{year:a,dayOfYear:s}}function jt(t,e,n){var i,r,a=zt(t.year(),e,n),o=Math.floor((t.dayOfYear()-a-1)/7)+1;return o<1?i=o+Ht(r=t.year()-1,e,n):o>Ht(t.year(),e,n)?(i=o-Ht(t.year(),e,n),r=t.year()+1):(r=t.year(),i=o),{week:i,year:r}}function Ht(t,e,n){var i=zt(t,e,n),r=zt(t+1,e,n);return(Yt(t)-i+r)/7}L("w",["ww",2],"wo","week"),L("W",["WW",2],"Wo","isoWeek"),W("week","w"),W("isoWeek","W"),j("week",5),j("isoWeek",5),ht("w",et),ht("ww",et,K),ht("W",et),ht("WW",et,K),vt(["w","ww","W","WW"],function(t,e,n,i){e[i.substr(0,1)]=U(t)});function Bt(t,e){return t.slice(e,7).concat(t.slice(0,e))}L("d",0,"do","day"),L("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),L("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),L("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),L("e",0,0,"weekday"),L("E",0,0,"isoWeekday"),W("day","d"),W("weekday","e"),W("isoWeekday","E"),j("day",11),j("weekday",11),j("isoWeekday",11),ht("d",et),ht("e",et),ht("E",et),ht("dd",function(t,e){return e.weekdaysMinRegex(t)}),ht("ddd",function(t,e){return e.weekdaysShortRegex(t)}),ht("dddd",function(t,e){return e.weekdaysRegex(t)}),vt(["dd","ddd","dddd"],function(t,e,n,i){var r=n._locale.weekdaysParse(t,i,n._strict);null!=r?e.d=r:p(n).invalidWeekday=t}),vt(["d","e","E"],function(t,e,n,i){e[i]=U(t)});var Ut="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),qt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Gt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Zt=ct,$t=ct,Xt=ct;function Kt(){function t(t,e){return e.length-t.length}for(var e,n,i,r,a=[],o=[],s=[],l=[],u=0;u<7;u++)e=m([2e3,1]).day(u),n=gt(this.weekdaysMin(e,"")),i=gt(this.weekdaysShort(e,"")),r=gt(this.weekdays(e,"")),a.push(n),o.push(i),s.push(r),l.push(n),l.push(i),l.push(r);a.sort(t),o.sort(t),s.sort(t),l.sort(t),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Jt(){return this.hours()%12||12}function Qt(t,e){L(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function te(t,e){return e._meridiemParse}L("H",["HH",2],0,"hour"),L("h",["hh",2],0,Jt),L("k",["kk",2],0,function(){return this.hours()||24}),L("hmm",0,0,function(){return""+Jt.apply(this)+P(this.minutes(),2)}),L("hmmss",0,0,function(){return""+Jt.apply(this)+P(this.minutes(),2)+P(this.seconds(),2)}),L("Hmm",0,0,function(){return""+this.hours()+P(this.minutes(),2)}),L("Hmmss",0,0,function(){return""+this.hours()+P(this.minutes(),2)+P(this.seconds(),2)}),Qt("a",!0),Qt("A",!1),W("hour","h"),j("hour",13),ht("a",te),ht("A",te),ht("H",et),ht("h",et),ht("k",et),ht("HH",et,K),ht("hh",et,K),ht("kk",et,K),ht("hmm",nt),ht("hmmss",it),ht("Hmm",nt),ht("Hmmss",it),pt(["H","HH"],wt),pt(["k","kk"],function(t,e,n){var i=U(t);e[wt]=24===i?0:i}),pt(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),pt(["h","hh"],function(t,e,n){e[wt]=U(t),p(n).bigHour=!0}),pt("hmm",function(t,e,n){var i=t.length-2;e[wt]=U(t.substr(0,i)),e[kt]=U(t.substr(i)),p(n).bigHour=!0}),pt("hmmss",function(t,e,n){var i=t.length-4,r=t.length-2;e[wt]=U(t.substr(0,i)),e[kt]=U(t.substr(i,2)),e[Mt]=U(t.substr(r)),p(n).bigHour=!0}),pt("Hmm",function(t,e,n){var i=t.length-2;e[wt]=U(t.substr(0,i)),e[kt]=U(t.substr(i))}),pt("Hmmss",function(t,e,n){var i=t.length-4,r=t.length-2;e[wt]=U(t.substr(0,i)),e[kt]=U(t.substr(i,2)),e[Mt]=U(t.substr(r))});var ee=q("Hours",!0);var ne,ie={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Pt,monthsShort:Ot,week:{dow:0,doy:6},weekdays:Ut,weekdaysMin:Gt,weekdaysShort:qt,meridiemParse:/[ap]\.?m?\.?/i},re={},ae={};function oe(t){return t?t.toLowerCase().replace("_","-"):t}function se(t){for(var e,n,i,r,a=0;a<t.length;){for(e=(r=oe(t[a]).split("-")).length,n=(n=oe(t[a+1]))?n.split("-"):null;0<e;){if(i=le(r.slice(0,e).join("-")))return i;if(n&&n.length>=e&&function(t,e){for(var n=Math.min(t.length,e.length),i=0;i<n;i+=1)if(t[i]!==e[i])return i;return n}(r,n)>=e-1)break;e--}a++}return ne}function le(e){var t=null;if(void 0===re[e]&&void 0!==ni&&ni&&ni.exports)try{t=ne._abbr,ei("./locale/"+e),ue(t)}catch(t){re[e]=null}return re[e]}function ue(t,e){var n;return t&&((n=a(e)?ce(t):de(t,e))?ne=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),ne._abbr}function de(t,e){if(null===e)return delete re[t],null;var n,i=ie;if(e.abbr=t,null!=re[t])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=re[t]._config;else if(null!=e.parentLocale)if(null!=re[e.parentLocale])i=re[e.parentLocale]._config;else{if(null==(n=le(e.parentLocale)))return ae[e.parentLocale]||(ae[e.parentLocale]=[]),ae[e.parentLocale].push({name:t,config:e}),null;i=n._config}return re[t]=new T(C(i,e)),ae[t]&&ae[t].forEach(function(t){de(t.name,t.config)}),ue(t),re[t]}function ce(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return ne;if(!s(t)){if(e=le(t))return e;t=[t]}return se(t)}function he(t){var e,n=t._a;return n&&-2===p(t).overflow&&(e=n[_t]<0||11<n[_t]?_t:n[xt]<1||n[xt]>Tt(n[bt],n[_t])?xt:n[wt]<0||24<n[wt]||24===n[wt]&&(0!==n[kt]||0!==n[Mt]||0!==n[St])?wt:n[kt]<0||59<n[kt]?kt:n[Mt]<0||59<n[Mt]?Mt:n[St]<0||999<n[St]?St:-1,p(t)._overflowDayOfYear&&(e<bt||xt<e)&&(e=xt),p(t)._overflowWeeks&&-1===e&&(e=Dt),p(t)._overflowWeekday&&-1===e&&(e=Ct),p(t).overflow=e),t}var fe=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ge=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,me=/Z|[+-]\d\d(?::?\d\d)?/,pe=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],ve=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ye=/^\/?Date\((-?\d+)/i,be=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,_e={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function xe(t){var e,n,i,r,a,o,s=t._i,l=fe.exec(s)||ge.exec(s);if(l){for(p(t).iso=!0,e=0,n=pe.length;e<n;e++)if(pe[e][1].exec(l[1])){r=pe[e][0],i=!1!==pe[e][2];break}if(null==r)return void(t._isValid=!1);if(l[3]){for(e=0,n=ve.length;e<n;e++)if(ve[e][1].exec(l[3])){a=(l[2]||" ")+ve[e][0];break}if(null==a)return void(t._isValid=!1)}if(!i&&null!=a)return void(t._isValid=!1);if(l[4]){if(!me.exec(l[4]))return void(t._isValid=!1);o="Z"}t._f=r+(a||"")+(o||""),De(t)}else t._isValid=!1}function we(t,e,n,i,r,a){var o=[function(t){var e=parseInt(t,10);{if(e<=49)return 2e3+e;if(e<=999)return 1900+e}return e}(t),Ot.indexOf(e),parseInt(n,10),parseInt(i,10),parseInt(r,10)];return a&&o.push(parseInt(a,10)),o}function ke(t){var e,n,i,r,a=be.exec(t._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(a){if(e=we(a[4],a[3],a[2],a[5],a[6],a[7]),n=a[1],i=e,r=t,n&&qt.indexOf(n)!==new Date(i[0],i[1],i[2]).getDay()&&(p(r).weekdayMismatch=!0,!void(r._isValid=!1)))return;t._a=e,t._tzm=function(t,e,n){if(t)return _e[t];if(e)return 0;var i=parseInt(n,10),r=i%100;return 60*((i-r)/100)+r}(a[8],a[9],a[10]),t._d=Et.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),p(t).rfc2822=!0}else t._isValid=!1}function Me(t,e,n){return null!=t?t:null!=e?e:n}function Se(t){var e,n,i,r,a,o,s,l=[];if(!t._d){for(o=t,s=new Date(f.now()),i=o._useUTC?[s.getUTCFullYear(),s.getUTCMonth(),s.getUTCDate()]:[s.getFullYear(),s.getMonth(),s.getDate()],t._w&&null==t._a[xt]&&null==t._a[_t]&&function(t){var e,n,i,r,a,o,s,l,u;null!=(e=t._w).GG||null!=e.W||null!=e.E?(a=1,o=4,n=Me(e.GG,t._a[bt],jt(Pe(),1,4).year),i=Me(e.W,1),((r=Me(e.E,1))<1||7<r)&&(l=!0)):(a=t._locale._week.dow,o=t._locale._week.doy,u=jt(Pe(),a,o),n=Me(e.gg,t._a[bt],u.year),i=Me(e.w,u.week),null!=e.d?((r=e.d)<0||6<r)&&(l=!0):null!=e.e?(r=e.e+a,(e.e<0||6<e.e)&&(l=!0)):r=a);i<1||i>Ht(n,a,o)?p(t)._overflowWeeks=!0:null!=l?p(t)._overflowWeekday=!0:(s=Vt(n,i,r,a,o),t._a[bt]=s.year,t._dayOfYear=s.dayOfYear)}(t),null!=t._dayOfYear&&(a=Me(t._a[bt],i[bt]),(t._dayOfYear>Yt(a)||0===t._dayOfYear)&&(p(t)._overflowDayOfYear=!0),n=Et(a,0,t._dayOfYear),t._a[_t]=n.getUTCMonth(),t._a[xt]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=l[e]=i[e];for(;e<7;e++)t._a[e]=l[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[wt]&&0===t._a[kt]&&0===t._a[Mt]&&0===t._a[St]&&(t._nextDay=!0,t._a[wt]=0),t._d=(t._useUTC?Et:function(t,e,n,i,r,a,o){var s;return t<100&&0<=t?(s=new Date(t+400,e,n,i,r,a,o),isFinite(s.getFullYear())&&s.setFullYear(t)):s=new Date(t,e,n,i,r,a,o),s}).apply(null,l),r=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[wt]=24),t._w&&void 0!==t._w.d&&t._w.d!==r&&(p(t).weekdayMismatch=!0)}}function De(t){if(t._f!==f.ISO_8601)if(t._f!==f.RFC_2822){t._a=[],p(t).empty=!0;for(var e,n,i,r,a,o,s,l=""+t._i,u=l.length,d=0,c=R(t._f,t._locale).match(O)||[],h=0;h<c.length;h++)n=c[h],(e=(l.match(ft(n,t))||[])[0])&&(0<(i=l.substr(0,l.indexOf(e))).length&&p(t).unusedInput.push(i),l=l.slice(l.indexOf(e)+e.length),d+=e.length),F[n]?(e?p(t).empty=!1:p(t).unusedTokens.push(n),a=n,s=t,null!=(o=e)&&g(mt,a)&&mt[a](o,s._a,s,a)):t._strict&&!e&&p(t).unusedTokens.push(n);p(t).charsLeftOver=u-d,0<l.length&&p(t).unusedInput.push(l),t._a[wt]<=12&&!0===p(t).bigHour&&0<t._a[wt]&&(p(t).bigHour=void 0),p(t).parsedDateParts=t._a.slice(0),p(t).meridiem=t._meridiem,t._a[wt]=function(t,e,n){var i;if(null==n)return e;return null!=t.meridiemHour?t.meridiemHour(e,n):(null!=t.isPM&&((i=t.isPM(n))&&e<12&&(e+=12),i||12!==e||(e=0)),e)}(t._locale,t._a[wt],t._meridiem),null!==(r=p(t).era)&&(t._a[bt]=t._locale.erasConvertYear(r,t._a[bt])),Se(t),he(t)}else ke(t);else xe(t)}function Ce(t){var e,n,i=t._i,r=t._f;return t._locale=t._locale||ce(t._l),null===i||void 0===r&&""===i?y({nullInput:!0}):("string"==typeof i&&(t._i=i=t._locale.preparse(i)),w(i)?new x(he(i)):(o(i)?t._d=i:s(r)?function(t){var e,n,i,r,a,o,s=!1;if(0===t._f.length)return p(t).invalidFormat=!0,t._d=new Date(NaN);for(r=0;r<t._f.length;r++)a=0,o=!1,e=_({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[r],De(e),v(e)&&(o=!0),a+=p(e).charsLeftOver,a+=10*p(e).unusedTokens.length,p(e).score=a,s?a<i&&(i=a,n=e):(null==i||a<i||o)&&(i=a,n=e,o&&(s=!0));h(t,n||e)}(t):r?De(t):a(n=(e=t)._i)?e._d=new Date(f.now()):o(n)?e._d=new Date(n.valueOf()):"string"==typeof n?function(t){var e=ye.exec(t._i);null===e?(xe(t),!1===t._isValid&&(delete t._isValid,ke(t),!1===t._isValid&&(delete t._isValid,t._strict?t._isValid=!1:f.createFromInputFallback(t)))):t._d=new Date(+e[1])}(e):s(n)?(e._a=c(n.slice(0),function(t){return parseInt(t,10)}),Se(e)):l(n)?function(t){var e,n;t._d||(n=void 0===(e=z(t._i)).day?e.date:e.day,t._a=c([e.year,e.month,n,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),Se(t))}(e):d(n)?e._d=new Date(n):f.createFromInputFallback(e),v(t)||(t._d=null),t))}function Te(t,e,n,i,r){var a,o={};return!0!==e&&!1!==e||(i=e,e=void 0),!0!==n&&!1!==n||(i=n,n=void 0),(l(t)&&u(t)||s(t)&&0===t.length)&&(t=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=r,o._l=n,o._i=t,o._f=e,o._strict=i,(a=new x(he(Ce(o))))._nextDay&&(a.add(1,"d"),a._nextDay=void 0),a}function Pe(t,e,n,i){return Te(t,e,n,i,!1)}f.createFromInputFallback=n("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),f.ISO_8601=function(){},f.RFC_2822=function(){};var Oe=n("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pe.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:y()}),Ae=n("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pe.apply(null,arguments);return this.isValid()&&t.isValid()?this<t?this:t:y()});function Ie(t,e){var n,i;if(1===e.length&&s(e[0])&&(e=e[0]),!e.length)return Pe();for(n=e[0],i=1;i<e.length;++i)e[i].isValid()&&!e[i][t](n)||(n=e[i]);return n}var Fe=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Le(t){var e=z(t),n=e.year||0,i=e.quarter||0,r=e.month||0,a=e.week||e.isoWeek||0,o=e.day||0,s=e.hour||0,l=e.minute||0,u=e.second||0,d=e.millisecond||0;this._isValid=function(t){var e,n,i=!1;for(e in t)if(g(t,e)&&(-1===yt.call(Fe,e)||null!=t[e]&&isNaN(t[e])))return!1;for(n=0;n<Fe.length;++n)if(t[Fe[n]]){if(i)return!1;parseFloat(t[Fe[n]])!==U(t[Fe[n]])&&(i=!0)}return!0}(e),this._milliseconds=+d+1e3*u+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+r+3*i+12*n,this._data={},this._locale=ce(),this._bubble()}function Ne(t){return t instanceof Le}function Re(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function Ye(t,n){L(t,0,0,function(){var t=this.utcOffset(),e="+";return t<0&&(t=-t,e="-"),e+P(~~(t/60),2)+n+P(~~t%60,2)})}Ye("Z",":"),Ye("ZZ",""),ht("Z",dt),ht("ZZ",dt),pt(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Ee(dt,t)});var We=/([\+\-]|\d\d)/gi;function Ee(t,e){var n,i,r=(e||"").match(t);return null===r?null:0===(i=60*(n=((r[r.length-1]||[])+"").match(We)||["-",0,0])[1]+U(n[2]))?0:"+"===n[0]?i:-i}function ze(t,e){var n,i;return e._isUTC?(n=e.clone(),i=(w(t)||o(t)?t.valueOf():Pe(t).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+i),f.updateOffset(n,!1),n):Pe(t).local()}function Ve(t){return-Math.round(t._d.getTimezoneOffset())}function je(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}f.updateOffset=function(){};var He=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Be=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ue(t,e){var n,i,r,a=t,o=null;return Ne(t)?a={ms:t._milliseconds,d:t._days,M:t._months}:d(t)||!isNaN(+t)?(a={},e?a[e]=+t:a.milliseconds=+t):(o=He.exec(t))?(n="-"===o[1]?-1:1,a={y:0,d:U(o[xt])*n,h:U(o[wt])*n,m:U(o[kt])*n,s:U(o[Mt])*n,ms:U(Re(1e3*o[St]))*n}):(o=Be.exec(t))?(n="-"===o[1]?-1:1,a={y:qe(o[2],n),M:qe(o[3],n),w:qe(o[4],n),d:qe(o[5],n),h:qe(o[6],n),m:qe(o[7],n),s:qe(o[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(r=function(t,e){var n;if(!t.isValid()||!e.isValid())return{milliseconds:0,months:0};e=ze(e,t),t.isBefore(e)?n=Ge(t,e):((n=Ge(e,t)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(Pe(a.from),Pe(a.to)),(a={}).ms=r.milliseconds,a.M=r.months),i=new Le(a),Ne(t)&&g(t,"_locale")&&(i._locale=t._locale),Ne(t)&&g(t,"_isValid")&&(i._isValid=t._isValid),i}function qe(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Ge(t,e){var n={};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=e-t.clone().add(n.months,"M"),n}function Ze(i,r){return function(t,e){var n;return null===e||isNaN(+e)||(S(r,"moment()."+r+"(period, number) is deprecated. Please use moment()."+r+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),n=t,t=e,e=n),$e(this,Ue(t,e),i),this}}function $e(t,e,n,i){var r=e._milliseconds,a=Re(e._days),o=Re(e._months);t.isValid()&&(i=null==i||i,o&&Lt(t,G(t,"Month")+o*n),a&&Z(t,"Date",G(t,"Date")+a*n),r&&t._d.setTime(t._d.valueOf()+r*n),i&&f.updateOffset(t,a||o))}Ue.fn=Le.prototype,Ue.invalid=function(){return Ue(NaN)};var Xe=Ze(1,"add"),Ke=Ze(-1,"subtract");function Je(t){return"string"==typeof t||t instanceof String}function Qe(t){return w(t)||o(t)||Je(t)||d(t)||function(e){var t=s(e),n=!1;t&&(n=0===e.filter(function(t){return!d(t)&&Je(e)}).length);return t&&n}(t)||function(t){var e,n,i=l(t)&&!u(t),r=!1,a=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(e=0;e<a.length;e+=1)n=a[e],r=r||g(t,n);return i&&r}(t)||null==t}function tn(t,e){if(t.date()<e.date())return-tn(e,t);var n=12*(e.year()-t.year())+(e.month()-t.month()),i=t.clone().add(n,"months"),r=e-i<0?(e-i)/(i-t.clone().add(n-1,"months")):(e-i)/(t.clone().add(1+n,"months")-i);return-(n+r)||0}function en(t){var e;return void 0===t?this._locale._abbr:(null!=(e=ce(t))&&(this._locale=e),this)}f.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",f.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=n("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});function rn(){return this._locale}var an=126227808e5;function on(t,e){return(t%e+e)%e}function sn(t,e,n){return t<100&&0<=t?new Date(t+400,e,n)-an:new Date(t,e,n).valueOf()}function ln(t,e,n){return t<100&&0<=t?Date.UTC(t+400,e,n)-an:Date.UTC(t,e,n)}function un(t,e){return e.erasAbbrRegex(t)}function dn(){for(var t=[],e=[],n=[],i=[],r=this.eras(),a=0,o=r.length;a<o;++a)e.push(gt(r[a].name)),t.push(gt(r[a].abbr)),n.push(gt(r[a].narrow)),i.push(gt(r[a].name)),i.push(gt(r[a].abbr)),i.push(gt(r[a].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+e.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+t.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+n.join("|")+")","i")}function cn(t,e){L(0,[t,t.length],0,e)}function hn(t,e,n,i,r){var a;return null==t?jt(this,i,r).year:((a=Ht(t,i,r))<e&&(e=a),function(t,e,n,i,r){var a=Vt(t,e,n,i,r),o=Et(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,t,e,n,i,r))}L("N",0,0,"eraAbbr"),L("NN",0,0,"eraAbbr"),L("NNN",0,0,"eraAbbr"),L("NNNN",0,0,"eraName"),L("NNNNN",0,0,"eraNarrow"),L("y",["y",1],"yo","eraYear"),L("y",["yy",2],0,"eraYear"),L("y",["yyy",3],0,"eraYear"),L("y",["yyyy",4],0,"eraYear"),ht("N",un),ht("NN",un),ht("NNN",un),ht("NNNN",function(t,e){return e.erasNameRegex(t)}),ht("NNNNN",function(t,e){return e.erasNarrowRegex(t)}),pt(["N","NN","NNN","NNNN","NNNNN"],function(t,e,n,i){var r=n._locale.erasParse(t,i,n._strict);r?p(n).era=r:p(n).invalidEra=t}),ht("y",st),ht("yy",st),ht("yyy",st),ht("yyyy",st),ht("yo",function(t,e){return e._eraYearOrdinalRegex||st}),pt(["y","yy","yyy","yyyy"],bt),pt(["yo"],function(t,e,n,i){var r;n._locale._eraYearOrdinalRegex&&(r=t.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?e[bt]=n._locale.eraYearOrdinalParse(t,r):e[bt]=parseInt(t,10)}),L(0,["gg",2],0,function(){return this.weekYear()%100}),L(0,["GG",2],0,function(){return this.isoWeekYear()%100}),cn("gggg","weekYear"),cn("ggggg","weekYear"),cn("GGGG","isoWeekYear"),cn("GGGGG","isoWeekYear"),W("weekYear","gg"),W("isoWeekYear","GG"),j("weekYear",1),j("isoWeekYear",1),ht("G",lt),ht("g",lt),ht("GG",et,K),ht("gg",et,K),ht("GGGG",at,Q),ht("gggg",at,Q),ht("GGGGG",ot,tt),ht("ggggg",ot,tt),vt(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,i){e[i.substr(0,2)]=U(t)}),vt(["gg","GG"],function(t,e,n,i){e[i]=f.parseTwoDigitYear(t)}),L("Q",0,"Qo","quarter"),W("quarter","Q"),j("quarter",7),ht("Q",X),pt("Q",function(t,e){e[_t]=3*(U(t)-1)}),L("D",["DD",2],"Do","date"),W("date","D"),j("date",9),ht("D",et),ht("DD",et,K),ht("Do",function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient}),pt(["D","DD"],xt),pt("Do",function(t,e){e[xt]=U(t.match(et)[0])});var fn=q("Date",!0);L("DDD",["DDDD",3],"DDDo","dayOfYear"),W("dayOfYear","DDD"),j("dayOfYear",4),ht("DDD",rt),ht("DDDD",J),pt(["DDD","DDDD"],function(t,e,n){n._dayOfYear=U(t)}),L("m",["mm",2],0,"minute"),W("minute","m"),j("minute",14),ht("m",et),ht("mm",et,K),pt(["m","mm"],kt);var gn=q("Minutes",!1);L("s",["ss",2],0,"second"),W("second","s"),j("second",15),ht("s",et),ht("ss",et,K),pt(["s","ss"],Mt);var mn,pn,vn=q("Seconds",!1);for(L("S",0,0,function(){return~~(this.millisecond()/100)}),L(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),L(0,["SSS",3],0,"millisecond"),L(0,["SSSS",4],0,function(){return 10*this.millisecond()}),L(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),L(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),L(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),L(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),L(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),W("millisecond","ms"),j("millisecond",16),ht("S",rt,X),ht("SS",rt,K),ht("SSS",rt,J),mn="SSSS";mn.length<=9;mn+="S")ht(mn,st);function yn(t,e){e[St]=U(1e3*("0."+t))}for(mn="S";mn.length<=9;mn+="S")pt(mn,yn);pn=q("Milliseconds",!1),L("z",0,0,"zoneAbbr"),L("zz",0,0,"zoneName");var bn=x.prototype;function _n(t){return t}bn.add=Xe,bn.calendar=function(t,e){1===arguments.length&&(arguments[0]?Qe(arguments[0])?(t=arguments[0],e=void 0):function(t){for(var e=l(t)&&!u(t),n=!1,i=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"],r=0;r<i.length;r+=1)n=n||g(t,i[r]);return e&&n}(arguments[0])&&(e=arguments[0],t=void 0):e=t=void 0);var n=t||Pe(),i=ze(n,this).startOf("day"),r=f.calendarFormat(this,i)||"sameElse",a=e&&(D(e[r])?e[r].call(this,n):e[r]);return this.format(a||this.localeData().calendar(r,this,Pe(n)))},bn.clone=function(){return new x(this)},bn.diff=function(t,e,n){var i,r,a;if(!this.isValid())return NaN;if(!(i=ze(t,this)).isValid())return NaN;switch(r=6e4*(i.utcOffset()-this.utcOffset()),e=E(e)){case"year":a=tn(this,i)/12;break;case"month":a=tn(this,i);break;case"quarter":a=tn(this,i)/3;break;case"second":a=(this-i)/1e3;break;case"minute":a=(this-i)/6e4;break;case"hour":a=(this-i)/36e5;break;case"day":a=(this-i-r)/864e5;break;case"week":a=(this-i-r)/6048e5;break;default:a=this-i}return n?a:B(a)},bn.endOf=function(t){var e,n;if(void 0===(t=E(t))||"millisecond"===t||!this.isValid())return this;switch(n=this._isUTC?ln:sn,t){case"year":e=n(this.year()+1,0,1)-1;break;case"quarter":e=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=n(this.year(),this.month()+1,1)-1;break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=36e5-on(e+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":e=this._d.valueOf(),e+=6e4-on(e,6e4)-1;break;case"second":e=this._d.valueOf(),e+=1e3-on(e,1e3)-1}return this._d.setTime(e),f.updateOffset(this,!0),this},bn.format=function(t){t=t||(this.isUtc()?f.defaultFormatUtc:f.defaultFormat);var e=N(this,t);return this.localeData().postformat(e)},bn.from=function(t,e){return this.isValid()&&(w(t)&&t.isValid()||Pe(t).isValid())?Ue({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},bn.fromNow=function(t){return this.from(Pe(),t)},bn.to=function(t,e){return this.isValid()&&(w(t)&&t.isValid()||Pe(t).isValid())?Ue({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},bn.toNow=function(t){return this.to(Pe(),t)},bn.get=function(t){return D(this[t=E(t)])?this[t]():this},bn.invalidAt=function(){return p(this).overflow},bn.isAfter=function(t,e){var n=w(t)?t:Pe(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=E(e)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},bn.isBefore=function(t,e){var n=w(t)?t:Pe(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=E(e)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},bn.isBetween=function(t,e,n,i){var r=w(t)?t:Pe(t),a=w(e)?e:Pe(e);return!!(this.isValid()&&r.isValid()&&a.isValid())&&(("("===(i=i||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===i[1]?this.isBefore(a,n):!this.isAfter(a,n)))},bn.isSame=function(t,e){var n,i=w(t)?t:Pe(t);return!(!this.isValid()||!i.isValid())&&("millisecond"===(e=E(e)||"millisecond")?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},bn.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},bn.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},bn.isValid=function(){return v(this)},bn.lang=nn,bn.locale=en,bn.localeData=rn,bn.max=Ae,bn.min=Oe,bn.parsingFlags=function(){return h({},p(this))},bn.set=function(t,e){if("object"==typeof t)for(var n=function(t){var e,n=[];for(e in t)g(t,e)&&n.push({unit:e,priority:V[e]});return n.sort(function(t,e){return t.priority-e.priority}),n}(t=z(t)),i=0;i<n.length;i++)this[n[i].unit](t[n[i].unit]);else if(D(this[t=E(t)]))return this[t](e);return this},bn.startOf=function(t){var e,n;if(void 0===(t=E(t))||"millisecond"===t||!this.isValid())return this;switch(n=this._isUTC?ln:sn,t){case"year":e=n(this.year(),0,1);break;case"quarter":e=n(this.year(),this.month()-this.month()%3,1);break;case"month":e=n(this.year(),this.month(),1);break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=n(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=on(e+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":e=this._d.valueOf(),e-=on(e,6e4);break;case"second":e=this._d.valueOf(),e-=on(e,1e3)}return this._d.setTime(e),f.updateOffset(this,!0),this},bn.subtract=Ke,bn.toArray=function(){return[this.year(),this.month(),this.date(),this.hour(),this.minute(),this.second(),this.millisecond()]},bn.toObject=function(){return{years:this.year(),months:this.month(),date:this.date(),hours:this.hours(),minutes:this.minutes(),seconds:this.seconds(),milliseconds:this.milliseconds()}},bn.toDate=function(){return new Date(this.valueOf())},bn.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,n=e?this.clone().utc():this;return n.year()<0||9999<n.year()?N(n,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):D(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",N(n,"Z")):N(n,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},bn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t,e,n,i="moment",r="";return this.isLocal()||(i=0===this.utcOffset()?"moment.utc":"moment.parseZone",r="Z"),t="["+i+'("]',e=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=r+'[")]',this.format(t+e+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(bn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),bn.toJSON=function(){return this.isValid()?this.toISOString():null},bn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},bn.unix=function(){return Math.floor(this.valueOf()/1e3)},bn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},bn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},bn.eraName=function(){for(var t,e=this.localeData().eras(),n=0,i=e.length;n<i;++n){if(t=this.clone().startOf("day").valueOf(),e[n].since<=t&&t<=e[n].until)return e[n].name;if(e[n].until<=t&&t<=e[n].since)return e[n].name}return""},bn.eraNarrow=function(){for(var t,e=this.localeData().eras(),n=0,i=e.length;n<i;++n){if(t=this.clone().startOf("day").valueOf(),e[n].since<=t&&t<=e[n].until)return e[n].narrow;if(e[n].until<=t&&t<=e[n].since)return e[n].narrow}return""},bn.eraAbbr=function(){for(var t,e=this.localeData().eras(),n=0,i=e.length;n<i;++n){if(t=this.clone().startOf("day").valueOf(),e[n].since<=t&&t<=e[n].until)return e[n].abbr;if(e[n].until<=t&&t<=e[n].since)return e[n].abbr}return""},bn.eraYear=function(){for(var t,e,n=this.localeData().eras(),i=0,r=n.length;i<r;++i)if(t=n[i].since<=n[i].until?1:-1,e=this.clone().startOf("day").valueOf(),n[i].since<=e&&e<=n[i].until||n[i].until<=e&&e<=n[i].since)return(this.year()-f(n[i].since).year())*t+n[i].offset;return this.year()},bn.year=Wt,bn.isLeapYear=function(){return H(this.year())},bn.weekYear=function(t){return hn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},bn.isoWeekYear=function(t){return hn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},bn.quarter=bn.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},bn.month=Nt,bn.daysInMonth=function(){return Tt(this.year(),this.month())},bn.week=bn.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},bn.isoWeek=bn.isoWeeks=function(t){var e=jt(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},bn.weeksInYear=function(){var t=this.localeData()._week;return Ht(this.year(),t.dow,t.doy)},bn.weeksInWeekYear=function(){var t=this.localeData()._week;return Ht(this.weekYear(),t.dow,t.doy)},bn.isoWeeksInYear=function(){return Ht(this.year(),1,4)},bn.isoWeeksInISOWeekYear=function(){return Ht(this.isoWeekYear(),1,4)},bn.date=fn,bn.day=bn.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e,n,i=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(e=t,n=this.localeData(),t="string"!=typeof e?e:isNaN(e)?"number"==typeof(e=n.weekdaysParse(e))?e:null:parseInt(e,10),this.add(t-i,"d")):i},bn.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},bn.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null==t)return this.day()||7;var e,n,i=(e=t,n=this.localeData(),"string"==typeof e?n.weekdaysParse(e)%7||7:isNaN(e)?null:e);return this.day(this.day()%7?i:i-7)},bn.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},bn.hour=bn.hours=ee,bn.minute=bn.minutes=gn,bn.second=bn.seconds=vn,bn.millisecond=bn.milliseconds=pn,bn.utcOffset=function(t,e,n){var i,r=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null==t)return this._isUTC?r:Ve(this);if("string"==typeof t){if(null===(t=Ee(dt,t)))return this}else Math.abs(t)<16&&!n&&(t*=60);return!this._isUTC&&e&&(i=Ve(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!e||this._changeInProgress?$e(this,Ue(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,f.updateOffset(this,!0),this._changeInProgress=null)),this},bn.utc=function(t){return this.utcOffset(0,t)},bn.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Ve(this),"m")),this},bn.parseZone=function(){var t;return null!=this._tzm?this.utcOffset(this._tzm,!1,!0):"string"==typeof this._i&&(null!=(t=Ee(ut,this._i))?this.utcOffset(t):this.utcOffset(0,!0)),this},bn.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Pe(t).utcOffset():0,(this.utcOffset()-t)%60==0)},bn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},bn.isLocal=function(){return!!this.isValid()&&!this._isUTC},bn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},bn.isUtc=je,bn.isUTC=je,bn.zoneAbbr=function(){return this._isUTC?"UTC":""},bn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},bn.dates=n("dates accessor is deprecated. Use date instead.",fn),bn.months=n("months accessor is deprecated. Use month instead",Nt),bn.years=n("years accessor is deprecated. Use year instead",Wt),bn.zone=n("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}),bn.isDSTShifted=n("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!a(this._isDSTShifted))return this._isDSTShifted;var t,e={};return _(e,this),(e=Ce(e))._a?(t=(e._isUTC?m:Pe)(e._a),this._isDSTShifted=this.isValid()&&0<function(t,e,n){for(var i=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),a=0,o=0;o<i;o++)(n&&t[o]!==e[o]||!n&&U(t[o])!==U(e[o]))&&a++;return a+r}(e._a,t.toArray())):this._isDSTShifted=!1,this._isDSTShifted});var xn=T.prototype;function wn(t,e,n,i){var r=ce(),a=m().set(i,e);return r[n](a,t)}function kn(t,e,n){if(d(t)&&(e=t,t=void 0),t=t||"",null!=e)return wn(t,e,n,"month");for(var i=[],r=0;r<12;r++)i[r]=wn(t,r,n,"month");return i}function Mn(t,e,n,i){e=("boolean"==typeof t?d(e)&&(n=e,e=void 0):(e=t,t=!1,d(n=e)&&(n=e,e=void 0)),e||"");var r,a=ce(),o=t?a._week.dow:0,s=[];if(null!=n)return wn(e,(n+o)%7,i,"day");for(r=0;r<7;r++)s[r]=wn(e,(r+o)%7,i,"day");return s}xn.calendar=function(t,e,n){var i=this._calendar[t]||this._calendar.sameElse;return D(i)?i.call(e,n):i},xn.longDateFormat=function(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.match(O).map(function(t){return"MMMM"===t||"MM"===t||"DD"===t||"dddd"===t?t.slice(1):t}).join(""),this._longDateFormat[t])},xn.invalidDate=function(){return this._invalidDate},xn.ordinal=function(t){return this._ordinal.replace("%d",t)},xn.preparse=_n,xn.postformat=_n,xn.relativeTime=function(t,e,n,i){var r=this._relativeTime[n];return D(r)?r(t,e,n,i):r.replace(/%d/i,t)},xn.pastFuture=function(t,e){var n=this._relativeTime[0<t?"future":"past"];return D(n)?n(e):n.replace(/%s/i,e)},xn.set=function(t){var e,n;for(n in t)g(t,n)&&(D(e=t[n])?this[n]=e:this["_"+n]=e);this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},xn.eras=function(t,e){for(var n,i=this._eras||ce("en")._eras,r=0,a=i.length;r<a;++r){switch(typeof i[r].since){case"string":n=f(i[r].since).startOf("day"),i[r].since=n.valueOf()}switch(typeof i[r].until){case"undefined":i[r].until=1/0;break;case"string":n=f(i[r].until).startOf("day").valueOf(),i[r].until=n.valueOf()}}return i},xn.erasParse=function(t,e,n){var i,r,a,o,s,l=this.eras();for(t=t.toUpperCase(),i=0,r=l.length;i<r;++i)if(a=l[i].name.toUpperCase(),o=l[i].abbr.toUpperCase(),s=l[i].narrow.toUpperCase(),n)switch(e){case"N":case"NN":case"NNN":if(o===t)return l[i];break;case"NNNN":if(a===t)return l[i];break;case"NNNNN":if(s===t)return l[i]}else if(0<=[a,o,s].indexOf(t))return l[i]},xn.erasConvertYear=function(t,e){var n=t.since<=t.until?1:-1;return void 0===e?f(t.since).year():f(t.since).year()+(e-t.offset)*n},xn.erasAbbrRegex=function(t){return g(this,"_erasAbbrRegex")||dn.call(this),t?this._erasAbbrRegex:this._erasRegex},xn.erasNameRegex=function(t){return g(this,"_erasNameRegex")||dn.call(this),t?this._erasNameRegex:this._erasRegex},xn.erasNarrowRegex=function(t){return g(this,"_erasNarrowRegex")||dn.call(this),t?this._erasNarrowRegex:this._erasRegex},xn.months=function(t,e){return t?s(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||At).test(e)?"format":"standalone"][t.month()]:s(this._months)?this._months:this._months.standalone},xn.monthsShort=function(t,e){return t?s(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[At.test(e)?"format":"standalone"][t.month()]:s(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},xn.monthsParse=function(t,e,n){var i,r,a;if(this._monthsParseExact)return function(t,e,n){var i,r,a,o=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)a=m([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(r=yt.call(this._shortMonthsParse,o))?r:null:-1!==(r=yt.call(this._longMonthsParse,o))?r:null:"MMM"===e?-1!==(r=yt.call(this._shortMonthsParse,o))||-1!==(r=yt.call(this._longMonthsParse,o))?r:null:-1!==(r=yt.call(this._longMonthsParse,o))||-1!==(r=yt.call(this._shortMonthsParse,o))?r:null}.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(r=m([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}},xn.monthsRegex=function(t){return this._monthsParseExact?(g(this,"_monthsRegex")||Rt.call(this),t?this._monthsStrictRegex:this._monthsRegex):(g(this,"_monthsRegex")||(this._monthsRegex=Ft),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},xn.monthsShortRegex=function(t){return this._monthsParseExact?(g(this,"_monthsRegex")||Rt.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(g(this,"_monthsShortRegex")||(this._monthsShortRegex=It),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},xn.week=function(t){return jt(t,this._week.dow,this._week.doy).week},xn.firstDayOfYear=function(){return this._week.doy},xn.firstDayOfWeek=function(){return this._week.dow},xn.weekdays=function(t,e){var n=s(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?Bt(n,this._week.dow):t?n[t.day()]:n},xn.weekdaysMin=function(t){return!0===t?Bt(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin},xn.weekdaysShort=function(t){return!0===t?Bt(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort},xn.weekdaysParse=function(t,e,n){var i,r,a;if(this._weekdaysParseExact)return function(t,e,n){var i,r,a,o=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)a=m([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(r=yt.call(this._weekdaysParse,o))?r:null:"ddd"===e?-1!==(r=yt.call(this._shortWeekdaysParse,o))?r:null:-1!==(r=yt.call(this._minWeekdaysParse,o))?r:null:"dddd"===e?-1!==(r=yt.call(this._weekdaysParse,o))||-1!==(r=yt.call(this._shortWeekdaysParse,o))||-1!==(r=yt.call(this._minWeekdaysParse,o))?r:null:"ddd"===e?-1!==(r=yt.call(this._shortWeekdaysParse,o))||-1!==(r=yt.call(this._weekdaysParse,o))||-1!==(r=yt.call(this._minWeekdaysParse,o))?r:null:-1!==(r=yt.call(this._minWeekdaysParse,o))||-1!==(r=yt.call(this._weekdaysParse,o))||-1!==(r=yt.call(this._shortWeekdaysParse,o))?r:null}.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(r=m([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[i]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[i].test(t))return i;if(n&&"ddd"===e&&this._shortWeekdaysParse[i].test(t))return i;if(n&&"dd"===e&&this._minWeekdaysParse[i].test(t))return i;if(!n&&this._weekdaysParse[i].test(t))return i}},xn.weekdaysRegex=function(t){return this._weekdaysParseExact?(g(this,"_weekdaysRegex")||Kt.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(g(this,"_weekdaysRegex")||(this._weekdaysRegex=Zt),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},xn.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(g(this,"_weekdaysRegex")||Kt.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(g(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=$t),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},xn.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(g(this,"_weekdaysRegex")||Kt.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(g(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Xt),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},xn.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},xn.meridiem=function(t,e,n){return 11<t?n?"pm":"PM":n?"am":"AM"},ue("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1===U(t%100/10)?"th":1==e?"st":2==e?"nd":3==e?"rd":"th")}}),f.lang=n("moment.lang is deprecated. Use moment.locale instead.",ue),f.langData=n("moment.langData is deprecated. Use moment.localeData instead.",ce);var Sn=Math.abs;function Dn(t,e,n,i){var r=Ue(e,n);return t._milliseconds+=i*r._milliseconds,t._days+=i*r._days,t._months+=i*r._months,t._bubble()}function Cn(t){return t<0?Math.floor(t):Math.ceil(t)}function Tn(t){return 4800*t/146097}function Pn(t){return 146097*t/4800}function On(t){return function(){return this.as(t)}}var An=On("ms"),In=On("s"),Fn=On("m"),Ln=On("h"),Nn=On("d"),Rn=On("w"),Yn=On("M"),Wn=On("Q"),En=On("y");function zn(t){return function(){return this.isValid()?this._data[t]:NaN}}var Vn=zn("milliseconds"),jn=zn("seconds"),Hn=zn("minutes"),Bn=zn("hours"),Un=zn("days"),qn=zn("months"),Gn=zn("years");var Zn=Math.round,$n={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Xn(t,e,n,i){var r=Ue(t).abs(),a=Zn(r.as("s")),o=Zn(r.as("m")),s=Zn(r.as("h")),l=Zn(r.as("d")),u=Zn(r.as("M")),d=Zn(r.as("w")),c=Zn(r.as("y")),h=(a<=n.ss?["s",a]:a<n.s&&["ss",a])||o<=1&&["m"]||o<n.m&&["mm",o]||s<=1&&["h"]||s<n.h&&["hh",s]||l<=1&&["d"]||l<n.d&&["dd",l];return null!=n.w&&(h=h||d<=1&&["w"]||d<n.w&&["ww",d]),(h=h||u<=1&&["M"]||u<n.M&&["MM",u]||c<=1&&["y"]||["yy",c])[2]=e,h[3]=0<+t,h[4]=i,function(t,e,n,i,r){return r.relativeTime(e||1,!!n,t,i)}.apply(null,h)}var Kn=Math.abs;function Jn(t){return(0<t)-(t<0)||+t}function Qn(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n,i,r,a,o,s,l=Kn(this._milliseconds)/1e3,u=Kn(this._days),d=Kn(this._months),c=this.asSeconds();return c?(t=B(l/60),e=B(t/60),l%=60,t%=60,n=B(d/12),d%=12,i=l?l.toFixed(3).replace(/\.?0+$/,""):"",r=c<0?"-":"",a=Jn(this._months)!==Jn(c)?"-":"",o=Jn(this._days)!==Jn(c)?"-":"",s=Jn(this._milliseconds)!==Jn(c)?"-":"",r+"P"+(n?a+n+"Y":"")+(d?a+d+"M":"")+(u?o+u+"D":"")+(e||t||l?"T":"")+(e?s+e+"H":"")+(t?s+t+"M":"")+(l?s+i+"S":"")):"P0D"}var ti=Le.prototype;return ti.isValid=function(){return this._isValid},ti.abs=function(){var t=this._data;return this._milliseconds=Sn(this._milliseconds),this._days=Sn(this._days),this._months=Sn(this._months),t.milliseconds=Sn(t.milliseconds),t.seconds=Sn(t.seconds),t.minutes=Sn(t.minutes),t.hours=Sn(t.hours),t.months=Sn(t.months),t.years=Sn(t.years),this},ti.add=function(t,e){return Dn(this,t,e,1)},ti.subtract=function(t,e){return Dn(this,t,e,-1)},ti.as=function(t){if(!this.isValid())return NaN;var e,n,i=this._milliseconds;if("month"===(t=E(t))||"quarter"===t||"year"===t)switch(e=this._days+i/864e5,n=this._months+Tn(e),t){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(e=this._days+Math.round(Pn(this._months)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 1440*e+i/6e4;case"second":return 86400*e+i/1e3;case"millisecond":return Math.floor(864e5*e)+i;default:throw new Error("Unknown unit "+t)}},ti.asMilliseconds=An,ti.asSeconds=In,ti.asMinutes=Fn,ti.asHours=Ln,ti.asDays=Nn,ti.asWeeks=Rn,ti.asMonths=Yn,ti.asQuarters=Wn,ti.asYears=En,ti.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*U(this._months/12):NaN},ti._bubble=function(){var t,e,n,i,r,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return 0<=a&&0<=o&&0<=s||a<=0&&o<=0&&s<=0||(a+=864e5*Cn(Pn(s)+o),s=o=0),l.milliseconds=a%1e3,t=B(a/1e3),l.seconds=t%60,e=B(t/60),l.minutes=e%60,n=B(e/60),l.hours=n%24,o+=B(n/24),s+=r=B(Tn(o)),o-=Cn(Pn(r)),i=B(s/12),s%=12,l.days=o,l.months=s,l.years=i,this},ti.clone=function(){return Ue(this)},ti.get=function(t){return t=E(t),this.isValid()?this[t+"s"]():NaN},ti.milliseconds=Vn,ti.seconds=jn,ti.minutes=Hn,ti.hours=Bn,ti.days=Un,ti.weeks=function(){return B(this.days()/7)},ti.months=qn,ti.years=Gn,ti.humanize=function(t,e){if(!this.isValid())return this.localeData().invalidDate();var n,i,r=!1,a=$n;return"object"==typeof t&&(e=t,t=!1),"boolean"==typeof t&&(r=t),"object"==typeof e&&(a=Object.assign({},$n,e),null!=e.s&&null==e.ss&&(a.ss=e.s-1)),n=this.localeData(),i=Xn(this,!r,a,n),r&&(i=n.pastFuture(+this,i)),n.postformat(i)},ti.toISOString=Qn,ti.toString=Qn,ti.toJSON=Qn,ti.locale=en,ti.localeData=rn,ti.toIsoString=n("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Qn),ti.lang=nn,L("X",0,0,"unix"),L("x",0,0,"valueOf"),ht("x",lt),ht("X",/[+-]?\d+(\.\d{1,3})?/),pt("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t))}),pt("x",function(t,e,n){n._d=new Date(U(t))}),f.version="2.29.1",t=Pe,f.fn=bn,f.min=function(){return Ie("isBefore",[].slice.call(arguments,0))},f.max=function(){return Ie("isAfter",[].slice.call(arguments,0))},f.now=function(){return Date.now?Date.now():+new Date},f.utc=m,f.unix=function(t){return Pe(1e3*t)},f.months=function(t,e){return kn(t,e,"months")},f.isDate=o,f.locale=ue,f.invalid=y,f.duration=Ue,f.isMoment=w,f.weekdays=function(t,e,n){return Mn(t,e,n,"weekdays")},f.parseZone=function(){return Pe.apply(null,arguments).parseZone()},f.localeData=ce,f.isDuration=Ne,f.monthsShort=function(t,e){return kn(t,e,"monthsShort")},f.weekdaysMin=function(t,e,n){return Mn(t,e,n,"weekdaysMin")},f.defineLocale=de,f.updateLocale=function(t,e){var n,i,r;return null!=e?(r=ie,null!=re[t]&&null!=re[t].parentLocale?re[t].set(C(re[t]._config,e)):(null!=(i=le(t))&&(r=i._config),e=C(r,e),null==i&&(e.abbr=t),(n=new T(e)).parentLocale=re[t],re[t]=n),ue(t)):null!=re[t]&&(null!=re[t].parentLocale?(re[t]=re[t].parentLocale,t===ue()&&ue(t)):null!=re[t]&&delete re[t]),re[t]},f.locales=function(){return i(re)},f.weekdaysShort=function(t,e,n){return Mn(t,e,n,"weekdaysShort")},f.normalizeUnits=E,f.relativeTimeRounding=function(t){return void 0===t?Zn:"function"==typeof t&&(Zn=t,!0)},f.relativeTimeThreshold=function(t,e){return void 0!==$n[t]&&(void 0===e?$n[t]:($n[t]=e,"s"===t&&($n.ss=e-1),!0))},f.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},f.prototype=bn,f.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},f},"object"==typeof t&&void 0!==ni?ni.exports=n():"function"==typeof define&&define.amd?define(n):e.moment=n()},{}],3:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.chart=void 0;var i,o=(i=t("chart.js"))&&i.__esModule?i:{default:i};function s(t){return function(t){if(Array.isArray(t))return r(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function d(t,e){var n=new Date(1e3*t),i=new Date(n.toLocaleString("en-US",{timeZone:e})),r=i.getHours();return"".concat(r)}n.chart=function(u){var t=document.getElementById("myChart"),e=document.getElementById("myChart1"),n=u.hourly.map(function(t){return Math.round(t.temp)}),i=u.hourly.map(function(t,e){return t}),r=Math.min.apply(Math,s(n)),a=Math.max.apply(Math,s(n));new o.default(t,{type:"line",data:{labels:i,datasets:[{data:n,borderColor:"rgb(235,110,75)",backgroundColor:"rgba(0, 0, 0, 0)",borderWidth:2,pointBorderColor:"rgba(0, 0, 0, 0)"},{data:i,xAxisID:"wind"},{},{data:i,xAxisID:"time"},{data:i,xAxisID:"description"}]},options:{responsive:!0,maintainAspectRatio:!1,events:[],legend:{display:!1},tooltips:{enabled:!1},scales:{yAxes:[{gridLines:{display:!1},ticks:{stepSize:a-r<5?1:a-r<8?2:5,fontColor:"rgba(0,0,0,0)",padding:-10}}],xAxes:[{gridLines:{display:!1},ticks:{fontColor:"rgb(120,203,191)",fontSize:12,callback:function(t){return"".concat((100*t.pop).toFixed(),"%")},maxRotation:0}},{id:"description",type:"category",position:"bottom",gridLines:{display:!0,drawOnChartArea:!1},ticks:{fontSize:10,callback:function(t){var e=t.weather[0].description;return"".concat(e.split(" ")[0],"\n").concat(e.split(" ")[1],"  ")},maxRotation:0}},{id:"wind",type:"category",position:"bottom",gridLines:{display:!1},ticks:{fontSize:10,callback:function(t){return"".concat(t.wind_speed.toFixed(1),"m/s")},maxRotation:0}},{id:"time",type:"category",position:"top",gridLines:{display:!1},ticks:{fontSize:12,callback:function(t,e,n){var i,r,a,o,s,l;return t.dt="0h"==="".concat(d(t.dt,u.timezone),"h")?"".concat((i=t.dt,r=u.timezone,a=new Date(1e3*i),o=new Date(a.toLocaleString("en-US",{timeZone:r})),s=o.getDate(),l=o.getMonth()+1,"".concat(s," / ").concat(l))):"".concat(d(t.dt,u.timezone),"h"),n[0].dt="Hiện tại",t.dt},maxRotation:0,padding:20}}]}}}),new o.default(e,{type:"line",data:{labels:n,datasets:[{data:n}]},options:{maintainAspectRatio:!1,layout:{padding:{top:50,bottom:58}},legend:{display:!1},scales:{yAxes:[{ticks:{stepSize:a-r<5?1:a-r<8?2:5,callback:function(t){return"".concat(t,"°C")},fontColor:"rgb(235,110,75)",padding:20}}]}}})}},{"chart.js":1}],4:[function(t,e,n){"use strict";var i=t("./weather"),r=t("./time");window.addEventListener("DOMContentLoaded",function(){(0,i.weather)(),(0,r.time)()})},{"./time":5,"./weather":7}],5:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.time=void 0;function i(){var t=new Date,e=t.getDay(),n=t.getDate(),i="".concat(t.getMonth())+1,r="".concat(t.getHours()),a="0".concat(t.getMinutes()),o="0".concat(t.getSeconds());s.innerText="".concat(["CN","T2","T3","T4","T5","T6","T7"][e]," ").concat(n,"/").concat(i," ").concat(r,":").concat(a.substr(-2),":").concat(o.substr(-2))}var s=document.querySelector(".js-weather-current__time");n.time=function(){setInterval(i,1e3)}},{}],6:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.hideOnClickOutside=n.delegate=n.totalResult=n.getSiblings=void 0;n.getSiblings=function(t){for(var e=[],n=t.parentNode.firstChild;n;)1===n.nodeType&&n!==t&&e.push(n),n=n.nextSibling;return e};n.totalResult=function(t,e){return t.reduce(function(t,e){return t+e},e)};n.delegate=function(s,t,l,u){s.addEventListener(t,function(t){for(var e=s.querySelectorAll(l),n=t.target,i=0,r=e.length;i<r;i++)for(var a=n,o=e[i];a&&a!==s;){if(a===o)return u.call(o,t);a=a.parentNode}})};n.hideOnClickOutside=function(n,i){function t(t){var e;!n.contains(t.target)&&((e=n)&&(e.offsetWidth||e.offsetHeight||e.getClientRects().length))&&(i(),r())}var r=function(){document.removeEventListener("click",t)};document.addEventListener("click",t)}},{}],7:[function(t,e,n){"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(n,"__esModule",{value:!0}),n.weather=void 0;var r=function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==o(t)&&"function"!=typeof t)return{default:t};var e=s();if(e&&e.has(t))return e.get(t);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in t){var a;Object.prototype.hasOwnProperty.call(t,r)&&((a=i?Object.getOwnPropertyDescriptor(t,r):null)&&(a.get||a.set)?Object.defineProperty(n,r,a):n[r]=t[r])}n.default=t,e&&e.set(t,n);return n}(t("./util")),i=t("./chart");function s(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return s=function(){return t},t}function a(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function u(t){var e=t.current.weather[0],n=e.description,i=e.icon,r=t.current,a=r.temp,o=r.feels_like,s=r.humidity,l=r.pressure,u=r.wind_speed,d=r.visibility,c=r.uvi,h=r.dew_point;return b.innerText=n,_.innerText=Math.round(a),A.innerText=c,x.innerText=Math.round(o),C.innerText=s,I.innerText=h,P.innerText=l,O.innerText=u,T.innerText=d/1e3,k.style.backgroundImage="url('http://openweathermap.org/img/wn/".concat(i,"@4x.png')"),t}function d(t){var e=new Date(1e3*t),n=e.getDay(),i=e.getMonth()+1,r=e.getDate();return"".concat(["CN","T2","T3","T4","T5","T6","T7"][n]," ").concat(r," / ").concat(i)}function w(t,e){var n=new Date(1e3*t),i=new Date(n.toLocaleString("en-US",{timeZone:e})),r=i.getHours(),a=n.getMinutes();return"".concat(r,":").concat(a)}function c(_){function i(t){var e=x[t].weather[0],n=e.description,i=e.icon,r=x[t],a=r.humidity,o=r.pressure,s=r.wind_speed,l=r.uvi,u=r.dew_point,d=r.sunrise,c=r.sunset,h=x[t].temp,f=h.min,g=h.max,m=h.day,p=h.eve,v=h.morn,y=h.night,b=x[t].feels_like;U.innerText=n,Z.style.backgroundImage="url('http://openweathermap.org/img/wn/".concat(i,"@4x.png')"),V.innerText=s,E.innerText=Math.round(u),z.innerText=l,j.innerText=o,H.innerText=a,q.innerText=Math.round(f),G.innerText=Math.round(g),X.innerText="".concat(Math.round(b.morn),"°C"),$.innerText="".concat(Math.round(v),"°C"),J.innerText="".concat(Math.round(b.day),"°C"),K.innerText="".concat(Math.round(m),"°C"),tt.innerText="".concat(Math.round(b.eve),"°C"),Q.innerText="".concat(Math.round(p),"°C"),nt.innerText="".concat(Math.round(b.day),"°C"),et.innerText="".concat(Math.round(y),"°C"),rt.innerText=w(d,_.timezone),it.innerText=w(c,_.timezone)}var x=_.daily.map(function(t,e){return F[e].innerText=t.weather[0].description,N[e].style.backgroundImage="url('http://openweathermap.org/img/wn/".concat(t.weather[0].icon,"@4x.png')"),R[e].innerText="".concat(Math.round(t.temp.min)," / ").concat(Math.round(t.temp.max)),Y[e].innerText=d(t.dt),B[e].innerText=d(t.dt),t});return W.map(function(t,e){t.addEventListener("click",function(t){i(e),B[e].classList.add("is-active"),r.getSiblings(B[e]).map(function(t){return t.classList.remove("is-active")}),document.querySelector(".js-daily-detail").classList.add("is-active")})}),B.map(function(e,n){e.addEventListener("click",function(t){e.classList.add("is-active"),r.getSiblings(e).map(function(t){return t.classList.remove("is-active")}),i(n)})}),document.querySelector(".js-close").addEventListener("click",function(t){document.querySelector(".js-daily-detail").classList.remove("is-active")}),_}function h(t){if(200<=t.status&&t.status<300||404===t.status)return t.json()}function f(){alert("Không tìm thấy thành phố !!!!")}function g(t){return null!=st&&st.remove(),st=L.map("map").setView([t.lat,t.lon],12),L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(st),L.marker([t.lat,t.lon]).addTo(st),t}function m(t){fetch("".concat(t)).then(h).then(function(t){y.innerText="".concat(t.name,",  ").concat(t.sys.country),fetch("".concat(ot,"onecall?lat=").concat(t.coord.lat,"&lon=").concat(t.coord.lon,"&exclude=minutely,alerts&units=metric&appid=").concat(at,"&lang=vi")).then(h).then(u).then(c).then(g).then(i.chart)}).catch(f)}function p(t){var e=t.coords,n=e.latitude,i=e.longitude;m("".concat(ot,"weather?lat=").concat(n,"&lon=").concat(i,"&units=metric&appid=").concat(at,"&lang=vi"))}function v(t){m("".concat(ot,"weather?q=").concat(t,"&units=metric&appid=").concat(at,"&lang=vi"))}var y=document.querySelector(".js-weather-current__name"),b=document.querySelector(".js-weather-current__desc"),_=document.querySelector(".js-weather-current__temp"),x=document.querySelector(".js-weather-current__feels"),k=document.querySelector(".js-weather-current__icon"),M=document.querySelector(".js-weather-current__redo"),S=document.querySelector(".js-search__input"),D=document.querySelector(".js-search__btn"),C=document.querySelector(".js-expand-list__humidity"),T=document.querySelector(".js-expand-list__visibility"),P=document.querySelector(".js-expand-list__pressure"),O=document.querySelector(".js-expand-list__wind"),A=document.querySelector(".js-expand-list__uvi"),I=document.querySelector(".js-expand-list__dewpoint"),F=a(document.querySelectorAll(".js-daily-list__desc")),N=a(document.querySelectorAll(".js-daily-list__icon")),R=a(document.querySelectorAll(".js-daily-list__temp")),Y=a(document.querySelectorAll(".js-daily-list__time")),W=a(document.querySelectorAll(".wrap-list .js-daily-list__item")),E=document.querySelector(".daily-detail__body .js-expand-list__dewpoint"),z=document.querySelector(".daily-detail__body .js-expand-list__uvi"),V=document.querySelector(".daily-detail__body .js-expand-list__wind"),j=document.querySelector(".daily-detail__body .js-expand-list__pressure"),H=document.querySelector(".daily-detail__body .js-expand-list__humidity"),B=a(document.querySelectorAll(".js-daily-detail__header .js-daily-list__item")),U=document.querySelector(".js-detail-main__desc"),q=document.querySelector(".js-detail-main__min"),G=document.querySelector(".js-detail-main__max"),Z=document.querySelector(".js-detail-main__icon"),$=document.querySelector(".js-detail-temp__morn"),X=document.querySelector(".js-detail-temp__morn-feel"),K=document.querySelector(".js-detail-temp__day"),J=document.querySelector(".js-detail-temp__day-feel"),Q=document.querySelector(".js-detail-temp__eve"),tt=document.querySelector(".js-detail-temp__eve-feel"),et=document.querySelector(".js-detail-temp__night"),nt=document.querySelector(".js-detail-temp__night-feel"),it=document.querySelector(".js-detail-suntime__sunset"),rt=document.querySelector(".js-detail-suntime__sunrise"),at="2f887e5d1ea0b70b225c193184f78cd2",ot="https://api.openweathermap.org/data/2.5/",st=null;n.weather=function(){navigator.geolocation.getCurrentPosition(p),S.addEventListener("keypress",function(t){13===t.keyCode&&""!==t.target.value&&(v(t.target.value),t.target.value="")}),D.addEventListener("click",function(t){""!==S.value&&(v(S.value),S.value="")}),M.addEventListener("click",function(t){v(y.innerText)})}},{"./chart":3,"./util":6}]},{},[4]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
